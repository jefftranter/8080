 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 1 - 2024-05-01 01:09:39 PM


       1/      0 :                              INCLUDE macros.mac
(1)    1/      0 :                      ; Macros to emulate the Heathkit HDOS assembler.
(1)    2/      0 :                      
(1)    3/      0 :                      ERRNZ   MACRO EXP
(1)    4/      0 :                              IF (EXP) != 0
(1)    5/      0 :                                ERROR Expression is not zero
(1)    6/      0 :                              ENDIF
(1)    7/      0 :                              ENDM
(1)    8/      0 :                      
       2/      0 :                      
       3/      0 :                      ;;;     H19 TERMINAL FIRMWARE
       4/      0 :                      ;
       5/      0 :                      ;
       6/      0 :                      ;       COPYRIGHT 1978 BY HEATH COMPANY
       7/      0 :                      ;
       8/      0 :                      ;       WRITTEN BY R. N. BORCHARDT AUGUST 1, 1978
       9/      0 :                      
      10/      0 :                      ;       ASCII CHARACTER EQUIVALENCES
      11/      0 :                      ;
      12/      0 : =0O                  NULL    EQU     00000000B       ; NULL
      13/      0 : =7O                  BELL    EQU     00000111B       ; BELL
      14/      0 : =10O                 BS      EQU     00001000B       ; BACKSPACE
      15/      0 : =11O                 HT      EQU     00001001B       ; HORIZONTAL TAB
      16/      0 : =12O                 LF      EQU     00001010B       ; LINE FEED
      17/      0 : =15O                 CR      EQU     00001101B       ; CARRIAGE RETURN
      18/      0 : =21O                 XON     EQU     00010001B       ; DC1 (X-ON)
      19/      0 : =23O                 XOFF    EQU     00010011B       ; DC4 (X-OFF)
      20/      0 : =30O                 CAN     EQU     00011000B       ; CANCEL
      21/      0 : =33O                 ESC     EQU     00011011B       ; ESCAPE
      22/      0 : =177O                RUBOUT  EQU     01111111B       ; RUBOUT/DELETE
      23/      0 :                      
      24/      0 :                      ;       I/O PORT EQUIVALENCES
      25/      0 :                      ;
      26/      0 :                      
      27/      0 :                      ;       8250 ACE PORTS
      28/      0 :                      ;
      29/      0 :                      
      30/      0 : =100O                AP.RBR  EQU     100Q            ; RECEIVER BUFFER REGISTER PORT
      31/      0 :                      
      32/      0 : =100O                AP.THR  EQU     100Q            ; TRANSMITTER HOLDING REGISTER PORT
      33/      0 :                      
      34/      0 : =101O                AP.IER  EQU     101Q            ; INTERRUPT ENABLE REGISTER PORT
      35/      0 : =1O                  AB.ERDA EQU     00000001B       ; ENABLE RECEIVED DATA AVAILABLE INTERRUPT
      36/      0 : =2O                  AB.ETRE EQU     00000010B       ; ENABLE TRANSMITTER HOLDING REGISTER EMPTY
      37/      0 : =4O                  AB.ERLS EQU     00000100B       ; ENABLE RECEIVER LINE STATUS INTERRUPT
      38/      0 : =10O                 AB.EMS  EQU     00001000B       ; ENABLE MODEM STATUS INTERRUPT
      39/      0 :                      
      40/      0 : =102O                AP.IIR  EQU     102Q
      41/      0 : =4O                  AB.DRAI EQU     100B            ; RECEIVED DATA REGISTER INTERRUPT
      42/      0 : =2O                  AB.TREI EQU     010B            ; TRANSMITTER REGISTER EMPTY INTERRUPT
      43/      0 : =1O                  AB.IIP  EQU     00000001B       ; INVERTED INTERRUPT PENDING
      44/      0 : =6O                  AB.IID  EQU     00000110B       ; INTERRUPT IDENTIFICATION BITS
      45/      0 :                      
      46/      0 : =103O                AP.LCR  EQU     103Q            ; LINE CONTROL REGISTER PORT
      47/      0 : =0O                  AB.5BW  EQU     00000000B       ; FIVE BIT WORD
      48/      0 : =1O                  AB.6BW  EQU     00000001B       ; SIX BIT WORD
      49/      0 : =2O                  AB.7BW  EQU     00000010B       ; SEVEN BIT WORD
      50/      0 : =3O                  AB.8BW  EQU     00000011B       ; EIGHT BIT WORD
      51/      0 : =4O                  AB.2SB  EQU     00000100B       ; TWO STOP BITS
      52/      0 : =10O                 AB.PEN  EQU     00001000B       ; PARITY ENABLE
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 2 - 2024-05-01 01:09:39 PM


      53/      0 : =20O                 AB.EPS  EQU     00010000B       ; EVEN PARITY SELECT
      54/      0 : =40O                 AB.SP   EQU     00100000B       ; STICK PARITY
      55/      0 : =100O                AB.SBRK EQU     01000000B       ; SET BREAK
      56/      0 : =200O                AB.DLAB EQU     10000000B       ; DIVISOR LATCH ACCESS BIT
      57/      0 :                      
      58/      0 : =104O                AP.MCR  EQU     104Q            ; MODEM CONTROL REGISTER PORT
      59/      0 : =1O                  AB.DTR  EQU     00000001B       ; DATA TERMINAL READY
      60/      0 : =2O                  AB.RTS  EQU     00000010B       ; REQUEST TO SEND
      61/      0 : =4O                  AB.OUT1 EQU     00000100B       ; OUTPUT #1
      62/      0 : =10O                 AB.OUT2 EQU     00001000B       ; OUTPUT #2
      63/      0 : =20O                 AB.LOOP EQU     00010000B       ; LOOP
      64/      0 :                      
      65/      0 : =105O                AP.LSR  EQU     105Q            ; LINE STATUS REGISTER PORT
      66/      0 : =1O                  AB.DR   EQU     00000001B       ; DATA READY
      67/      0 : =2O                  AB.OR   EQU     00000010B       ; OVERRUN ERROR
      68/      0 : =4O                  AB.PE   EQU     00000100B       ; PARITY ERROR
      69/      0 : =10O                 AB.FE   EQU     00001000B       ; FRAMING ERROR
      70/      0 : =20O                 AB.BI   EQU     00010000B       ; BREAK INTERRUPT
      71/      0 : =40O                 AB.THRE EQU     00100000B       ; TRANSMITTER HOLDING REGISTER EMPTY
      72/      0 : =100O                AB.TSRE EQU     01000000B       ; TRANSMITTER SHIFT REGISTER EMPTY
      73/      0 :                      
      74/      0 : =106O                AP.MSR  EQU     106Q            ; MODEM STATUS REGISTER PORT
      75/      0 : =1O                  AB.DCTS EQU     00000001B       ; DELTA CLEAR TO SEND
      76/      0 : =2O                  AB.DDSR EQU     00000010B       ; DELTA DATA SET READY
      77/      0 : =10O                 AB.DRLS EQU     00001000B       ; DELTA RECEIVE LINE SIGNAL DETECT
      78/      0 : =20O                 AB.CTS  EQU     00010000B       ; CLEAR TO SEND
      79/      0 : =40O                 AB.DSR  EQU     00100000B       ; DATA SET READY
      80/      0 : =200O                AB.RLSD EQU     10000000B       ; RECEIVED LINE SIGNAL DETECT
      81/      0 :                      
      82/      0 : =100O                AP.DLL  EQU     100Q            ; DIVISOR LATCH LSB
      83/      0 :                      
      84/      0 : =101O                AP.DLM  EQU     101Q            ; DIVISOR LATCH MSB
      85/      0 :                      
      86/      0 :                      ;       CRT VIDEO CONTROLLER PORTS
      87/      0 :                      ;
      88/      0 : =140O                VP.AR   EQU     140Q            ; VIDEO ADDRESS REGISTER OUTPUT PORT
      89/      0 : =1O                  VA.HD   EQU     1               ; HORIZONTAL DISPLAYED REGISTER
      90/      0 : =2O                  VA.HSP  EQU     2               ; HORIZONTAL SYNC POSITION REGISTER
      91/      0 : =3O                  VA.HSW  EQU     3               ; HORIZONTAL SYNC WIDTH REGISTER
      92/      0 : =4O                  VA.VT   EQU     4               ; VERTICAL TOTAL REGISTER
      93/      0 : =5O                  VA.VTA  EQU     5               ; VERTICAL TOTAL ADJUST REGISTER
      94/      0 : =6O                  VA.VD   EQU     6               ; VERTICAL DISPLAYED REGISTER
      95/      0 : =7O                  VA.VSP  EQU     7               ; VERTICAL SYNC POSITION REGISTER
      96/      0 : =10O                 VA.IM   EQU     8               ; INTERLACE MODE REGISTER
      97/      0 : =11O                 VA.MLSA EQU     9               ; MAXIMUM SCAN LINE ADDRESS REGISTER
      98/      0 : =12O                 VA.CS   EQU     10              ; CURSOR START REGISTER
      99/      0 : =100O                VB.CBE  EQU     01000000B       ; CURSOR BLINK ENABLE
     100/      0 : =40O                 VB.CBPS EQU     00100000B       ; CURSOR BLINK PERIOD SLOW
     101/      0 : =40O                 VB.CND  EQU     00100000B       ; CURSOR NOT DISPLAYED
     102/      0 : =13O                 VA.CE   EQU     11              ; CURSOR END REGISTER
     103/      0 : =14O                 VA.SAM  EQU     12              ; START ADDRESS (MSB) REGISTER
     104/      0 : =15O                 VA.SAL  EQU     13              ; START ADDRESS (LSB) REGISTER
     105/      0 : =16O                 VA.CAM  EQU     14              ; CURSOR ADDRESS (MSB) REGISTER
     106/      0 : =17O                 VA.CAL  EQU     15              ; CURSOR ADDRESS (LSB) REGISTER
     107/      0 : =20O                 VA.LPM  EQU     16              ; LIGHT PEN ADDRESS (MSB) REGISTER
     108/      0 : =21O                 VA.LPL  EQU     17              ; LIGHT PEN ADDRESS (LSB) REGISTER
     109/      0 :                      
     110/      0 : =141O                VP.REGO EQU     141Q            ; VIDEO REGISTER OUTPUT PORT
     111/      0 :                      
     112/      0 : =143O                VP.REGI EQU     143Q            ; VIDEO REGISTER INPUT PORT
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 3 - 2024-05-01 01:09:39 PM


     113/      0 : =10O                 VB.RBD  EQU     00001000B       ; REVERSE VIDEO DISABLE (WHEN ADDED TO CRTC PORT#)
     114/      0 : =4O                  VB.NMI  EQU     00000100B       ; CAUSE NMI (MUST BE ADDED TO CRTC PORT #)
     115/      0 :                      
     116/      0 :                      ;       KEYBOARD PORTS
     117/      0 :                      ;
     118/      0 : =200O                KP.1    EQU     200Q            ; KEYBOARD PORT #1
     119/      0 : =177O                KB.CHAR EQU     01111111B       ; KEY VALUE
     120/      0 : =200O                KB.CTL  EQU     10000000B       ; CONTROL KEY
     121/      0 : =13O                 KB.EX1  EQU     00001011B       ; EXTRA ENCODED KEY #1
     122/      0 : =14O                 KB.EX2  EQU     00001100B       ; EXTRA ENCODED KEY #2
     123/      0 :                      
     124/      0 : =240O                KP.2    EQU     240Q            ; KEYBOARD PORT #1
     125/      0 : =1O                  KB.SHFT EQU     00000001B       ; SHIFT KEY(S)
     126/      0 : =2O                  KB.CPLK EQU     00000010B       ; CAPS LOCK KEY
     127/      0 : =4O                  KB.BRK  EQU     00000100B       ; BREAK KEY
     128/      0 : =10O                 KB.ONLN EQU     00001000B       ; ON-LINE KEY
     129/      0 : =100O                KB.RPT  EQU     01000000B       ; REPEAT KEY
     130/      0 : =200O                KB.STB  EQU     10000000B       ; KEYBOARD STROBE
     131/      0 :                      
     132/      0 :                      ;       MISC. I/O PORTS
     133/      0 :                      ;
     134/      0 : =300O                MP.TICK EQU     300Q            ; TICK PORT
     135/      0 :                      
     136/      0 : =340O                MP.BELL EQU     340Q            ; BELL PORT
     137/      0 :                      
     138/      0 : =0O                  MP.PUP1 EQU     000Q            ; POWER UP CONFIGURATION PORT #1
     139/      0 : =17O                 P1.BR   EQU     00001111B       ; BAUD RATE SELECTION SWITCHES
     140/      0 : =20O                 P1.PEN  EQU     00010000B       ; PARITY ENABLE SWITCH
     141/      0 : =40O                 P1.EPS  EQU     00100000B       ; EVEN PARITY SELECT SWITCH
     142/      0 : =100O                P1.SPS  EQU     01000000B       ; STICK PARITY SELECT SWITCH
     143/      0 : =200O                P1.FDX  EQU     10000000B       ; FULL DUPLEX SELECT SWITCH
     144/      0 :                      
     145/      0 : =40O                 MP.PUP2 EQU     040Q            ; POWER UP CONFIGURATION PORT #2
     146/      0 : =1O                  P2.CBLK EQU     00000001B       ; CURSOR = BLOCK
     147/      0 : =2O                  P2.NOTK EQU     00000010B       ; NO TICK ON KEYBOARD STRIKES
     148/      0 : =4O                  P2.WRAP EQU     00000100B       ; WRAP AROUND TO BEGINNING OF NEXT LINE
     149/      0 : =10O                 P2.ALF  EQU     00001000B       ; AUTO LINE FEED ON CARRIAGE RETURN
     150/      0 : =20O                 P2.NOSC EQU     00010000B       ; SCROLL KEY = NO SCROLL (EX HOLD SCREEN MODE)
     151/      0 : =40O                 P2.VT52 EQU     00100000B       ; VT52 MODE
     152/      0 : =100O                P2.KPDS EQU     01000000B       ; KEYPAD SHIFTED
     153/      0 : =200O                P2.50HZ EQU     10000000B       ; 50 HERTZ LINE FREQUENCY
     154/      0 :                      
     155/      0 :                      ;       INSTRUCTION EQUIVALENCES
     156/      0 :                      ;
     157/      0 : =313O                I.BITA  EQU     11001011B       ; BIT B,R (BYTE A)
     158/      0 : =100O                I.BITB  EQU     01000000B       ; BIT B,R (BYTE B) LESS BIT AND REGISTER
     159/      0 : =313O                I.BITHA EQU     11001011B       ; BIT B,(HL) (BYTE A)
     160/      0 : =106O                I.BITHB EQU     01000110B       ; BIT B,(HL) (BYTE B)
     161/      0 : =355O                I.IM1A  EQU     11101101B       ; IM1 (BYTE A)
     162/      0 : =126O                I.IM1B  EQU     01010110B       ; IM1 (BYTE B)
     163/      0 : =355O                I.NEGA  EQU     11101101B       ; NEG (BYTE A)
     164/      0 : =104O                I.NEGB  EQU     01000100B       ; NEG (BYTE B)
     165/      0 : =313O                I.SETA  EQU     11001011B       ; SET B,R (BYTE A)
     166/      0 : =300O                I.SETB  EQU     11000000B       ; SET B,R (BYTE B)
     167/      0 : =313O                I.SETHA EQU     11001011B       ; SET B,(HL)  (BYTE A)
     168/      0 : =306O                I.SETHB EQU     11000110B       ; SET B,(HL)  (BYTE B)
     169/      0 : =355O                I.SHDA  EQU     11101101B       ; SBC HL,DE (BYTE A)
     170/      0 : =122O                I.SHDB  EQU     01010010B       ; SBC HL,DE (BYTE B)
     171/      0 : =313O                I.RESA  EQU     11001011B       ; RES B,R (BYTE A)
     172/      0 : =200O                I.RESB  EQU     10000000B       ; RES B,R (BYTE B)
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 4 - 2024-05-01 01:09:39 PM


     173/      0 : =313O                I.RESHA EQU     11001011B       ; RES B,(HL)  (BYTE A)
     174/      0 : =206O                I.RESHB EQU     10000110B       ; RES B,(HL)  (BYTE B)
     175/      0 : =10O                 I.EXAF  EQU     00001000B       ; EX AF,AF'
     176/      0 : =331O                I.EXX   EQU     11011001B       ; EXX
     177/      0 : =355O                I.LDEDA EQU     11101101B       ; LD DE,(NN) (BYTE A)
     178/      0 : =133O                I.LDEDB EQU     01011011B       ; LD DE,(NN) (BYTE B)
     179/      0 : =355O                I.LDDA  EQU     11101101B       ; LDD (BYTE A)
     180/      0 : =250O                I.LDDB  EQU     10101000B       ; LDD (BYTE B)
     181/      0 : =355O                I.LDDRA EQU     11101101B       ; LDDR (BYTE A)
     182/      0 : =270O                I.LDDRB EQU     10111000B       ; LDDR (BYTE B)
     183/      0 : =355O                I.LDIA  EQU     11101101B       ; LDI (BYTE A)
     184/      0 : =240O                I.LDIB  EQU     10100000B       ; LDI (BYTE B)
     185/      0 : =355O                I.LDIRA EQU     11101101B       ; LDIR (BYTE A)
     186/      0 : =260O                I.LDIRB EQU     10110000B       ; LDIR (BYTE B)
     187/      0 : =323O                I.OUT   EQU     11010011B       ; OUTPUT
     188/      0 : =311O                I.RET   EQU     11001001B       ; RETURN
     189/      0 : =303O                I.JMP   EQU     11000011B       ; JUMP
     190/      0 : =355O                I.RETNA EQU     11101101B       ; RETURN FROM NMI (BYTE A)
     191/      0 : =105O                I.RETNB EQU     01000101B       ; RETURN FROM NMI (BYTE B)
     192/      0 :                      
     193/      0 :                      ;       BIT INSTRUCTION BIT AND REGISTER DEFINITIONS
     194/      0 :                      ;
     195/      0 :                      ;       BYTE B OF BIT AND SET OPERATIONS ARE XXBBBRRR.  WHERE XX IS
     196/      0 :                      ;       DEFINED BY THE INSTRUCTION, BBB DEFINES THE BIT, AND RRR DEFINES
     197/      0 :                      ;       THE REGISTER
     198/      0 :                      ;
     199/      0 : =1O                  IB.CPLK EQU     1               ; CAPS LOCK = BIT 1
     200/      0 : =7O                  IB.ESCF EQU     7               ; ESCAPE CODE FLAG = BIT 7
     201/      0 : =1O                  IB.ETRE EQU     1               ; ENABLE TRANSMITTER REGISTER EMPTY INTERRUPT
     202/      0 : =70O                 IB.IFF  EQU     7*8             ; INPUT FIFO FLAG = BIT 7
     203/      0 : =7O                  IB.KCB  EQU     7               ; KEYBOARD CONTROL KEY BIT = BIT 7
     204/      0 : =0O                  IB.KSB  EQU     0*8             ; KEYBOARD SHIFT KEY BIT = BIT 0
     205/      0 : =0O                  IB.HSM  EQU     0*8             ; HOLD SCREEN MODE = BIT 7
     206/      0 : =7O                  IB.RV   EQU     7               ; REVERSE VIDEO MODE = BIT 7
     207/      0 : =6O                  IB.ICM  EQU     6               ; INSERT CHARACTER MODE = BIT 6
     208/      0 : =70O                 IB.KPDA EQU     7*8             ; KEYPAD ALTERNATE MODE = BIT 5
     209/      0 : =6O                  IB.KPDS EQU     6               ; KEYPAD SHIFTED MODE = BIT 4
     210/      0 : =3O                  IB.ONLN EQU     3               ; KEYPAD SHIFTED MODE = BIT 3
     211/      0 : =20O                 IB.BRK  EQU     2*8             ; BREAK KEY = BIT 2
     212/      0 : =1O                  IB.GRPH EQU     1               ; TERMINAL IN GRAPHICS MODE = BIT 1
     213/      0 : =0O                  IB.PWE  EQU     0*8             ; PREVIOUS CHARACTER WAS AN ESCAPE = BIT 0
     214/      0 : =4O                  IB.XOFF EQU     4               ; XOFF SENT TO HOST = BIT 4
     215/      0 : =10O                 IB.XMTG EQU     1*8             ; TRANSMIT MODE = GRAPHICS = BIT 1
     216/      0 : =20O                 IB.XMTR EQU     2*8             ; TRANSMIT MODE = REVERSE VIDEO = BIT 2
     217/      0 :                      
     218/      0 : =7O                  IR.A    EQU     111B            ; REGISTER = A
     219/      0 : =0O                  IR.B    EQU     000B            ; REGISTER = B
     220/      0 : =1O                  IR.C    EQU     001B            ; REGISTER = C
     221/      0 : =2O                  IR.D    EQU     010B            ; REGISTER = D
     222/      0 : =3O                  IR.E    EQU     011B            ; REGISTER = E
     223/      0 : =4O                  IR.H    EQU     100B            ; REGISTER = H
     224/      0 : =5O                  IR.L    EQU     101B            ; REGISTER = L
     225/      0 :                      
     226/      0 :                      ;;      LABEL EQUIVALENCES
     227/      0 :                      ;
     228/      0 : =200O                IFF     EQU     10000000B       ; INPUT FIFO FLAG
     229/      0 : =200O                ESCF    EQU     10000000B       ; ESCAPE FLAG
     230/      0 : =37O                 SCRL    EQU     00011111B       ; KEYBOARD VALUE FOR SCROLL KEY
     231/      0 :                      
     232/      0 :                      
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 5 - 2024-05-01 01:09:39 PM


     233/      0 :                      ;;;     INITIALIZE SYSTEM
     234/      0 :                      ;
     235/      0 :                      ;       JUMP TO THE ROUTINE WHICH SETS UP ALL THE PORTS, RAM, AND THE CRTC
     236/      0 :                      ;
     237/      0 :                              ORG     0
     238/      0 :                      
     239/      0 : 303 001 013          START   JMP     INIT
     240/      3 : 313                          DB      43H+41H+47H     ; ENGINEERING CODE
     241/      4 :                      
     242/      4 :                      ;;;     MAIN - MAIN CONTROL LOOP
     243/      4 :                      ;
     244/      4 :                      ;       *MAIN* SETS ITSELF UP AS THE FINAL RETURN ADDRESS FOR ALL ROUTINES
     245/      4 :                      ;       AND IS IN CHARGE OF GIVING CONTROL TO THE PROPER ROUTINE WHENEVER
     246/      4 :                      ;       THERE IS A CHARACTER PRESENT IN ONE OF THE FIFOS
     247/      4 :                      ;
     248/      4 :                      ;       THE ORDER OF PRIORITY OF SERVICE IS IN THE ORDER IN WHICH THE
     249/      4 :                      ;       FIFOS ARE TESTED (KEYBOARD FIFO = #1, INPUT FIFO = #2, OUTPUT
     250/      4 :                      ;       FIFO = #3)
     251/      4 :                      ;
     252/      4 :                      ;
     253/      4 :                      ;       ENTRY   NONE
     254/      4 :                      ;
     255/      4 :                      ;       EXIT    NONE
     256/      4 :                      ;
     257/      4 :                      ;       USES    A,B,C,D,E,H,L,F
     258/      4 :                      
     259/      4 :                      
     260/      4 : 041 004 000          MAIN    LXI     H,MAIN          ; SET SELF AS RETURN ADDRESS ON STACK
     261/      7 : 345                          PUSH    H
     262/     10 :                      
     263/     10 : 315 367 011                  CALL    FCIF            ; GET CHARACTER FROM INPUT FIFO
     264/     13 : 322 120 003                  JNC     IFCP            ; IF PRESENT, PROCESS IT
     265/     16 :                      
     266/     16 : 315 107 012          MAIN.N  CALL    FVKF            ; FETCH VALUES FROM KEYBOARD FIFO
     267/     21 : 322 117 001                  JNC     KCE             ; IF CHARACTER PRESENT, ENCODE IT
     268/     24 :                      
     269/     24 : 315 111 016                  CALL    UCP             ; UPDATE THE CURSOR POSITION
     270/     27 :                      
     271/     27 : 072 307 100                  LDA     MODEA           ; GET MODE FLAGS
     272/     32 : 346 040                      ANI     MA.BRK          ; HAS BREAK BEEN SET?
     273/     34 : 304 070 000                  CNZ     AKI             ; IF BREAK IS SET, SEE IF WE CAN TURN IT OFF
     274/     37 :                      
     275/     37 : 072 311 100          MAIN1   LDA     MODEI           ; GET CURRENT MODE FLAGS
     276/     42 : 346 010                      ANI     MI.ONLN         ; IS TERMINAL ON-LINE?
     277/     44 : 310                          RZ                      ; IF NOT ON LINE
     278/     45 :                      
     279/     45 :                      ;       ALTERNATE ENTRY POINT FOR SETTING THE XMIT INTERRUPT ONLY
     280/     45 :                      ;
     281/     45 : 363                  MAINA   DI                      ; ELSE, LOCK OUT INTERRUPTS
     282/     46 : 072 243 100                  LDA     OFC             ; SEE IF OUTPUT FIFO HAS ANY CHARACTERS
     283/     51 : 267                          ORA     A
     284/     52 :                              CPU     Z80
     285/     52 : 050 012                      JR      Z,MAIN2         ; IF NO CHARACTERS TO OUTPUT
     286/     54 :                              CPU     8080
     287/     54 :                      
     288/     54 : 333 101                      IN      AP.IER          ; IF CHARACTERS PRESENT, SEE IF XMIT INT. IS ON
     289/     56 :                              CPU     Z80
     290/     56 : 313 117                      BIT     IB.ETRE,A
     291/     60 : 040 004                      JR      NZ,MAIN2        ; IF INTERRUPT IS ENABLED
     292/     62 :                              CPU     8080
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 6 - 2024-05-01 01:09:39 PM


     293/     62 :                      
     294/     62 : 366 002                      ORI     AB.ETRE         ; ELSE, ENABLE INTERRUPT SO OUTPUT CAN BEGIN
     295/     64 : 323 101                      OUT     AP.IER
     296/     66 : 373                  MAIN2   EI                      ; ENABLE INTERRUPTS
     297/     67 : 311                          RET
     298/     70 :                      
     299/     70 :                      ;;;     AKI - ACE/KEYBOARD INTERRUPT
     300/     70 :                      ;
     301/     70 :                      ;       *AKI* IS ACCESSED WHENEVER AN INTERRUPT IS RECEIVED FROM EITHER
     302/     70 :                      ;       THE ACE, THE KEYBOARD ENCODER, OR THE KEYBOARD BREAK KEY.  ALL
     303/     70 :                      ;       VALID INTERRUPT SOURCES ARE SAMPLES TO ENSURE THAT NO FALSE
     304/     70 :                      ;       INTERRUPTS ARE SERVICED.
     305/     70 :                      ;
     306/     70 :                      ;
     307/     70 :                      ;       ENTRY   NONE
     308/     70 :                      ;
     309/     70 :                      ;       EXIT     NONE
     310/     70 :                      ;
     311/     70 :                      ;       USES    A',B',C',D',E',H',L',F'
     312/     70 :                      
     313/     70 : (MACRO)                      ERRNZ   $-70Q           ; Z80 MODE ONE INTERRUPT ADDRESS
     313/     70 : =>FALSE                      IF ($-70Q) != 0
     313/     70 :                                ERROR Expression is not zero
     313/     70 : [1.057]                      ENDIF
     314/     70 :                              CPU     Z80
     315/     70 : 010                  AKI     EX      AF,AF'          ; EXCHANGE ALL REGISTERS
     316/     71 : 331                          EXX
     317/     72 :                              CPU     8080
     318/     72 :                      
     319/     72 : 333 240              AKI1    IN      KP.2            ; READ KEYBOARD PORT #2
     320/     74 : 356 366                      XRI     11110110B       ; INVERT SWITCHES (EXCEPT OFF-LINE)
     321/     76 : 127                          MOV     D,A             ; SAVE SWITCH VALUES
     322/     77 : 346 010                      ANI     KB.ONLN         ; MASK FOR ON-LINE ACTIVE
     323/    101 : 117                          MOV     C,A             ; SAVE RESULT
     324/    102 : 072 311 100                  LDA     MODEI           ; GET CURRENT MODE
     325/    105 : 346 367                      ANI     377Q-MI.ONLN    ; CLEAR PREVIOUS ON-LINE STATUS
     326/    107 : 261                          ORA     C               ; REPLACE WITH NEW STATUS
     327/    110 :                      ;       ERRNZ   KB.ONLN-MI.ONLN ; SWITCH AND MODE FLAG MUST BE THE SAME
     328/    110 : 062 311 100                  STA     MODEI           ; UPDATE *MODE*
     329/    113 : 172                          MOV     A,D             ; GET SWITCH VALUES
     330/    114 : 346 004                      ANI     KB.BRK          ; MASK FOR BREAK SWITCH
     331/    116 : 072 307 100                  LDA     MODEA           ; GET MORE FLAGS
     332/    121 : 312 264 000                  JZ      AKI1.5          ; IF NO BREAK KEY
     333/    124 :                      
     334/    124 : 107                          MOV     B,A             ; SAVE MODE A
     335/    125 : 072 311 100                  LDA     MODEI           ; GET MODE I
     336/    130 : 346 004                      ANI     MI.KID          ; SEE IF KEYBOARD IS DISABLED
     337/    132 : 170                          MOV     A,B             ; (A) = MODE A
     338/    133 : 302 264 000                  JNZ     AKI1.5          ; IF CAN'T RESPOND TO BREAK
     339/    136 :                      
     340/    136 : 366 040                      ORI     MA.BRK          ; SET BREAK FLAG
     341/    140 : 062 307 100                  STA     MODEA
     342/    143 : 303 254 000                  JMP     AKI1.3          ; CONTINUE PAST NMI ROUTINE
     343/    146 :                      
     344/    146 :                      ;;      NMI - NON MASKABLE INTERRUPT USES FOR CRTC HOME POSITION UPDATE
     345/    146 :                      ;
     346/    146 :                      ;       NMI OUTPUTS THE CURRENT DISPLAY INFORMATION TO THE CRTC WHEN
     347/    146 :                      ;       CAUSED BY VERT SYNC.
     348/    146 :                      ;
     349/    146 :                      ;
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 7 - 2024-05-01 01:09:39 PM


     350/    146 :                      ;       ENTRY   NONE
     351/    146 :                      ;
     352/    146 :                      ;       EXIT    NONE
     353/    146 :                      ;
     354/    146 :                      ;       USES    NONE
     355/    146 :                      
     356/    146 : (MACRO)                      ERRNZ   $-146Q
     356/    146 : =>FALSE                      IF ($-146Q) != 0
     356/    146 :                                ERROR Expression is not zero
     356/    146 : [1.100]                      ENDIF
     357/    146 :                      
     358/    146 : 365                  NMI     PUSH    PSW             ; SAVE REGISTERS
     359/    147 : 305                          PUSH    B
     360/    150 : 325                          PUSH    D
     361/    151 : 345                          PUSH    H
     362/    152 :                      
     363/    152 :                      ;       UPDATE VERTICAL DISPLAYED REGISTER
     364/    152 :                      ;
     365/    152 : 076 006                      MVI     A,VA.VD         ; SET VERTICAL DISPLAYED ADDRESS
     366/    154 : 323 140                      OUT     VP.AR
     367/    156 : 072 276 100                  LDA     VI.VD           ; GET CURRENT # OF LINES TO DISPLAY
     368/    161 : 323 141                      OUT     VP.REGO
     369/    163 :                      
     370/    163 :                      ;       UPDATE CURSOR TYPE REGISTERS
     371/    163 :                      ;
     372/    163 : 052 277 100                  LHLD    VI.CSE          ; GET CURSOR START AND END PARAMETERS
     373/    166 : 076 012                      MVI     A,VA.CS         ; GET CRTC CURSOR START ADDRESS
     374/    170 : 323 140                      OUT     VP.AR
     375/    172 : 174                          MOV     A,H             ; OUTPUT CURSOR END ADDRESS
     376/    173 : 323 141                      OUT     VP.REGO
     377/    175 : 076 013                      MVI     A,VA.CE         ; SET CURSOR END ADDRESS
     378/    177 : 323 140                      OUT     VP.AR
     379/    201 : 175                          MOV     A,L             ; OUTPUT CURSOR END INFO
     380/    202 : 323 141                      OUT     VP.REGO
     381/    204 :                      
     382/    204 :                      ;       UPDATE VIDEO HOME ADDRESS
     383/    204 :                      ;
     384/    204 : 052 301 100                  LHLD    VI.SA           ; GET START ADDRESS
     385/    207 : 076 014                      MVI     A,VA.SAM        ; START ADDRESS MSB
     386/    211 : 323 140                      OUT     VP.AR
     387/    213 : 174                          MOV     A,H             ; OUTPUT ADDRESS MSB
     388/    214 : 323 141                      OUT     VP.REGO
     389/    216 : 076 015                      MVI     A,VA.SAL        ; START ADDRESS LSB
     390/    220 : 323 140                      OUT     VP.AR
     391/    222 : 175                          MOV     A,L             ; OUTPUT ADDRESS LSB
     392/    223 : 323 141                      OUT     VP.REGO
     393/    225 :                      
     394/    225 :                      ;       UPDATE CURSOR ADDRESS
     395/    225 :                      ;
     396/    225 : 052 303 100                  LHLD    VI.CA           ; GET CURSOR ADDRESS
     397/    230 : 076 016                      MVI     A,VA.CAM        ; CURSOR ADDRESS MSB
     398/    232 : 323 140                      OUT     VP.AR
     399/    234 : 174                          MOV     A,H             ; CURSOR MSB
     400/    235 : 323 141                      OUT     VP.REGO
     401/    237 : 076 017                      MVI     A,VA.CAL        ; CURSOR ADDRESS LSB
     402/    241 : 323 140                      OUT     VP.AR
     403/    243 : 175                          MOV     A,L             ; CURSOR LSB
     404/    244 : 323 141                      OUT     VP.REGO
     405/    246 :                      
     406/    246 :                      ;       ALLOW NEXT NMI
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 8 - 2024-05-01 01:09:39 PM


     407/    246 :                      ;
     408/    246 : 341                          POP     H               ; RESTORE ALL REGISTERS
     409/    247 : 321                          POP     D
     410/    250 : 301                          POP     B
     411/    251 : 361                          POP     PSW
     412/    252 :                              CPU     Z80
     413/    252 : 355 105                      RETN
     414/    254 :                              CPU     8080
     415/    254 :                      
     416/    254 : 333 103              AKI1.3  IN      AP.LCR          ; SET BREAK SIGNAL
     417/    256 : 366 100                      ORI     AB.SBRK
     418/    260 : 323 103                      OUT     AP.LCR
     419/    262 :                              CPU     Z80
     420/    262 : 030 013                      JR      AKI1.7          ; CONTINUE
     421/    264 :                              CPU     8080
     422/    264 :                      
     423/    264 : 346 337              AKI1.5  ANI     377Q-MA.BRK     ; MAKE SURE BREAK FLAG IS OFF
     424/    266 : 062 307 100                  STA     MODEA
     425/    271 : 333 103                      IN      AP.LCR          ; CLEAR ANY BREAK
     426/    273 : 346 277                      ANI     377Q-AB.SBRK
     427/    275 : 323 103                      OUT     AP.LCR
     428/    277 :                      
     429/    277 : 333 102              AKI1.7  IN      AP.IIR          ; SEE IF ACE WAS SOURCE OF INTERRUPT
     430/    301 : 376 004                      CPI     AB.DRAI         ; SEE IF THERE IS RECEIVED DATA AVAILABLE
     431/    303 :                              CPU     Z80
     432/    303 : 040 055                      JR      NZ,AKI2         ; IF NOT A DATA AVAILABLE INTERRUPT
     433/    305 :                              CPU     8080
     434/    305 :                      
     435/    305 :                      ;       INTERRUPT CAUSED BY DATA AVAILABLE IN ACE RECEIVER BUFFER
     436/    305 :                      ;
     437/    305 : 333 100                      IN      AP.RBR          ; INPUT DATA
     438/    307 : 346 177                      ANI     01111111B       ; TOSS PARITY BIT
     439/    311 : 312 113 001                  JZ      AKI6            ; IF CHARACTER WAS A NULL, EXIT
     440/    314 :                      
     441/    314 :                              CPU     Z80
     442/    314 : 313 131                      BIT     IB.ONLN,C       ; SEE IF TERMINAL IS ON-LINE
     443/    316 : 050 173                      JR      Z,AKI6          ; IF OFF LINE, EXIT
     444/    320 :                              CPU     8080
     445/    320 :                      
     446/    320 : 127                          MOV     D,A             ; SAVE INPUT CHARACTER
     447/    321 : 072 241 100                  LDA     IFC             ; GET INPUT FIFO COUNTER
     448/    324 : 376 160                      CPI     IFMAX-16        ; SEE IF WITHIN 16 BYTES OF OVERFLOW
     449/    326 :                              CPU     Z80
     450/    326 : 070 022                      JR      C,AKI1.8        ; IF NOT < 16 BYTES LEFT
     451/    330 :                              CPU     8080
     452/    330 :                      
     453/    330 : 333 105              AKI1.75 IN      AP.LSR          ; SEE IF UART CAN TAKE A CHARACTER TO OUTPUT
     454/    332 : 346 040                      ANI     AB.THRE
     455/    334 :                              CPU     Z80
     456/    334 : 050 372                      JR      Z,AKI1.75
     457/    336 :                              CPU     8080
     458/    336 :                      
     459/    336 : 076 023                      MVI     A,XOFF          ; ELSE, SEND CTL-S
     460/    340 : 323 100                      OUT     AP.THR
     461/    342 : 072 311 100                  LDA     MODEI           ; GET MODE FLAGS
     462/    345 : 366 020                      ORI     MI.XOFF         ; SET XOFF SENT
     463/    347 : 062 311 100                  STA     MODEI
     464/    352 :                      
     465/    352 : 172                  AKI1.8  MOV     A,D             ; GET INPUT CHARACTER
     466/    353 : 315 251 013                  CALL    PCIF            ; ELSE, PUT CHARACTER IN INPUT FIFO
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 9 - 2024-05-01 01:09:39 PM


     467/    356 :                              CPU     Z80
     468/    356 : 070 131                      JR      C,AKI5          ; IF FIFO IS FULL, TOSS CHARACTER AND DING BELL
     469/    360 : 030 131                      JR      AKI6            ; IF FIFO NOT FULL, EXIT WITHOUT WELL
     470/    362 :                              CPU     8080
     471/    362 :                      
     472/    362 : 376 002              AKI2    CPI     AB.TREI         ; SEE IF INTERRUPT WAS FROM XMIT BUFFER EMPTY
     473/    364 :                              CPU     Z80
     474/    364 : 040 025                      JR      NZ,AKI4         ; IF NOT FROM ACE TRANSMITTER
     475/    366 :                      
     476/    366 :                      ;       INTERRUPT CAUSED BY ACE TRANSMITTER HOLDING REGISTER EMPTY
     477/    366 :                      ;
     478/    366 : 313 131                      BIT     IB.ONLN,C       ; SEE IF ON-LINE
     479/    370 : 050 011                      JR      Z,AKI3          ; IF OFF-LINE, DON'T OUTPUT CHARACTER
     480/    372 :                              CPU     8080
     481/    372 :                      
     482/    372 : 315 032 012                  CALL    FCOD            ; ELSE, FETCH A CHARACTER FROM THE OUTPUT FIFO
     483/    375 :                              CPU     Z80
     484/    375 : 070 004                      JR      C,AKI3          ; IF NO CHARACTER IN FIFO
     485/    377 :                              CPU     8080
     486/    377 :                      
     487/    377 : 323 100                      OUT     AP.THR          ; OUTPUT CHARACTER TO ACE
     488/  1.001 :                              CPU     Z80
     489/  1.001 : 030 110                      JR      AKI6            ; EXIT
     490/  1.003 :                              CPU     8080
     491/  1.003 :                      
     492/  1.003 : 333 101              AKI3    IN      AP.IER          ; INPUT ACE INTERRUPT ENABLE REGISTER
     493/  1.005 : 346 375                      ANI     377Q-AB.ETRE    ; CLEAR TRANSMITTER REGISTER EMPTY INTERRUPT
     494/  1.007 : 323 101                      OUT     AP.IER
     495/  1.011 :                              CPU     Z80
     496/  1.011 : 030 100                      JR      AKI6            ; EXIT
     497/  1.013 :                              CPU     8080
     498/  1.013 :                      
     499/  1.013 : 333 240              AKI4    IN      KP.2            ; READ SECOND KEYBOARD PORT
     500/  1.015 : 356 366                      XRI     11110110B       ; INVERT SWITCHES (EXCEPT OFF-LINE)
     501/  1.017 : 107                          MOV     B,A             ; SAVE INPUT
     502/  1.020 : 346 200                      ANI     KB.STB          ; IS A KEYBOARD STROBE PRESENT?
     503/  1.022 :                              CPU     Z80
     504/  1.022 : 050 067                      JR      Z,AKI6          ; IF NO STROBE
     505/  1.024 :                              CPU     8080
     506/  1.024 :                      
     507/  1.024 :                      ;       INTERRUPT CAUSED BY A KEY STRIKE ON THE KEYBOARD
     508/  1.024 :                      ;
     509/  1.024 : 333 200                      IN      KP.1            ; INPUT KEY VALUE
     510/  1.026 : 107                          MOV     B,A
     511/  1.027 : 333 240                      IN      KP.2            ; INPUT SECOND PORT
     512/  1.031 : 356 366                      XRI     11110110B       ; INVERT SWITCHES (EXCEPT OFF LINE)
     513/  1.033 : 117                          MOV     C,A
     514/  1.034 :                      
     515/  1.034 :                      ;       SEE IF CHARACTER IS FROM EXTRA KEY #1.  IF SO, INVERT KEYBOARD DISABLE
     516/  1.034 :                      ;
     517/  1.034 : 170                          MOV     A,B             ; GET KEY VALUE
     518/  1.035 : 376 213                      CPI     KB.CTL+KB.EX1   ; MUST BE CTL-EX1
     519/  1.037 : 072 311 100                  LDA     MODEI           ; GET MODE FLAGS
     520/  1.042 :                              CPU     Z80
     521/  1.042 : 040 007                      JR      NZ,AKI4.3       ; IF NOT CONTROL AND EX1
     522/  1.044 :                              CPU     8080
     523/  1.044 :                      
     524/  1.044 : 356 004                      XRI     MI.KID          ; INVERT KEYBOARD DISABLE FLAG
     525/  1.046 : 062 311 100                  STA     MODEI           ; UPDATE FLAGS
     526/  1.051 :                              CPU     Z80
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 10 - 2024-05-01 01:09:39 PM


     527/  1.051 : 030 004                      JR      AKI4.4          ; SEE IF TO TICK-ET
     528/  1.053 :                              CPU     8080
     529/  1.053 :                      
     530/  1.053 :                      ;       SEE IF KEYBOARD IS DISABLED
     531/  1.053 :                      ;
     532/  1.053 : 346 004              AKI4.3  ANI     MI.KID          ; MASK FOR KEYBOARD INPUT DISABLED FLAG
     533/  1.055 :                              CPU     Z80
     534/  1.055 : 040 034                      JR      NZ,AKI6         ; IF DISABLED, EXIT
     535/  1.057 :                              CPU     8080
     536/  1.057 :                      
     537/  1.057 :                      ;       SEE IF TO TICK UPON KEYBOARD INPUT
     538/  1.057 :                      ;
     539/  1.057 : 072 310 100          AKI4.4  LDA     MODEB           ; GET PROPER FLAGS
     540/  1.062 : 346 002                      ANI     MB.NOTK         ; NO TICK?
     541/  1.064 :                              CPU     Z80
     542/  1.064 : 040 002                      JR      NZ,AKI4.8
     543/  1.066 :                              CPU     8080
     544/  1.066 :                      
     545/  1.066 : 323 300                      OUT     MP.TICK         ; TICK TICKER TO INDICATE KEY STRIKE
     546/  1.070 :                      
     547/  1.070 :                      ;       CAN PUT CHARACTER IN FIFO TO BE PROCESSED BY KCE
     548/  1.070 :                      ;
     549/  1.070 : 052 264 100          AKI4.8  LHLD    KBDFP           ; GET KEYBOARD FIFO POINTER
     550/  1.073 : 175                          MOV     A,L             ; GET POINTER LSB
     551/  1.074 : 376 264                      CPI     KBDFMAX&377Q    ; SEE IF ROOM IN FIFO
     552/  1.076 :                              CPU     Z80
     553/  1.076 : 050 011                      JR      Z,AKI5          ; IF NO ROOM, DING BELL
     554/  1.100 :                              CPU     8080
     555/  1.100 :                      
     556/  1.100 : 160                          MOV     M,B             ; PLACE IN FIFO
     557/  1.101 : 043                          INX     H
     558/  1.102 : 161                          MOV     M,C             ; PLACE IN FIFO
     559/  1.103 : 043                          INX     H
     560/  1.104 : 042 264 100                  SHLD    KBDFP           ; UPDATE FIFO POINTER
     561/  1.107 :                              CPU     Z80
     562/  1.107 : 030 002                      JR      AKI6
     563/  1.111 :                              CPU     8080
     564/  1.111 :                      
     565/  1.111 : 323 340              AKI5    OUT     MP.BELL         ; DING THE DANG BELL
     566/  1.113 :                      
     567/  1.113 :                              CPU     Z80
     568/  1.113 : 010                  AKI6    EX      AF,AF'          ; EXCHANGE ALL REGISTERS
     569/  1.114 : 331                          EXX
     570/  1.115 :                              CPU     8080
     571/  1.115 : 373                          EI                      ; ENABLE NEW INTERRUPTS
     572/  1.116 : 311                          RET
     573/  1.117 :                      
     574/  1.117 :                      ;;;     KCE - KEYBOARD CHARACTER ENCODER
     575/  1.117 :                      ;
     576/  1.117 :                      ;       *KCE* IS RESPONSIBLE FOR TAKING THE VALUE SUPPLIED BY THE HARDWARE
     577/  1.117 :                      ;       KEYBOARD ENCODER AND DETERMINING IF THE VALUE IS A LEGITIMATE ASCII
     578/  1.117 :                      ;       VALUE.  IF THE VALUE DOES NOT REPRESENT THE ACTUAL ASCII VALUE FOR
     579/  1.117 :                      ;       THE KEY STRUCK, *KCE* FORMS THE CORRECT VALUE.
     580/  1.117 :                      ;
     581/  1.117 :                      ;       THE HARDWARE ENCODER ALSO SIGNALS WHETHER THE 'CONTROL' OR 'SHIFT'
     582/  1.117 :                      ;       KEY WAS PRESSED.  IF THE HARDWARE ENCODER DOES NOT REFLECT THE
     583/  1.117 :                      ;       CONTROL OR SHIFT VALUE FOR THE KEY, *KCE* SETS THE CORRECT VALUE
     584/  1.117 :                      ;       PRIOR TO EXITING.
     585/  1.117 :                      ;
     586/  1.117 :                      ;       *KCE* ALSO PLACES THE ENCODED ASCII VALUE OF THE KEY INTO EITHER
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 11 - 2024-05-01 01:09:39 PM


     587/  1.117 :                      ;       THE INPUT OR OUTPUT FIFO.  IF THE KEY STRUCK IS A FUNCTION KEY
     588/  1.117 :                      ;       RATHER THAN AN ALPHABETICAL OR NUMERICAL KEY AND THE CONTROL KEY
     589/  1.117 :                      ;       WAS ALSO STRUCK, THE ENCODED VALUE IS PLACED IN THE INPUT FIFO.
     590/  1.117 :                      ;       ALL OTHER VALUES ARE PLACED IN THE OUTPUT FIFO.
     591/  1.117 :                      ;
     592/  1.117 :                      ;
     593/  1.117 :                      ;       ENTRY   (D,E) = VALUE OF KEY SUPPLIED BY THE HARDWARE ENCODER
     594/  1.117 :                      ;       EXIT    NONE
     595/  1.117 :                      ;       USES    A,B,C,D,E,H,L
     596/  1.117 :                      
     597/  1.117 : 172                  KCE     MOV     A,D             ; PLACE KEY VALUE IN ACC
     598/  1.120 : 346 177                      ANI     01111111B       ; MASK OFF ANY CONTROL BIT
     599/  1.122 :                      
     600/  1.122 :                      ;       ENCODE KEY VALUES 000Q THROUGH 017Q AND 033Q
     601/  1.122 :                      ;
     602/  1.122 : 376 033                      CPI     033Q            ; CHECK FOR 'ESC' KEY
     603/  1.124 :                              CPU     Z80
     604/  1.124 : 050 151                      JR      Z,KCE3          ; IF KEY WAS THE 'ESC' KEY
     605/  1.126 :                              CPU     8080
     606/  1.126 :                      
     607/  1.126 : 376 020                      CPI     020Q            ; KEY < 020Q ?
     608/  1.130 : 322 344 001                  JNC     KCE6            ; IF KEY > 017Q
     609/  1.133 :                      
     610/  1.133 : 325                  KCE1    PUSH    D               ; SAVE KEYBOARD VALUES
     611/  1.134 : 041 350 002                  LXI     H,KAE1          ; POINT TO ASCII EQUIV.  TABLE #1
     612/  1.137 : 026 011                      MVI     D,KAE1L         ; (D) = LENGTH OF TABLE
     613/  1.141 : 036 002                      MVI     E,KAE1W         ; (E) = WIDTH OF TABLE IN BYTES
     614/  1.143 : 315 363 015                  CALL    STAB            ; SEARCH TABLE
     615/  1.146 : 321                          POP     D               ; (D,E) = KEYBOARD VALUES
     616/  1.147 :                              CPU     Z80
     617/  1.147 : 070 047                      JR      C,KCE1.5        ; IF NOT ENTRY WAS FOUND
     618/  1.151 :                              CPU     8080
     619/  1.151 :                      
     620/  1.151 : 376 312                      CPI     ESCF+'J'        ; WAS IT THE ERASE KEY?
     621/  1.153 :                              CPU     Z80
     622/  1.153 : 040 051                      JR      NZ,KCE2         ; IF NOT
     623/  1.155 :                      
     624/  1.155 : 313 103                      BIT     IB.KSB,E        ; ELSE, SEE IF SHIFT KEY ALSO
     625/  1.157 : 050 045                      JR      Z,KCE2          ; IF NOT SHIFT KEY, JUST SEND AN ERM
     626/  1.161 :                              CPU     8080
     627/  1.161 :                      
     628/  1.161 : 072 310 100                  LDA     MODEB           ; GET MODE FLAGS
     629/  1.164 : 346 040                      ANI     MB.ANSI         ; IN ANSI MODE?
     630/  1.166 :                              CPU     Z80
     631/  1.166 : 050 024                      JR      Z,KCE1.4        ; IF NOT IN ANSI MODE
     632/  1.170 :                      
     633/  1.170 : 313 172                      BIT     IB.KCB,D        ; SEE IF CONTROL KEY WAS DOWN
     634/  1.172 : 050 010                      JR      Z,KCE1.2        ; IF NO CONTROL KEY
     635/  1.174 :                              CPU     8080
     636/  1.174 :                      
     637/  1.174 : 315 051 015                  CALL    PSIF            ; CONTROL DOWN, PUT STRING IN INPUT FIFO
     638/  1.177 : 033 133 062 312              DB      ESC,'[','2','J'+200Q
     639/  1.203 : 311                          RET
     640/  1.204 :                      
     641/  1.204 : 315 100 015          KCE1.2  CALL    PSOF            ; NO CONTROL, PUT STRING IN OUTPUT FIFO
     642/  1.207 : 033 133 062 312              DB      ESC,'[','2','J'+200Q
     643/  1.213 : 311                          RET
     644/  1.214 :                      
     645/  1.214 : 076 305              KCE1.4  MVI     A,ESCF+'E'      ; ELSE SEND A CLR
     646/  1.216 :                              CPU     Z80
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 12 - 2024-05-01 01:09:39 PM


     647/  1.216 : 030 006                      JR      KCE2
     648/  1.220 :                              CPU     8080
     649/  1.220 :                      
     650/  1.220 : 172                  KCE1.5  MOV     A,D             ; ELSE, PLACE ORIGINAL VALUE BACK IN ACC
     651/  1.221 : 346 177                      ANI     377Q-KB.CTL     ; NO CONTROL = INPUT FIFO ON CONTROL CODES HERE
     652/  1.223 : 127                          MOV     D,A             ; UPDATE (D)
     653/  1.224 :                              CPU     Z80
     654/  1.224 : 030 051                      JR      KCE3            ; GO PLACE ASCII VALUE IN APPROPRIATE FIFO
     655/  1.226 :                      
     656/  1.226 :                      ;       PLACE ASCII VALUE(S) IN THE APPROPRIATE FIFO
     657/  1.226 :                      ;       IF BIT 7 IS SET IN VALUE, FIRST PLACE AN 'ESC' FOLLOWED BY THE SEVEN LSB
     658/  1.226 :                      ;
     659/  1.226 : 313 177              KCE2    BIT     IB.ESCF,A       ; SEE IF 'ESC' TO BE SENT BEFORE ALPHA CHARACTER
     660/  1.230 : 050 045                      JR      Z,KCE3          ; IF NO 'ESC' IS TO BE SENT
     661/  1.232 :                      
     662/  1.232 :                              CPU     8080
     663/  1.232 : 346 177                      ANI     377Q-ESCF       ; REMOVE ESCAPE FLAG
     664/  1.234 : 365                          PUSH    PSW             ; ELSE, SAVE VALUE FROM TABLE
     665/  1.235 : 076 033                      MVI     A,ESC           ; SET (A) = 'ESC'
     666/  1.237 :                      
     667/  1.237 :                      ;       CHECK FOR 'CONTROL' KEY.  IF STRUCK, PLACE CHARACTERS IN INPUT FIFO
     668/  1.237 :                      ;
     669/  1.237 :                              CPU     Z80
     670/  1.237 : 313 172                      BIT     IB.KCB,D        ; SEE IF CONTROL KEY WAS STRUCK ON KEYBOARD
     671/  1.241 : 050 046                      JR      Z,KCE4          ; IF CONTROL KEY NOT STRUCK
     672/  1.243 :                              CPU     8080
     673/  1.243 :                      
     674/  1.243 : 363                          DI                      ; LOCK OUT OTHER INPUTS (*AKI*)
     675/  1.244 : 315 251 013                  CALL    PCIF            ; PUT CHARACTER IN FIFO
     676/  1.247 : 373                          EI                      ; ALLOW OTHER INPUTS FROM *AKI*
     677/  1.250 : 072 310 100                  LDA     MODEB           ; GET MODE FLAGS
     678/  1.253 : 346 040                      ANI     MB.ANSI         ; SEE IF IN ANSI MODE
     679/  1.255 :                              CPU     Z80
     680/  1.255 : 050 017                      JR      Z,KCE2.7        ; IF HEATH MODE IS SELECTED
     681/  1.257 :                              CPU     8080
     682/  1.257 :                      
     683/  1.257 : 361                          POP     PSW             ; GET CHARACTER
     684/  1.260 : 365                          PUSH    PSW
     685/  1.261 : 376 120                      CPI     'P'             ; SEE IF CHAR < P
     686/  1.263 : 076 133                      MVI     A,'['           ; IF < P, OUTPUT A '['
     687/  1.265 :                              CPU     Z80
     688/  1.265 : 070 002                      JR      C,KCE2.3
     689/  1.267 :                              CPU     8080
     690/  1.267 :                      
     691/  1.267 : 076 117                      MVI     A,'O'           ; ELSE, OUTPUT AN 'O'
     692/  1.271 : 363                  KCE2.3  DI
     693/  1.272 : 315 251 013                  CALL    PCIF
     694/  1.275 : 373                          EI
     695/  1.276 : 361                  KCE2.7  POP     PSW             ; GET ASCII VALUE
     696/  1.277 :                              CPU     Z80
     697/  1.277 : 313 172              KCE3    BIT     IB.KCB,D        ; TEST CONTROL KEY FOR PLACEMENT OF THIS CHARACTER
     698/  1.301 : 050 036                      JR      Z,KCE5          ; IF CONTROL KEY NOT STRUCK
     699/  1.303 :                              CPU     8080
     700/  1.303 :                      
     701/  1.303 : 363                          DI                      ; LOCK OUT OTHER INPUTS
     702/  1.304 : 315 251 013                  CALL    PCIF            ; PLACE CHARACTER IN INPUT FIFO
     703/  1.307 : 373                          EI                      ; ALLOW *AKI* INPUTS
     704/  1.310 : 311                          RET
     705/  1.311 :                      
     706/  1.311 : 315 375 013          KCE4    CALL    PCOFT           ; PLACE CHARACTER IN OUTPUT FIFO
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 13 - 2024-05-01 01:09:39 PM


     707/  1.314 : 072 310 100                  LDA     MODEB           ; GET MODE FLAGS
     708/  1.317 : 346 040                      ANI     MB.ANSI         ; SEE IF IN ANSI MODE
     709/  1.321 :                              CPU     Z80
     710/  1.321 : 050 015                      JR      Z,KCE4.7        ; IF IN HEATH MODE
     711/  1.323 :                              CPU     8080
     712/  1.323 :                      
     713/  1.323 : 361                          POP     PSW             ; GET CHARACTER
     714/  1.324 : 365                          PUSH    PSW
     715/  1.325 : 376 120                      CPI     'P'             ; SEE IF < 'P'
     716/  1.327 : 076 133                      MVI     A,'['           ; IF < P, OUTPUT A'['
     717/  1.331 :                              CPU     Z80
     718/  1.331 : 070 002                      JR      C,KCE4.3        ; IF < P
     719/  1.333 :                              CPU     8080
     720/  1.333 :                      
     721/  1.333 : 076 117                      MVI     A,'O'           ; ELSE, OUTPUT AN 'O'
     722/  1.335 : 315 375 013          KCE4.3  CALL    PCOFT
     723/  1.340 :                      
     724/  1.340 : 361                  KCE4.7  POP     PSW             ; GET ASCII CHARACTER
     725/  1.341 : 303 375 013          KCE5    JMP     PCOFT           ; PLACE CHARACTER IN OUTPUT FIFO
     726/  1.344 :                      
     727/  1.344 :                      ;       ENCODE KEY VALUES 020Q THRU 034Q (EXCEPT 033Q)
     728/  1.344 :                      ;       THESE VALUES ARE FROM THE 12 KEY NUMERIC PAD
     729/  1.344 :                      ;
     730/  1.344 : 376 035              KCE6    CPI     035Q            ; KEY < 35Q ?
     731/  1.346 : 322 246 002                  JNC     KCE12           ; IF KEY > 34Q
     732/  1.351 :                      
     733/  1.351 : 325                          PUSH    D               ; SAVE KEYBOARD VALUES
     734/  1.352 : 041 372 002                  LXI     H,KAE2          ; POINT TO SECOND ASCII EQUIVALENCE TABLE
     735/  1.355 : 026 014                      MVI     D,KAE2L         ; GET TABLE LENGTH
     736/  1.357 : 036 005                      MVI     E,KAE2W         ; GET TABLE WIDTH
     737/  1.361 : 315 363 015                  CALL    STAB            ; SEARCH TABLE
     738/  1.364 : 321                          POP     D               ; (D,E) = KEYBOARD VALUES
     739/  1.365 :                      
     740/  1.365 :                      ;       CHECK FOR SHIFT KEY AND/OR KEYPAD SHIFT MODE
     741/  1.365 :                      ;
     742/  1.365 :                              CPU     Z80
     743/  1.365 : 313 103                      BIT     IB.KSB,E        ; SHIFT KEY DOWN?
     744/  1.367 :                              CPU     8080
     745/  1.367 : 072 310 100                  LDA     MODEB           ; GET MODE FLAGS
     746/  1.372 :                              CPU     Z80
     747/  1.372 : 050 006                      JR      Z,KCE7          ; IF NO SHIFT KEY
     748/  1.374 :                      
     749/  1.374 : 313 167                      BIT     IB.KPDS,A       ; TEST FOR KEYPAD SHIFT MODE
     750/  1.376 : 040 007                      JR      NZ,KCE9         ; IF SHIFT KEY & SHIFT MODE, DON'T SHIFT!
     751/  2.000 : 030 004                      JR      KCE8            ; ELSE SHIFT KEY & NO SHIFT MODE, SO SHIFT
     752/  2.002 :                      
     753/  2.002 : 313 167              KCE7    BIT     IB.KPDS,A       ; TEST FOR KEYPAD SHIFT MODE
     754/  2.004 : 050 001                      JR      Z,KCE9          ; NO SHIFT KEY & NO SHIFT MODE
     755/  2.006 :                              CPU     8080
     756/  2.006 :                      
     757/  2.006 : 043                  KCE8    INX     H               ; POINT TO SHIFTED BYTE IN TABLE
     758/  2.007 :                      
     759/  2.007 : 346 200              KCE9    ANI     MB.KPDA         ; TEST FOR KEYPAD IN ALTERNATE MODE
     760/  2.011 :                              CPU     Z80
     761/  2.011 : 050 002                      JR      Z,KCE10         ; IF NOT IN ALT MODE
     762/  2.013 :                              CPU     8080
     763/  2.013 :                      
     764/  2.013 : 043                          INX     H               ; ELSE, POINT TO ALT MODE BYTE
     765/  2.014 : 043                          INX     H
     766/  2.015 : 257                  KCE10   XRA     A               ; CLEAR ACC AND GET BYTE FROM TABLE (SET FLAGS)
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 14 - 2024-05-01 01:09:39 PM


     767/  2.016 : 206                          ADD     M
     768/  2.017 : 362 277 001                  JP      KCE3            ; IF NOT AN ESC FUNCTION, GO PUT IN FIFO
     769/  2.022 :                              CPU     8080
     770/  2.022 :                      
     771/  2.022 : 376 315                      CPI     ESCF+'M'        ; CHECK FOR ESC-M (COULD BE ESC-M OR ESC-?-M)
     772/  2.024 :                              CPU     Z80
     773/  2.024 : 050 155                      JR      Z,KCE10.5
     774/  2.026 :                              CPU     8080
     775/  2.026 :                      
     776/  2.026 : 376 340                      CPI     11100000B       ; CHECK FOR LOWER CASE WITH 'ESC' (ALT MODE CHAR)
     777/  2.030 :                              CPU     Z80
     778/  2.030 : 060 162                      JR      NC,KCE11        ; IF NOT A CURSOR FUNCTION
     779/  2.032 :                              CPU     8080
     780/  2.032 :                      
     781/  2.032 : 376 316                      CPI     ESCF+'N'        ; SEE IF DELETE CHARACTER
     782/  2.034 :                              CPU     Z80
     783/  2.034 : 040 033                      JR      NZ,KE10.07      ; IF NOT THE DC KEY
     784/  2.036 :                              CPU     8080
     785/  2.036 :                      
     786/  2.036 : 107                          MOV     B,A             ; ELSE, SAVE CHARACTER
     787/  2.037 : 072 310 100                  LDA     MODEB           ; GET MODE FLAGS
     788/  2.042 : 346 040                      ANI     MB.ANSI         ; SEE IF IN ANSI MODE
     789/  2.044 : 170                          MOV     A,B             ; (A) = CHARACTER
     790/  2.045 :                              CPU     Z80
     791/  2.045 : 050 022                      JR      Z,KE10.07       ; IF NOT IN ANSI MODE
     792/  2.047 :                      
     793/  2.047 : 313 172                      BIT     IB.KCB,D        ; SEE IF CONTROL KEY PRESSED
     794/  2.051 : 050 007                      JR      Z,KE10.03       ; IF NO CONTROL KEY
     795/  2.053 :                              CPU     8080
     796/  2.053 :                      
     797/  2.053 : 315 051 015                  CALL    PSIF            ; ELSE, PUT IN INPUT FIFO
     798/  2.056 : 033 133 320                  DB      ESC,'[','P'+200Q
     799/  2.061 : 311                          RET
     800/  2.062 :                      
     801/  2.062 : 315 100 015          KE10.03 CALL    PSOF            ; PUT STRING IN OUTPUT BUFFER
     802/  2.065 : 033 133 320                  DB      ESC,'[','P'+200Q
     803/  2.070 : 311                          RET
     804/  2.071 :                      
     805/  2.071 : 376 300              KE10.07 CPI     ESCF+'@'        ; CHECK FOR INSERT CHARACTER CODE
     806/  2.073 : 302 226 001                  JNZ     KCE2            ; IF NOT INSERT CHARACTER KEY
     807/  2.076 :                      
     808/  2.076 : 072 310 100                  LDA     MODEB           ; GET MODE FLAGS
     809/  2.101 : 346 040                      ANI     MB.ANSI         ; SEE IF IN ANSI MODE
     810/  2.103 :                              CPU     Z80
     811/  2.103 : 050 057                      JR      Z,KCE10.4       ; IF IN HEATH MODE
     812/  2.105 :                              CPU     8080
     813/  2.105 :                      
     814/  2.105 : 072 307 100                  LDA     MODEA           ; ELSE GET MODEA FLAGS
     815/  2.110 : 346 100                      ANI     MA.ICM          ; SEE IF IN ICM
     816/  2.112 :                              CPU     Z80
     817/  2.112 : 050 024                      JR      Z,KCE10.2       ; IF NOT ALREADY IN INSERT MODE
     818/  2.114 :                      
     819/  2.114 : 313 172                      BIT     IB.KCB,D        ; SEE IF CONTROL KEY WAS DOWN
     820/  2.116 : 050 010                      JR      Z,KCE10.1       ; IF NOT CONTROL KEY
     821/  2.120 :                              CPU     8080
     822/  2.120 :                      
     823/  2.120 : 315 051 015                  CALL    PSIF            ; ELSE PUT STRING IN INPUT FIFO
     824/  2.123 : 033 133 064 354              DB      ESC,'[','4','l'+200Q
     825/  2.127 : 311                          RET
     826/  2.130 :                      
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 15 - 2024-05-01 01:09:39 PM


     827/  2.130 : 315 100 015          KCE10.1 CALL    PSOF            ; PUT STRING IN OUTPUT FIFO
     828/  2.133 : 033 133 064 354              DB      ESC,'[','4','l'+200Q
     829/  2.137 : 311                          RET
     830/  2.140 :                      
     831/  2.140 :                              CPU     Z80
     832/  2.140 : 313 172              KCE10.2 BIT     IB.KCB,D        ; CHECK FOR CONTROL KEY
     833/  2.142 : 050 010                      JR      Z,KCE10.3       ; IF NO CONTROL KEY
     834/  2.144 :                              CPU     8080
     835/  2.144 :                      
     836/  2.144 : 315 051 015                  CALL    PSIF            ; ELSE PUT STRING IN INPUT FIFO
     837/  2.147 : 033 133 064 350              DB      ESC,'[','4','h'+200Q
     838/  2.153 : 311                          RET
     839/  2.154 :                      
     840/  2.154 : 315 100 015          KCE10.3 CALL    PSOF            ; PUT STRING IN OUTPUT FIFO
     841/  2.157 : 033 133 064 350              DB      ESC,'[','4','h'+200Q
     842/  2.163 : 311                          RET
     843/  2.164 :                      
     844/  2.164 : 072 307 100          KCE10.4 LDA     MODEA           ; GET MODE FLAGS
     845/  2.167 : 346 100                      ANI     MA.ICM          ; SEE IF ALREADY IN INSERT MODE
     846/  2.171 : 076 300                      MVI     A,EICSEQ+ESCF   ; ENTER INSERT MODE
     847/  2.173 : 312 226 001                  JZ      KCE2            ; IF NOT ALREADY IN INSERT MODE
     848/  2.176 :                      
     849/  2.176 : 076 317                      MVI     A,XICSEQ+ESCF   ; ELSE, EXIT INSERT MODE
     850/  2.200 : 303 226 001                  JMP     KCE2
     851/  2.203 :                      
     852/  2.203 : 172                  KCE10.5 MOV     A,D             ; WAS 'M', SEE IF FROM THE 3 KEY (DELETE LINE)
     853/  2.204 : 346 177                      ANI     01111111B       ; TOSS CONTROL BIT
     854/  2.206 : 376 023                      CPI     023Q            ; 3 KEY?
     855/  2.210 : 176                          MOV     A,M             ; REPLACE TABLE VALUE IN A
     856/  2.211 : 312 226 001                  JZ      KCE2            ; IF FROM 3 KEY GO PLACE 'ESC','M' IN FIFO
     857/  2.214 :                      
     858/  2.214 :                      ;       HAVE A 'KEYPAD ALTERNATE MODE' CHARACTER
     859/  2.214 :                      ;       PLACE AN 'ESC' A '?' (OR '0' IF IN ANSI MODE) AND 7 LSB
     860/  2.214 :                      ;       FROM TABLE IN FIFO
     861/  2.214 :                      ;
     862/  2.214 : 365                  KCE11   PUSH    PSW             ; SAVE TABLE CHARACTER
     863/  2.215 : 076 033                      MVI     A,ESC           ; PLACE 'ESC' IN FIFO
     864/  2.217 : 315 375 013                  CALL    PCOFT
     865/  2.222 : 072 310 100                  LDA     MODEB           ; GET MODE FLAGS
     866/  2.225 : 346 040                      ANI     MB.ANSI         ; IN ANSI MODE?
     867/  2.227 : 076 077                      MVI     A,'?'           ; FOR HEATH
     868/  2.231 :                              CPU     Z80
     869/  2.231 : 050 002                      JR      Z,KCE11.5       ; IF IN HEATH MODE
     870/  2.233 :                              CPU     8080
     871/  2.233 :                      
     872/  2.233 : 076 117                      MVI     A,'O'           ; FOR ANSI
     873/  2.235 : 315 375 013          KCE11.5 CALL    PCOFT           ; PLACE IN FIFO
     874/  2.240 : 361                          POP     PSW             ; GET TABLE VALUE BACK
     875/  2.241 : 346 177                      ANI     01111111B       ; TOSS ESC BIT
     876/  2.243 : 303 375 013                  JMP     PCOFT           ; PLACE LAST CHARACTER IN FIFO
     877/  2.246 :                      
     878/  2.246 :                      ;       ENCODE KEY VALUES FOR THE SCROLL KEY (037Q)
     879/  2.246 :                      ;
     880/  2.246 : 376 037              KCE12   CPI     037Q            ; WAS IT THE SCROLL KEY?
     881/  2.250 :                              CPU     Z80
     882/  2.250 : 040 014                      JR      NZ,KCE13        ; IF NOT THE SCROLL KEY
     883/  2.252 :                              CPU     8080
     884/  2.252 :                      
     885/  2.252 : 041 313 100                  LXI     H,HSMLC         ; ELSE, POINT TO THE HSM LINE COUNTER
     886/  2.255 :                              CPU     Z80
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 16 - 2024-05-01 01:09:39 PM


     887/  2.255 : 313 103                      BIT     IB.KSB,E        ; SEE IF SHIFTED SCROLL
     888/  2.257 : 040 002                      JR      NZ,KCE12.5      ; IF SHIFTED
     889/  2.261 :                              CPU     8080
     890/  2.261 : 064                          INR     M               ; INCREMENT LINE COUNTER FOR ONE MORE LINE
     891/  2.262 : 311                          RET                     ; EXIT
     892/  2.263 :                      
     893/  2.263 : 066 030              KCE12.5 MVI     M,24            ; SET LINE COUNTER TO 24 LINES
     894/  2.265 : 311                          RET                     ; EXIT
     895/  2.266 :                      
     896/  2.266 :                      ;       AT LAST! SIMPLE ASCII KEYS!!!
     897/  2.266 :                      ;       ENCODE KEY VALUES FOR 040Q THROUGH 177Q
     898/  2.266 :                      ;
     899/  2.266 :                              CPU     Z80
     900/  2.266 : 313 103              KCE13   BIT     IB.KSB,E        ; SHIFT KEY STRUCK?
     901/  2.270 : 050 014                      JR      Z,KCE13.5       ; IF NO SHIFT
     902/  2.272 :                              CPU     8080
     903/  2.272 :                      
     904/  2.272 : 325                          PUSH    D               ; SAVE KEYBOARD VALUES
     905/  2.273 : 041 066 003                  LXI     H,KAE3          ; ELSE POINT TO EQUIV TABLE #3 FOR SPEC SHIFTS
     906/  2.276 : 026 015                      MVI     D,KAE3L         ; SET TABLE LENGTH
     907/  2.300 : 036 002                      MVI     E,KAE3W         ; SET TABLE WIDTH
     908/  2.302 : 315 363 015                  CALL    STAB            ; SEARCH TABLE
     909/  2.305 : 321                          POP     D               ; (D,E) = KEYWORD VALUES
     910/  2.306 :                      
     911/  2.306 :                              CPU     Z80
     912/  2.306 : 313 113              KCE13.5 BIT     IB.CPLK,E       ; TEST FOR 'CAPS LOCK' ON
     913/  2.310 : 050 012                      JR      Z,KCE14         ; IF CAPS LOCK NOT ON
     914/  2.312 :                              CPU     8080
     915/  2.312 :                      
     916/  2.312 : 376 141                      CPI     'a'             ; TEST FOR < LOWER CASE A
     917/  2.314 :                              CPU     Z80
     918/  2.314 : 070 006                      JR      C,KCE14         ; IF LESS THAN A LOWER CASE CHARACTER
     919/  2.316 :                              CPU     8080
     920/  2.316 :                      
     921/  2.316 : 376 173                      CPI     '{'             ; TEST FOR < LEFT BRACE
     922/  2.320 :                              CPU     Z80
     923/  2.320 : 060 002                      JR      NC,KCE14        ; IF GREATER THAN A LOWER CASE CHARACTER
     924/  2.322 :                              CPU     8080
     925/  2.322 :                      
     926/  2.322 : 346 337                      ANI     11011111B       ; IS LOWER CASE, MAKE IT UPPER CASE
     927/  2.324 :                      
     928/  2.324 :                              CPU     Z80
     929/  2.324 : 313 172              KCE14   BIT     IB.KCB,D        ; TEST FOR CONTROL KEY
     930/  2.326 :                              CPU     8080
     931/  2.326 : 312 375 013                  JZ      PCOFT           ; IF CONTROL NOT STRUCK
     932/  2.331 :                      
     933/  2.331 : 376 100                      CPI     '@'             ; NO CONTROL IF < 100Q
     934/  2.333 : 332 375 013                  JC      PCOFT           ; IF < 100Q
     935/  2.336 :                      
     936/  2.336 : 376 173                      CPI     '{'             ; NO CONTROL CODES IF > 172Q
     937/  2.340 : 322 375 013                  JNC     PCOFT           ; IF > 172Q
     938/  2.343 :                      
     939/  2.343 : 346 037                      ANI     00011111B       ; ELSE FORM CONTROL CODE
     940/  2.345 : 303 375 013                  JMP     PCOFT           ; GOT PLACE CODE IN FIFO
     941/  2.350 :                      
     942/  2.350 :                      ;;      KEYBOARD TO ASCII EQUIVALENCE TABLES
     943/  2.350 :                      ;
     944/  2.350 :                      
     945/  2.350 :                      ;       *KAE1* IS A LOOK UP TABLE FOR FUNCTION KEY VALUES
     946/  2.350 :                      ;
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 17 - 2024-05-01 01:09:39 PM


     947/  2.350 :                      ;       TABLE ENTRIES ARE: KEY VALUE FOLLOWED BY ASCII VALUE. *ESCF* IS USED
     948/  2.350 :                      ;       TO SIGNAL THAT AN ESCAPE CODE IS TO PRECEDE THE SEVEN BIT ASCII VALUE
     949/  2.350 :                      
     950/  2.350 :                      KAE1
     951/  2.350 : 000 323                      DB      0,ESCF+'S'      ; KEY VALUE 0 = ESC-S
     952/  2.352 : 001 324                      DB      1,ESCF+'T'      ; KEY VALUE 1 = ESC-T
     953/  2.354 : 002 325                      DB      2,ESCF+'U'      ; KEY VALUE 2 = ESC-U
     954/  2.356 : 003 326                      DB      3,ESCF+'V'      ; KEY VALUE 3 = ESC-V
     955/  2.360 : 004 327                      DB      4,ESCF+'W'      ; KEY VALUE 4 = ESC-W
     956/  2.362 : 005 312                      DB      5,ESCF+'J'      ; KEY VALUE 5 = ESC-J
     957/  2.364 : 006 320                      DB      6,ESCF+'P'      ; KEY VALUE 6 = ESC-P
     958/  2.366 : 007 321                      DB      7,ESCF+'Q'      ; KEY VALUE 7 = ESC-Q
     959/  2.370 : 016 322                      DB      16Q,ESCF+'R'    ; KEY VALUE 13Q = ESC-R
     960/  2.372 : =2O                  KAE1W   EQU     2               ; TABLE IS TWO BYTES WIDE
     961/  2.372 : =11O                 KAE1L   EQU     ($-KAE1)/KAE1W
     962/  2.372 :                      
     963/  2.372 :                      ;       KAE2 CONTAINS THE ASCII VALUES FOR THE VARIOUS MODES OF
     964/  2.372 :                      ;       THE 12 KEY NUMERIC KEY PAD.  TABLE ENTRIES ARE: KEY VALUE,
     965/  2.372 :                      ;       UNSHIFTED ASCII, SHIFTED ASCII, KEYPAD ALTERNATE MODE ASCII,
     966/  2.372 :                      ;       AND KEYPAD ALTERNATE MODE SHIFTED ASCII.
     967/  2.372 :                      ;
     968/  2.372 : =2.372O              KAE2    EQU     $     
     969/  2.372 : 020 060 060 360 360          DB      20Q,'0','0',ESCF+'p',ESCF+'p'           ; p = LOWER CASE P
     970/  2.377 : 021 061 314 361 314          DB      21Q,'1',ESCF+'L',ESCF+'q',ESCF+'L'      ; q = LOWER CASE Q
     971/  3.004 : 022 062 302 362 302          DB      22Q,'2',ESCF+'B',ESCF+'r',ESCF+'B'      ; R = LOWER CASE R
     972/  3.011 : 023 063 315 363 315          DB      23Q,'3',ESCF+'M',ESCF+'s',ESCF+'M'      ; S = LOWER CASE S
     973/  3.016 : 024 064 304 364 304          DB      24Q,'4',ESCF+'D',ESCF+'t',ESCF+'D'      ; Y = LOWER CASE T
     974/  3.023 : 025 065 310 365 310          DB      25Q,'5',ESCF+'H',ESCF+'u',ESCF+'H'      ; U = LOWER CASE U
     975/  3.030 : 026 066 303 366 303          DB      26Q,'6',ESCF+'C',ESCF+'v',ESCF+'C'      ; V = LOWER CASE V
     976/  3.035 : 027 067 300 367 300          DB      27Q,'7',ESCF+'@',ESCF+'w',ESCF+'@'      ; W = LOWER CASE W
     977/  3.042 : 030 070 301 370 301          DB      30Q,'8',ESCF+'A',ESCF+'x',ESCF+'A'      ; X = LOWER CASE X
     978/  3.047 : 031 071 316 371 316          DB      31Q,'9',ESCF+'N',ESCF+'y',ESCF+'N'      ; Y = LOWER CASE Y
     979/  3.054 : 032 056 056 356 356          DB      32Q,'.','.',ESCF+'n',ESCF+'n'           ; n = LOWER CASE N
     980/  3.061 : 034 015 015 315 315          DB      34Q,CR,CR,ESCF+'M',ESCF+'M'
     981/  3.066 : =5O                  KAE2W   EQU     5               ; TABLE WIDTH = 5 BYTES
     982/  3.066 : =14O                 KAE2L   EQU     ($-KAE2)/KAE2W
     983/  3.066 :                      
     984/  3.066 :                      ;       *KAE3* CONTAINS SHIFT VALUES FOR KEYS WHERE THE SHIFTED VALUE OF THE
     985/  3.066 :                      ;       KEY CANNOT BE FORMED BY A NORMAL ASCII BIT SHIFT
     986/  3.066 :                      ;
     987/  3.066 :                      ;       TABLE ENTRIES ARE: UNSHIFTED VALUE FOLLOWED BY THE SHIFTED VALUE
     988/  3.066 :                      
     989/  3.066 :                      
     990/  3.066 :                      KAE3
     991/  3.066 : 047 042                      DB      "'",'"'
     992/  3.070 : 055 137                      DB      '-','_'
     993/  3.072 : 060 051                      DB      '0',')'
     994/  3.074 : 062 100                      DB      '2','@'
     995/  3.076 : 066 136                      DB      '6','^'
     996/  3.100 : 067 046                      DB      '7','&'
     997/  3.102 : 070 052                      DB      '8','*'
     998/  3.104 : 071 050                      DB      '9','('
     999/  3.106 : 073 072                      DB      ';',':'
    1000/  3.110 : 075 053                      DB      '=','+'
    1001/  3.112 : 133 135                      DB      '[',']'
    1002/  3.114 : 140 176                      DB      '`','~'
    1003/  3.116 : 173 175                      DB      '{','}'
    1004/  3.120 : =2O                  KAE3W   EQU     2               ; TABLE WIDTH = 2 BITS
    1005/  3.120 : =15O                 KAE3L   EQU     ($-KAE3)/KAE3W
    1006/  3.120 :                      
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 18 - 2024-05-01 01:09:39 PM


    1007/  3.120 :                      ;;;     IFCP - INPUT FIFO CHARACTER PROCESSOR
    1008/  3.120 :                      ;
    1009/  3.120 :                      ;       *IFCP* INTERPRETS THE CHARACTER WHICH HAS BEEN RECEIVED (OR STRUCK
    1010/  3.120 :                      ;       ON THE KEYBOARD IF OFF-LINE OR KEYED AS A LOCAL FUNCTION) TO SEE IF
    1011/  3.120 :                      ;       IT IS THE SECOND CHARACTER OF AN ESCAPE SEQUENCE, A CONTROL CHARACTER
    1012/  3.120 :                      ;       OR A CHARACTER TO BE DISPLAYED.  IF THE CHARACTER IS PART OF AN
    1013/  3.120 :                      ;       ESCAPE SEQUENCE WHICH CANNOT BE FOUND IN *ESCTAB* THE ESCAPE SEQUENCE
    1014/  3.120 :                      ;       FLAG IS CLEARED AND THE CHARACTER IS DISPLAYED.  IF THE CHARACTER IS
    1015/  3.120 :                      ;       A CONTROL CHARACTER, AND CANNOT BE FOUND IN *CTLTAB*, THE CHARACTER IS
    1016/  3.120 :                      ;       DISCARDED.  IF THE CHARACTER IS FOUND IN THE APPROPRIATE TABLE, THE
    1017/  3.120 :                      ;       PROGRAM COUNTER IS SET TO THE ASSOCIATED ADDRESS.
    1018/  3.120 :                      ;
    1019/  3.120 :                      ;
    1020/  3.120 :                      ;       ENTRY   (A) = CHARACTER FROM INPUT FIFO
    1021/  3.120 :                      ;
    1022/  3.120 :                      ;       EXIT    NONE
    1023/  3.120 :                      ;
    1024/  3.120 :                      ;       USES    A,B,C,D,E,H,L,F
    1025/  3.120 :                      
    1026/  3.120 :                      
    1027/  3.120 : 127                  IFCP    MOV     D,A             ; SAVE CHARACTER
    1028/  3.121 : 072 311 100                  LDA     MODEI           ; GET MODE FLAGS
    1029/  3.124 :                              CPU     Z80
    1030/  3.124 : 313 147                      BIT     IB.XOFF,A       ; SEE IF XOFF SENT
    1031/  3.126 : 050 025                      JR      Z,IFCP0.5       ; IF NO XOFF HAS BEEN SENT
    1032/  3.130 :                              CPU     8080
    1033/  3.130 :                      
    1034/  3.130 : 137                          MOV     E,A             ; SAVE MODE FLAGS
    1035/  3.131 : 072 241 100                  LDA     IFC             ; GET INPUT FIFO COUNTER
    1036/  3.134 : 376 140                      CPI     IFMAX-32        ; SEE IF AT LEAST 32 BYTES ARE FREE
    1037/  3.136 : 173                          MOV     A,E             ; GET MODE FLAGS BACK
    1038/  3.137 :                              CPU     Z80
    1039/  3.137 : 060 014                      JR      NC,IFCP0.5      ; IF NOT ENOUGH BYTES OPEN
    1040/  3.141 :                              CPU     8080
    1041/  3.141 :                      
    1042/  3.141 : 346 357                      ANI     255-MI.XOFF     ; RESET XOFF FLAG
    1043/  3.143 : 062 311 100                  STA     MODEI
    1044/  3.146 : 137                          MOV     E,A
    1045/  3.147 : 076 021                      MVI     A,XON           ; SEND XON TO HOST
    1046/  3.151 : 315 375 013                  CALL    PCOFT
    1047/  3.154 : 173                          MOV     A,E             ; GET MODE FLAGS BACK
    1048/  3.155 :                      
    1049/  3.155 :                              CPU     Z80
    1050/  3.155 : 313 107              IFCP0.5 BIT     IB.PWE,A        ; SEE IF PREVIOUS CHARACTER WAS AN ESCAPE CODE
    1051/  3.157 :                              CPU     8080
    1052/  3.157 : 172                          MOV     A,D             ; (A) = CHARACTER
    1053/  3.160 :                              CPU     Z80
    1054/  3.160 : 050 046                      JR      Z,IFCP1         ; IF CHARACTER IS NOT PART OF AN ESCAPE SEQ.
    1055/  3.162 :                              CPU     8080
    1056/  3.162 :                      
    1057/  3.162 :                      ;       CHARACTER IS PART OF AN ESCAPE SEQUENCE
    1058/  3.162 :                      ;
    1059/  3.162 : 072 311 100                  LDA     MODEI           ; GET MODE AGAIN
    1060/  3.165 : 346 376                      ANI     377Q-MI.PWE     ; CLEAR 'PREVIOUS WAS AN ESCAPE' FLAG
    1061/  3.167 : 062 311 100                  STA     MODEI
    1062/  3.172 : 072 310 100                  LDA     MODEB           ; GET MODE B FLAGS
    1063/  3.175 : 346 040                      ANI     MB.ANSI         ; SEE IF IN ANSI MODE
    1064/  3.177 : 172                          MOV     A,D             ; (A) = CHARACTER
    1065/  3.200 :                              CPU     Z80
    1066/  3.200 : 050 011                      JR      Z,IFCP0.7       ; IF NOT IN ANSI MODE
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 19 - 2024-05-01 01:09:39 PM


    1067/  3.202 :                              CPU     8080
    1068/  3.202 :                      
    1069/  3.202 : 041 340 004                  LXI     H,AESCT         ; (H,L) = ANSI ESCAPE TABLE
    1070/  3.205 : 026 004                      MVI     D,AESCTL        ; (D) = TABLE LENGTH
    1071/  3.207 : 036 003                      MVI     E,AESCTW        ; (E) = TABLE WIDTH
    1072/  3.211 :                              CPU     Z80
    1073/  3.211 : 030 007                      JR      IFCP0.9         ; SEARCH TABLE
    1074/  3.213 :                              CPU     8080
    1075/  3.213 :                      
    1076/  3.213 : 041 134 004          IFCP0.7 LXI     H,ESCTAB        ; (H,L) = HEATH ESCAPE SEQUENCE TABLE
    1077/  3.216 : 026 054                      MVI     D,ESCTABL       ; (D) = TABLE LENGTH
    1078/  3.220 : 036 003                      MVI     E,ESCTABW       ; (E) = TABLE WIDTH
    1079/  3.222 :                      
    1080/  3.222 : 315 363 015          IFCP0.9 CALL    STAB            ; SEARCH TABLE
    1081/  3.225 :                              CPU     Z80
    1082/  3.225 : 060 160                      JR      NC,IFCP3        ; IF A MATCH WAS FOUND IN THE TABLE
    1083/  3.227 :                              CPU     8080
    1084/  3.227 :                      
    1085/  3.227 : 311                          RET                     ; ELSE, FORGET ABOUT THIS CHARACTER AND EXIT
    1086/  3.230 :                      
    1087/  3.230 : 376 012              IFCP1   CPI     LF              ; IS CHARACTER A LINE FEED?
    1088/  3.232 :                              CPU     Z80
    1089/  3.232 : 040 130                      JR      NZ,IFCP1.9      ; IF NOT A LINE FEED
    1090/  3.234 :                              CPU     8080
    1091/  3.234 :                      
    1092/  3.234 :                      ;       CHARACTER IS A LINE FEED,  CHECK FOR HOLD SCREEN MODE
    1093/  3.234 :                      ;
    1094/  3.234 : 072 307 100                  LDA     MODEA           ; GET MODEA FLAGS
    1095/  3.237 : 346 001                      ANI     MA.HSM
    1096/  3.241 : 312 112 007                  JZ      PLFCR           ; IF NOT IN HOLD SCREEN MODE, GO DO LINE FEED
    1097/  3.244 :                      
    1098/  3.244 :                      ;       CHARACTER IS A LINE FEED AND TERMINAL IS IN THE HOLD SCREEN MODE.
    1099/  3.244 :                      ;       THE TERMINAL OPERATION WILL NOT CHANGE UNLESS OR UNTIL THE 24TH
    1100/  3.244 :                      ;       LINE IS REACHED.  A 'SCROLL' KEY FROM THE KEYBOARD WILL CAUSE ONE
    1101/  3.244 :                      ;       MORE LINE TO BE DISPLAYED.  A SHIFTED 'SCROLL' KEY WILL CASE 24
    1102/  3.244 :                      ;       LINES TO BE INPUT AND DISPLAYED AND ALL THE CHARACTERS UP TO THE NEXT LINE
    1103/  3.244 :                      ;       FEED WILL BE DISPLAYED.
    1104/  3.244 :                      ;
    1105/  3.244 : 072 273 100                  LDA     CURVP           ; GET VERTICAL POSITION
    1106/  3.247 : 376 027                      CPI     23              ; SEE IF ON LAST LINE
    1107/  3.251 : 302 112 007                  JNZ     PLFCR           ; IF NOT LAST LINE, DON'T HOLD YET
    1108/  3.254 :                      
    1109/  3.254 : 041 313 100                  LXI     H,HSMLC         ; POINT TO HOLD SCREEN MODE LINE COUNTER
    1110/  3.257 : 065                          DCR     M               ; DECREMENT COUNTER
    1111/  3.260 : 302 112 007                  JNZ     PLFCR           ; IF NOT ZERO, DO THIS LF AND WAIT FOR NEXT
    1112/  3.263 :                      
    1113/  3.263 : 076 023                      MVI     A,XOFF          ; SEND CTL-S TO HOST
    1114/  3.265 : 315 375 013                  CALL    PCOFT           ; PLACE IN OUTPUT FIFO
    1115/  3.270 : 315 045 000                  CALL    MAINA           ; TURN ON XMIT INTERRUPT
    1116/  3.273 :                      
    1117/  3.273 : 315 107 012          IFCP1.1 CALL    FVKF            ; GET NEXT VALUE FROM KEYBOARD FIFO
    1118/  3.276 :                              CPU     Z80
    1119/  3.276 : 060 022                      JR      NC,IFCP1.5      ; IF A KEY WAS STRUCK
    1120/  3.300 :                              CPU     8080
    1121/  3.300 :                      
    1122/  3.300 : 315 111 016                  CALL    UCP             ; UPDATE CURSOR
    1123/  3.303 : 072 241 100          IFCP1.3 LDA     IFC             ; SEE IF INPUT FIFO IS FULL
    1124/  3.306 : 376 200                      CPI     IFMAX
    1125/  3.310 :                              CPU     Z80
    1126/  3.310 : 040 361                      JR      NZ,IFCP1.1      ; IF NOT FULL, CHECK ON KEYBOARD AGAIN
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 20 - 2024-05-01 01:09:39 PM


    1127/  3.312 :                              CPU     8080
    1128/  3.312 :                      
    1129/  3.312 : 076 001                      MVI     A,1             ; ELSE SET COUNTER TO INPUT ONE MORE LINE
    1130/  3.314 : 062 313 100                  STA     HSMLC
    1131/  3.317 : 303 112 007                  JMP     PLFCR           ; DO THE LINE FEED AND EMPTY THE FIFO
    1132/  3.322 :                      
    1133/  3.322 : 172                  IFCP1.5 MOV     A,D             ; GET KEY VALUE
    1134/  3.323 : 346 177                      ANI     01111111B       ; TOSS THE CONTROL BIT
    1135/  3.325 : 376 037                      CPI     SCRL            ; WAS KEY THE SCROLL KEY?
    1136/  3.327 :                              CPU     Z80
    1137/  3.327 : 050 010                      JR      Z,IFCP1.7       ; IF SCROLL KEY
    1138/  3.331 :                              CPU     8080
    1139/  3.331 :                      
    1140/  3.331 : 315 117 001                  CALL    KCE             ; ELSE ENCODE THE ASCII VALUE
    1141/  3.334 : 315 045 000                  CALL    MAINA           ; SEE IF THERE IS A CHARACTER TO OUTPUT
    1142/  3.337 :                              CPU     Z80
    1143/  3.337 : 030 342                      JR      IFCP1.3         ; SEE IF KEYSTRIKE FILLED THE INPUT FIFO
    1144/  3.341 :                      
    1145/  3.341 : 313 103              IFCP1.7 BIT     IB.KSB,E        ; SEE IF THIS WAS A SHIFTED SCROLL KEY
    1146/  3.343 :                              CPU     8080
    1147/  3.343 : 076 001                      MVI     A,1             ; SET LINE COUNTER TO ONE
    1148/  3.345 :                              CPU     Z80
    1149/  3.345 : 050 002                      JR      Z,IFCP1.8       ; IF SCROLL KEY WAS NOT SHIFTED
    1150/  3.347 :                              CPU     8080
    1151/  3.347 :                      
    1152/  3.347 : 076 030                      MVI     A,24            ; ELSE, SET LINE COUNTER TO 24
    1153/  3.351 : 062 313 100          IFCP1.8 STA     HSMLC
    1154/  3.354 : 315 112 007                  CALL    PLFCR           ; DO THE LINE FEED
    1155/  3.357 : 076 021                      MVI     A,XON           ; SEND CTL-Q TO HOST FOR SOME CHARACTERS
    1156/  3.361 : 303 375 013                  JMP     PCOFT
    1157/  3.364 :                      
    1158/  3.364 : 376 177              IFCP1.9 CPI     RUBOUT          ; CHECK FOR RUBOUT AND OTHER CONTROL CODES
    1159/  3.366 :                              CPU     Z80
    1160/  3.366 : 050 004                      JR      Z,IFCP2         ; IF RUBOUT, SEE IF THERE IS A HANDLER
    1161/  3.370 :                              CPU     8080
    1162/  3.370 :                      
    1163/  3.370 : 376 040                      CPI     ' '             ; CHECK FOR OTHER CONTROL CODES
    1164/  3.372 :                              CPU     Z80
    1165/  3.372 : 060 026                      JR      NC,IFCP4        ; IF NOT A CONTROL CODE
    1166/  3.374 :                              CPU     8080
    1167/  3.374 :                      
    1168/  3.374 :                      ;       CHARACTER IS A CONTROL CHARACTER
    1169/  3.374 :                      ;
    1170/  3.374 : 041 354 004          IFCP2   LXI     H,CTLTAB        ; (H,L) = CONTROL CHARACTER TABLE
    1171/  3.377 : 026 006                      MVI     D,CTLTABL       ; (B = TABLE LENGTH
    1172/  4.001 : 036 003                      MVI     E,CTLTABW       ; (C) = TABLE WIDTH
    1173/  4.003 : 315 363 015                  CALL    STAB            ; SEARCH TABLE
    1174/  4.006 : 330                          RC                      ; IF NOT IN TABLE, TOSS IT AND EXIT
    1175/  4.007 :                      
    1176/  4.007 :                      ;       CHARACTER FOUND IN TABLE, GO TO ASSOCIATED ADDRESS
    1177/  4.007 :                      ;
    1178/  4.007 : 137                  IFCP3   MOV     E,A             ; (E) = ADDRESS LSB
    1179/  4.010 : 043                          INX     H
    1180/  4.011 : 126                          MOV     D,M             ; (D) = ADDRESS MSB
    1181/  4.012 : 353                          XCHG                    ; (H,L) = ADDRESS OF SPECIAL ROUTINE
    1182/  4.013 : 001 310 100                  LXI     B,MODEB         ; (B,C) = MODEB IN CASE OF A CHANGE
    1183/  4.016 : 021 307 100                  LXI     D,MODEA         ; (D,E) = MODEA IN CASE OF A CHANGE
    1184/  4.021 : 351                          PCHL                    ; (PC) = ROUTINE
    1185/  4.022 :                      
    1186/  4.022 : 072 307 100          IFCP4   LDA     MODEA           ; GET MODE FLAGS
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 21 - 2024-05-01 01:09:39 PM


    1187/  4.025 : 346 002                      ANI     MA.GRPH         ; SEE IF IN GRAPHICS MODE
    1188/  4.027 : 172                          MOV     A,D             ; (A) = CHARACTER
    1189/  4.030 :                              CPU     Z80
    1190/  4.030 : 050 015                      JR      Z,IFCP6         ; IF NOT IN GRAPHICS MODE
    1191/  4.032 :                              CPU     8080
    1192/  4.032 :                      
    1193/  4.032 : 376 136                      CPI     136Q            ; IS CHARACTER IN THE GRAPHICS RANGE?
    1194/  4.034 : 332 047 004                  JC      IFCP6           ; IF NOT IN GRAPHIC RANGE
    1195/  4.037 :                      
    1196/  4.037 :                              CPU     Z80
    1197/  4.037 : 040 004                      JR      NZ,IFCP5        ; IF CHARACTER IS NOT 136Q
    1198/  4.041 :                              CPU     8080
    1199/  4.041 :                      
    1200/  4.041 : 076 177                      MVI     A,177Q          ; ELSE MAKE 136Q A 177Q
    1201/  4.043 :                              CPU     Z80
    1202/  4.043 : 030 002                      JR      IFCP6           ; DISPLAY IT
    1203/  4.045 :                              CPU     8080
    1204/  4.045 :                      
    1205/  4.045 : 346 037              IFCP5   ANI     00011111B       ; MAKE CHARACTER INTO A GRAPHICS DISPLAY CHAR.
    1206/  4.047 :                      
    1207/  4.047 :                      ;       CHARACTER IS A DISPLAYABLE CHARACTER
    1208/  4.047 :                      ;
    1209/  4.047 : 127                  IFCP6   MOV     D,A             ; SAVE CHARACTER IN D
    1210/  4.050 : 072 307 100                  LDA     MODEA           ; GET MODE FLAGS
    1211/  4.053 : 346 200                      ANI     MA.RV           ; MASK FOR REVERSE VIDEO FLAG
    1212/  4.055 : 262                          ORA     D               ; ADD FLAG STATUS TO CHARACTER
    1213/  4.056 :                      ;       ERRNZ   MA.RV-10000000B ; R.RV MUST BE BIT 7
    1214/  4.056 : 365                          PUSH    PSW             ; SAVE CHARACTER
    1215/  4.057 : 072 307 100                  LDA     MODEA           ; GET MODE AGAIN
    1216/  4.062 : 346 100                      ANI     MA.ICM          ; CHECK FOR INSERT CHARACTER MODE
    1217/  4.064 : 304 165 014                  CNZ     PIC             ; IF SELECTED, DO AN INSERT CHARACTER
    1218/  4.067 :                      
    1219/  4.067 : 361                          POP     PSW             ; ELSE, GET CHARACTER AND DISPLAY IT
    1220/  4.070 : 052 274 100                  LHLD    CURAD           ; GET CURSOR ADDRESS
    1221/  4.073 : 167                          MOV     M,A             ; PUT CHARACTER AT CURSOR
    1222/  4.074 : 043                          INX     H               ; POINT TO NEXT COLUMN
    1223/  4.075 : 174                          MOV     A,H             ; STAY IN VIDEO RAM
    1224/  4.076 : 366 370                      ORI     VRAMS/256
    1225/  4.100 : 147                          MOV     H,A
    1226/  4.101 : 072 272 100                  LDA     CURHP           ; GET CURRENT HORIZONTAL POSITION
    1227/  4.104 : 376 117                      CPI     79              ; AT END OF LINE?
    1228/  4.106 :                              CPU     Z80
    1229/  4.106 : 040 014                      JR      NZ,IFCP7        ; IF NOT AT END OF LINE
    1230/  4.110 :                              CPU     8080
    1231/  4.110 :                      
    1232/  4.110 : 072 310 100                  LDA     MODEB           ; ELSE, GET MODE FLAGS
    1233/  4.113 : 346 004                      ANI     MB.WRAP         ; SEE IF TO WRAP AROUND
    1234/  4.115 :                      
    1235/  4.115 : 310                          RZ                      ; IF NO WRAP
    1236/  4.116 :                      
    1237/  4.116 :                      ;       LDA     CURVP           ; GET LINE NUMBER
    1238/  4.116 :                      ;       CPI     23              ; < 22?
    1239/  4.116 :                      ;       RNC                     ; IF ON LAST LINE(S)
    1240/  4.116 :                      
    1241/  4.116 : 315 354 006                  CALL    PLF             ; ELSE, LFCR
    1242/  4.121 : 303 013 014                  JMP     PCR
    1243/  4.124 :                      
    1244/  4.124 : 074                  IFCP7   INR     A               ; ELSE, POINT TO NEXT COLUMN
    1245/  4.125 : 062 272 100                  STA     CURHP
    1246/  4.130 : 042 274 100                  SHLD    CURAD           ; UPDATE CURAD
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 22 - 2024-05-01 01:09:39 PM


    1247/  4.133 :                      
    1248/  4.133 : 311                          RET                     ; EXIT
    1249/  4.134 :                      
    1250/  4.134 :                      ;;      ESCTAB - ESCAPE SEQUENCE TABLE
    1251/  4.134 :                      ;
    1252/  4.134 :                      ;       *ESCTAB* CONTAINS THE SECOND CHARACTER OF ALL ESCAPE SEQUENCES
    1253/  4.134 :                      ;       THE H19 WILL RESPOND TO.
    1254/  4.134 :                      ;
    1255/  4.134 :                      ;       THE TABLE ENTRIES ARE: THE SECOND CHARACTER OF THE ESCAPE SEQUENCE,
    1256/  4.134 :                      ;       FOLLOWED BY THE ADDRESS OF THE ROUTINE WHICH PERFORMS THE
    1257/  4.134 :                      ;       REQUESTED OPERATION
    1258/  4.134 :                      
    1259/  4.134 : =4.134O              ESCTAB  EQU     $
    1260/  4.134 : 074                          DB      '<'             ; ESC <
    1261/  4.135 : 310 010                      DW      EAM             ; ENTER ANSI MODE
    1262/  4.137 :                      
    1263/  4.137 : 033                          DB      ESC             ; ESC ESC
    1264/  4.140 : 005 016                      DW      SPWE            ; SET PREVIOUS WAS AN ESCAPE AGAIN
    1265/  4.142 :                      
    1266/  4.142 : 075                          DB      '='             ; ESC =
    1267/  4.143 : 113 011                      DW      EKAM            ; ENTER KEYPAD ALTERNATE MODE
    1268/  4.145 :                      
    1269/  4.145 : 076                          DB      '>'             ; ESC >
    1270/  4.146 : 311 016                      DW      XKAM            ; EXIT KEYPAD ALTERNATE MODE
    1271/  4.150 :                      
    1272/  4.150 : 043                          DB      '#'             ; ESC #
    1273/  4.151 : 252 017                      DW      XMTP            ; TRANSMIT PAGE
    1274/  4.153 :                      
    1275/  4.153 : ='@'                 EICSEQ  EQU     '@'             ; ENTER INSERT CHARACTER MODE SEQUENCE
    1276/  4.153 : 100                          DB      EICSEQ          ; ESQ @
    1277/  4.154 : 107 011                      DW      EICM            ; GET INSERT CHARACTER MODE
    1278/  4.156 :                      
    1279/  4.156 : 101                          DB      'A'             ; ESC A
    1280/  4.157 : 227 007                      DW      CUP             ; CURSOR UP
    1281/  4.161 :                      
    1282/  4.161 : 102                          DB      'B'             ; ESC B
    1283/  4.162 : 346 006                      DW      CDN             ; CURSOR DOWN
    1284/  4.164 :                      
    1285/  4.164 : 103                          DB      'C'             ; ESC C
    1286/  4.165 : 201 007                      DW      CRT             ; CURSOR RIGHT
    1287/  4.167 :                      
    1288/  4.167 : 104                          DB      'D'             ; ESC D
    1289/  4.170 : 126 007                      DW      CLFT            ; CURSOR LEFT
    1290/  4.172 :                      
    1291/  4.172 : 105                          DB      'E'             ; ESC E
    1292/  4.173 : 020 010                      DW      CLR             ; CLEAR DISPLAY
    1293/  4.175 :                      
    1294/  4.175 : 106                          DB      'F'             ; ESC F
    1295/  4.176 : 061 011                      DW      EGM             ; ENTER GRAPHICS MODE
    1296/  4.200 :                      
    1297/  4.200 : 107                          DB      'G'             ; ESC G
    1298/  4.201 : 275 016                      DW      XGM             ; EXIT GRAPHICS MODE
    1299/  4.203 :                      
    1300/  4.203 : 110                          DB      'H'             ; ESC H
    1301/  4.204 : 271 015                      DW      SCH             ; PERFORM CURSOR HOME
    1302/  4.206 :                      
    1303/  4.206 : 111                          DB      'I'             ; ESC I
    1304/  4.207 : 234 007                      DW      PRLF            ; PERFORM REVERSE LINE FEED
    1305/  4.211 :                      
    1306/  4.211 : 112                          DB      'J'             ; ESC J
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 23 - 2024-05-01 01:09:39 PM


    1307/  4.212 : 317 011                      DW      ERM             ; ERASE TO END OF MEMORY (PAGE)
    1308/  4.214 :                      
    1309/  4.214 : 113                          DB      'K'             ; ESC K
    1310/  4.215 : 277 011                      DW      EOL             ; ERASE TO END OF LINE
    1311/  4.217 :                      
    1312/  4.217 : 114                          DB      'L'             ; ESC L
    1313/  4.220 : 234 014                      DW      PIL             ; PERFORM INSERT LINE
    1314/  4.222 :                      
    1315/  4.222 : 115                          DB      'M'             ; ESC M
    1316/  4.223 : 075 014                      DW      PDL             ; PERFORM DELETE LINE
    1317/  4.225 :                      
    1318/  4.225 : 116                          DB      'N'             ; ESC N
    1319/  4.226 : 027 014                      DW      PDC             ; PERFORM DELETE CHARACTER
    1320/  4.230 :                      
    1321/  4.230 : ='O'                 XICSEQ  EQU     'O'             ; EXIT INSERT CHARACTER MODE SEQUENCE
    1322/  4.230 : 117                          DB      XICSEQ          ; ESC O
    1323/  4.231 : 305 016                      DW      XICM            ; EXIT INSERT CHARACTER MODE
    1324/  4.233 :                      
    1325/  4.233 : 131                          DB      'Y'             ; ESC Y
    1326/  4.234 : 162 013                      DW      PCA             ; PERFORM CURSOR ADDRESSING
    1327/  4.236 :                      
    1328/  4.236 : 132                          DB      'Z'             ; ESC Z
    1329/  4.237 : 366 012                      DW      IDT             ; IDENTIFY TERMINAL
    1330/  4.241 :                      
    1331/  4.241 : 133                          DB      '['             ; ESC [
    1332/  4.242 : 076 011                      DW      EHSM            ; ENTER HOLD SCREEN MODE
    1333/  4.244 :                      
    1334/  4.244 : 134                          DB      '\\'            ; ESC backslash
    1335/  4.245 : 301 016                      DW      XHSM            ; EXIT HOLD SCREEN MODE
    1336/  4.247 :                      
    1337/  4.247 : 135                          DB      ']'             ; ESC ]
    1338/  4.250 : 326 016                      DW      XMT25           ; TRANSMIT 25TH LINE (IF ENABLED)
    1339/  4.252 :                      
    1340/  4.252 : 142                          DB      'b'             ; ESC b (LOWER CASE B)
    1341/  4.253 : 315 010                      DW      EBD             ; ERASE BEGINNING OF DISPLAY
    1342/  4.255 :                      
    1343/  4.255 : 152                          DB      'j'             ; ESC j (LOWER CASE J)
    1344/  4.256 : 132 015                      DW      SCP             ; SAVE CURSOR POSITION
    1345/  4.260 :                      
    1346/  4.260 : 153                          DB      'k'             ; ESC k (LOWER CASE K)
    1347/  4.261 : 314 015                      DW      USCP            ; UNSAVE CURSOR POSITION
    1348/  4.263 :                      
    1349/  4.263 : 154                          DB      'l'             ; ESC l (LOWER CASE L)
    1350/  4.264 : 051 011                      DW      EEL             ; ERASE ENTIRE LINE
    1351/  4.266 :                      
    1352/  4.266 : 156                          DB      'n'             ; ESC n (LOWER CASE N)
    1353/  4.267 : 153 007                      DW      CPR             ; CURSOR POSITION REPORT
    1354/  4.271 :                      
    1355/  4.271 : 157                          DB      'o'             ; ESC o (LOWER CASE O)
    1356/  4.272 : 352 010                      DW      EBL             ; ERASE BEGINNING OF LINE
    1357/  4.274 :                      
    1358/  4.274 : 160                          DB      'p'             ; ESC p (LOWER CASE P)
    1359/  4.275 : 361 011                      DW      ERVM            ; ENTER REVERSE VIDEO MODE
    1360/  4.277 :                      
    1361/  4.277 : 161                          DB      'q'             ; ESC q (LOWER CASE Q)
    1362/  4.300 : 325 017                      DW      XRVM            ; EXIT REVERSE VIDEO MODE
    1363/  4.302 :                      
    1364/  4.302 : 162                          DB      'r'             ; ESC r (LOWER CASE R)
    1365/  4.303 : 157 012                      DW      SBR             ; SET BAUD RATE
    1366/  4.305 :                      
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 24 - 2024-05-01 01:09:39 PM


    1367/  4.305 : 164                          DB      't'             ; ESC t (LOWER CASE T)
    1368/  4.306 : 136 011                      DW      EKSM            ; ENTER KEYPAD SHIFTED MODE)
    1369/  4.310 :                      
    1370/  4.310 : 165                          DB      'u'             ; ESC u (LOWER CASE U)
    1371/  4.311 : 316 016                      DW      XKSM            ; EXIT KEYPAD SHIFTED MODE)
    1372/  4.313 :                      
    1373/  4.313 : 166                          DB      'v'             ; ESC v (LOWER CASE V)
    1374/  4.314 : 153 016                      DW      WEOL            ; WRAP AROUND AT END OF LINE
    1375/  4.316 :                      
    1376/  4.316 : 167                          DB      'w'             ; ESC w (LOWER CASE W)
    1377/  4.317 : 216 010                      DW      DEOL            ; DISCARD AT END OF LINE
    1378/  4.321 :                      
    1379/  4.321 : 170                          DB      'x'             ; ESC x (LOWER CASE X)
    1380/  4.322 : 141 015                      DW      SMS             ; HEATH SET MODE
    1381/  4.324 :                      
    1382/  4.324 : 171                          DB      'y'             ; ESC y (LOWER CASE Y)
    1383/  4.325 : 122 015                      DW      RMS             ; HEATH RESET MODE
    1384/  4.327 :                      
    1385/  4.327 : 172                          DB      'z'             ; ESC z (LOWER CASE Z)
    1386/  4.330 : 000 013                      DW      RAMP            ; RESET ALL MODES TO POWER UP CONFIGURATION
    1387/  4.332 :                      
    1388/  4.332 : 173                          DB      '{'             ; ESC { (LEFT BRACE)
    1389/  4.333 : 125 011                      DW      EKI             ; ENABLE KEYBOARD INPUT
    1390/  4.335 :                      
    1391/  4.335 : 175                          DB      '}'             ; ESC } (RIGHT BRACE)
    1392/  4.336 : 226 010                      DW      DKI             ; DISABLE KEYBOARD INPUT
    1393/  4.340 :                      
    1394/  4.340 : =3O                  ESCTABW EQU     3               ; TABLE IS THREE BYTES WIDE
    1395/  4.340 : =54O                 ESCTABL EQU     ($-ESCTAB)/ESCTABW
    1396/  4.340 :                      
    1397/  4.340 :                      ;       AESCT - ANSI ESCAPE TABLE
    1398/  4.340 :                      ;
    1399/  4.340 :                      ;       *AESCT* CONTAINS THE SECOND CHARACTER OF THE ANSI ESCAPE TABLES
    1400/  4.340 :                      ;
    1401/  4.340 :                      ;       TABLE ENTRIES ARE THE SECOND CHARACTER FOLLOWED BY THE ADDRESS
    1402/  4.340 :                      ;       OF THE ROUTINE FOR THE REQUESTED FUNCTION
    1403/  4.340 :                      
    1404/  4.340 : =4.340O              AESCT   EQU     $
    1405/  4.340 :                      
    1406/  4.340 : 075                          DB      '='             ; ESC =
    1407/  4.341 : 113 011                      DW      EKAM            ; ENTER KEYPAD ALTERNATE MODE
    1408/  4.343 :                      
    1409/  4.343 : 076                          DB      '>'             ; ESC >
    1410/  4.344 : 311 016                      DW      XKAM            ; EXIT KEYPAD ALTERNATE MODE
    1411/  4.346 :                      
    1412/  4.346 : 115                          DB      'M'             ; ESC M
    1413/  4.347 : 234 007                      DW      PRLF            ; REVERSE INDEX (REVERSE LINE FEED)
    1414/  4.351 :                      
    1415/  4.351 : 133                          DB      '['             ; ESC [
    1416/  4.352 : 143 011                      DW      ELB             ; ESCAPE LEFT BRACKET
    1417/  4.354 :                      
    1418/  4.354 : =3O                  AESCTW  EQU     3               ; TABLE IS THREE BYTES WIDE
    1419/  4.354 : =4O                  AESCTL  EQU     ($-AESCT)/AESCTW
    1420/  4.354 :                      
    1421/  4.354 :                      ;       CTLTAB - CONTROL CHARACTER TABLE
    1422/  4.354 :                      ;
    1423/  4.354 :                      ;       *CTLTAB* CONTAINS ALL CONTROL CODES WHICH THE H19 WILL RESPOND TO
    1424/  4.354 :                      ;
    1425/  4.354 :                      ;       TABLE ENTRIES ARE: THE CONTROL CHARACTER FOLLOWED BY THE ADDRESS
    1426/  4.354 :                      ;       OF THE ROUTINE WHICH PERFORMS THE REQUESTED OPERATION
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 25 - 2024-05-01 01:09:39 PM


    1427/  4.354 :                      
    1428/  4.354 : =4.354O              CTLTAB  EQU     $
    1429/  4.354 : 007                          DB      BELL            ; BELL
    1430/  4.355 : 223 010                      DW      DING            ; DING THE BELL
    1431/  4.357 :                      
    1432/  4.357 : 010                          DB      BS              ; BACKSPACE
    1433/  4.360 : 126 007                      DW      PBS             ; PERFORM A BACKSPACE
    1434/  4.362 : 011                          DB      HT              ; HORIZONTAL TABULATION
    1435/  4.363 : 036 016                      DW      TAB             ; TAB TO NEXT EIGHTH COLUMN
    1436/  4.365 :                      
    1437/  4.365 : 012                          DB      LF              ; LINE FEED
    1438/  4.366 : 112 007                      DW      PLFCR           ; PERFORM LINE FEED AND/OR CARRIAGE RETURN
    1439/  4.370 :                      
    1440/  4.370 : 015                          DB      CR              ; CARRIAGE RETURN
    1441/  4.371 : 003 014                      DW      PCRLF           ; PERFORM CARRIAGE RETURN AND/OR LINE FEED
    1442/  4.373 :                      
    1443/  4.373 : 033                          DB      ESC             ; ESCAPE
    1444/  4.374 : 005 016                      DW      SPWE            ; SET PREVIOUS WAS AN ESCAPE FLAG
    1445/  4.376 : =3O                  CTLTABW EQU     3               ; TABLE IS THREE BYTES WIDE
    1446/  4.376 : =6O                  CTLTABL EQU     ($-CTLTAB)/CTLTABW
    1447/  4.376 :                      
    1448/  4.376 :                      ;;;     GENERAL USE SUBROUTINES
    1449/  4.376 :                      ;
    1450/  4.376 :                      ;       *A1M* INPUTS THE PARAMETER STRING AND FINAL CHARACTER FOR THE
    1451/  4.376 :                      ;       ESC [ ? SEQUENCE
    1452/  4.376 :                      ;
    1453/  4.376 :                      ;
    1454/  4.376 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    1455/  4.376 :                      ;               (D,E) = PSDW
    1456/  4.376 :                      ;
    1457/  4.376 :                      ;       EXIT    (A) = FINAL CHARACTER
    1458/  4.376 :                      ;               (B) = ZERO IF NO PN WAS INPUT
    1459/  4.376 :                      ;               (D,E) = PSDW
    1460/  4.376 :                      ;
    1461/  4.376 :                      ;       USES    A,B,C,H,L,F
    1462/  4.376 :                      
    1463/  4.376 : 170                  A1M     MOV     A,B             ; SEE IF PN WAS INPUT
    1464/  4.377 : 267                          ORA     A
    1465/  5.000 : 300                          RNZ                     ; IF PN ALREADY INPUT, ILLEGAL, EXIT
    1466/  5.001 :                      
    1467/  5.001 : 315 346 014                  CALL    PSD             ; INPUT PARAMETER STRING NOW
    1468/  5.004 :                      
    1469/  5.004 :                      ;       FINAL CHARACTER MUST BE A LOWER CASE H OR A LOWER CASE L
    1470/  5.004 :                      ;
    1471/  5.004 : 376 150                      CPI     'h'             ; FINAL = LOWER CASE H?
    1472/  5.006 :                              CPU     Z80
    1473/  5.006 : 050 005                      JR      Z,A1SM          ; IF H, IS SET HOME SEQUENCE
    1474/  5.010 :                              CPU     8080
    1475/  5.010 :                      
    1476/  5.010 : 376 154                      CPI     'l'             ; FINAL = LOWER CASE L?
    1477/  5.012 :                              CPU     Z80
    1478/  5.012 : 050 033                      JR      Z,A1RM          ; IF L, IS RESET MODE SEQUENCE
    1479/  5.014 :                              CPU     8080
    1480/  5.014 :                      
    1481/  5.014 : 311                          RET                     ; IF NEITHER, EXIT
    1482/  5.015 :                      
    1483/  5.015 :                      ;       A1SM - ANSI MODE #1 SET MODE SEQUENCE
    1484/  5.015 :                      ;
    1485/  5.015 :                      ;       *A1SM* SET THE SPECIFIED MODE(S)
    1486/  5.015 :                      ;
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 26 - 2024-05-01 01:09:39 PM


    1487/  5.015 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    1488/  5.015 :                      ;               (D,E) = PSDW
    1489/  5.015 :                      ;
    1490/  5.015 :                      ;       EXIT    NONE
    1491/  5.015 :                      ;
    1492/  5.015 :                      ;       USES    A,B,C,H,L,F
    1493/  5.015 :                      
    1494/  5.015 : 170                  A1SM    MOV     A,B             ; SEE IF PN WAS INPUT
    1495/  5.016 : 267                          ORA     A
    1496/  5.017 : 310                          RZ                      ; IF NO PN, EXIT
    1497/  5.020 : 353                          XCHG
    1498/  5.021 : 001 310 100                  LXI     B,MODEB         ; (B,C) = MODEB
    1499/  5.024 : 176                  A1SM1   MOV     A,M             ; GET PN
    1500/  5.025 : 376 002                      CPI     2               ; PN = 2?
    1501/  5.027 : 314 065 011                  CZ      EHM             ; IF 2, ENTER HEATH MODE
    1502/  5.032 :                      
    1503/  5.032 : 176                          MOV     A,M             ; GET PN
    1504/  5.033 : 376 007                      CPI     7               ; PN = 7?
    1505/  5.035 : 314 153 016                  CZ      WEOL            ; IF 7, SET WRAP AROUND AT END OF LINE
    1506/  5.040 :                      
    1507/  5.040 : 176                          MOV     A,M             ; GET PN
    1508/  5.041 : 376 150                      CPI     'h'             ; PN = FINAL?
    1509/  5.043 : 310                          RZ                      ; IF FINAL CHARACTER, EXIT
    1510/  5.044 :                      
    1511/  5.044 : 043                          INX     H               ; ELSE, POINT TO NEXT PN
    1512/  5.045 :                              CPU     Z80
    1513/  5.045 : 030 355                      JR      A1SM1           ; DECODE IT
    1514/  5.047 :                              CPU     8080
    1515/  5.047 :                      
    1516/  5.047 :                      ;       A1RM - ANSI MODE #1 RESET MODE SEQUENCE
    1517/  5.047 :                      ;
    1518/  5.047 :                      ;       *A1RM* RESETS THE MODE(S) SPECIFIED BY PN
    1519/  5.047 :                      ;
    1520/  5.047 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    1521/  5.047 :                      ;               (D,E) = PSW
    1522/  5.047 :                      ;
    1523/  5.047 :                      ;       EXIT    NONE
    1524/  5.047 :                      ;
    1525/  5.047 :                      ;       USES    A,B,C,H,L,F
    1526/  5.047 :                      
    1527/  5.047 : 170                  A1RM    MOV     A,B             ; SEE IF PN WAS INPUT
    1528/  5.050 : 267                          ORA     A
    1529/  5.051 : 310                          RZ                      ; IF NO PN, EXIT
    1530/  5.052 :                      
    1531/  5.052 : 353                          XCHG                    ; (H,L) = PSDW
    1532/  5.053 : 001 310 100                  LXI     B,MODEB
    1533/  5.056 : 176                  A1RM1   MOV     A,M
    1534/  5.057 : 376 007                      CPI     7               ; PN = 7?
    1535/  5.061 : 314 216 010                  CZ      DEOL            ; IF 7, SET DISCARD FAST END OF LINE
    1536/  5.064 :                      
    1537/  5.064 : 176                          MOV     A,M             ; GET PN
    1538/  5.065 : 376 154                      CPI     'l'             ; PN = FINAL?
    1539/  5.067 : 310                          RZ                      ; IF FINAL, EXIT
    1540/  5.070 :                      
    1541/  5.070 : 043                          INX     H               ; ELSE, POINT TO NEXT PN
    1542/  5.071 :                              CPU     Z80
    1543/  5.071 : 030 363                      JR      A1RM1
    1544/  5.073 :                              CPU     8080
    1545/  5.073 :                      
    1546/  5.073 :                      ;;      A2M - ANSI MODE #2
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 27 - 2024-05-01 01:09:39 PM


    1547/  5.073 :                      ;
    1548/  5.073 :                      ;       *A2M* INPUTS THE PARAMETER STRING AND THE FINAL CHARACTER FOR
    1549/  5.073 :                      ;       THE SEQUENCE ESC [ >
    1550/  5.073 :                      ;
    1551/  5.073 :                      ;
    1552/  5.073 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    1553/  5.073 :                      ;               (D,E) = PSDW
    1554/  5.073 :                      ;
    1555/  5.073 :                      ;       EXIT    (A) = FINAL CHARACTER
    1556/  5.073 :                      ;               (B) = ZERO IF NO PN WAS INPUT
    1557/  5.073 :                      ;               (D,E) = PSDW
    1558/  5.073 :                      ;
    1559/  5.073 :                      ;       USES    A,B,C,D,E,H,L,F
    1560/  5.073 :                      
    1561/  5.073 : 170                  A2M     MOV     A,B             ; SEE IF PN WAS INPUT
    1562/  5.074 : 267                          ORA     A
    1563/  5.075 : 300                          RNZ                     ; IF ALREADY INPUT, ILLEGAL, EXIT
    1564/  5.076 :                      
    1565/  5.076 : 315 346 014                  CALL    PSD             ; INPUT CHARACTER STRING
    1566/  5.101 : 376 150                      CPI     'h'             ; FINAL = LOWER CASE H?
    1567/  5.103 :                              CPU     Z80
    1568/  5.103 : 050 005                      JR      Z,A2SM          ; IF H, GO SET MODE
    1569/  5.105 :                              CPU     8080
    1570/  5.105 :                      
    1571/  5.105 : 376 154                      CPI     'l'             ; FINAL - LOWER CASE L?
    1572/  5.107 :                              CPU     Z80
    1573/  5.107 : 050 023                      JR      Z,A2RM          ; IF L, GO RESET MODE
    1574/  5.111 :                              CPU     8080
    1575/  5.111 :                      
    1576/  5.111 : 311                          RET                     ; ELSE, EXIT
    1577/  5.112 :                      
    1578/  5.112 :                      ;       A2SM = ANSI MODE #2 SET MODE SEQUENCE
    1579/  5.112 :                      ;
    1580/  5.112 :                      ;       *A2SM* SETS THE MODE(S) SPECIFIED BY PN FOR THE SEQUENCE ESC [ >
    1581/  5.112 :                      ;
    1582/  5.112 :                      ;
    1583/  5.112 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    1584/  5.112 :                      ;               (D,E) = PSDW
    1585/  5.112 :                      ;
    1586/  5.112 :                      ;       EXIT    NONE
    1587/  5.112 :                      ;
    1588/  5.112 :                      ;       USES    A,B,C,D,E,H,L,F
    1589/  5.112 :                      
    1590/  5.112 : 170                  A2SM    MOV     A,B             ; SEE IF PN WAS INPUT
    1591/  5.113 : 267                          ORA     A
    1592/  5.114 : 310                          RZ                      ; IF NO PN, EXIT
    1593/  5.115 :                      
    1594/  5.115 : 041 205 015          A2SM1   LXI     H,SMST          ; (H,L) = SET MODE SEQUENCE TABLE
    1595/  5.120 : 032                          LDAX    D               ; GET PN
    1596/  5.121 : 376 012                      CPI     10              ; < 10?
    1597/  5.123 : 320                          RNC                     ; IF OUT OF RANGE OR FINAL
    1598/  5.124 :                      
    1599/  5.124 : 325                          PUSH    D               ; SAVE PN POINTER
    1600/  5.125 : 315 166 015                  CALL    SMSB            ; SET MODE
    1601/  5.130 : 321                          POP     D
    1602/  5.131 : 023                          INX     D               ; POINT TO NEXT PN
    1603/  5.132 :                              CPU     Z80
    1604/  5.132 : 030 361                      JR      A2SM1
    1605/  5.134 :                              CPU     8080
    1606/  5.134 :                      
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 28 - 2024-05-01 01:09:39 PM


    1607/  5.134 :                      ;       A2RM - ANSI MODE #2 RESET MODE SEQUENCE
    1608/  5.134 :                      ;
    1609/  5.134 :                      ;       *A2RM* RESET THE MODE(S) SPECIFIED BY PN FOR THE SEQUENCE ESC [ >
    1610/  5.134 :                      ;
    1611/  5.134 :                      ;
    1612/  5.134 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    1613/  5.134 :                      ;               (D,E) = PSDW
    1614/  5.134 :                      ;
    1615/  5.134 :                      ;       EXIT    NONE
    1616/  5.134 :                      ;
    1617/  5.134 :                      ;       USES    A,B,C,D,E,H,L,F
    1618/  5.134 :                      
    1619/  5.134 :                      
    1620/  5.134 : 170                  A2RM    MOV     A,B             ; SEE IF PN WAS INPUT
    1621/  5.135 : 267                          ORA     A
    1622/  5.136 : 310                          RZ                      ; IF NO PN
    1623/  5.137 :                      
    1624/  5.137 : 041 227 015          A2RM1   LXI     H,RMST          ; (H,L) = RESET MODE SEQUENCE TABLE
    1625/  5.142 : 032                          LDAX    D               ; GET PN
    1626/  5.143 : 376 012                      CPI     10              ; <9?
    1627/  5.145 : 320                          RNC                     ; IF OUT OF RANGE OR FINAL
    1628/  5.146 :                      
    1629/  5.146 : 325                          PUSH    D               ; SAVE PN POINTER
    1630/  5.147 : 315 166 015                  CALL    SMSB            ; RESET MODE
    1631/  5.152 : 321                          POP     D
    1632/  5.153 : 023                          INX     D               ; POINT TO NEXT PN
    1633/  5.154 :                              CPU     Z80
    1634/  5.154 : 030 361                      JR      A2RM1
    1635/  5.156 :                              CPU     8080
    1636/  5.156 :                      
    1637/  5.156 :                      ;;      ACDN - ANSI CURSOR DOWN
    1638/  5.156 :                      ;
    1639/  5.156 :                      ;       *ACDN* MOVES THE CURSOR TOWARD BOTTOM OF THE DISPLAY THE SPECIFIED
    1640/  5.156 :                      ;       NUMBER OF LINES
    1641/  5.156 :                      ;
    1642/  5.156 :                      ;
    1643/  5.156 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    1644/  5.156 :                      ;               (D,E) = PSDW
    1645/  5.156 :                      ;
    1646/  5.156 :                      ;       EXIT    NONE
    1647/  5.156 :                      ;
    1648/  5.156 :                      ;       USES    A,B,C,D,E,H,L,F
    1649/  5.156 :                      
    1650/  5.156 :                      
    1651/  5.156 : 170                  ACDN    MOV     A,B             ; SEE IF THERE WAS A PN INPUT
    1652/  5.157 : 267                          ORA     A
    1653/  5.160 : 312 346 006                  JZ      CDN             ; IF NO PN, DO ONLY ONE LINE
    1654/  5.163 :                      
    1655/  5.163 : 032                          LDAX    D               ; GET PN
    1656/  5.164 : 267                          ORA     A               ; SEE IF ZERO
    1657/  5.165 : 312 346 006                  JZ      CDN             ; IF ZERO, DEFAULT TO ONE
    1658/  5.170 :                      
    1659/  5.170 : 365                  ACDN1   PUSH    PSW             ; SAVE PN
    1660/  5.171 : 315 346 006                  CALL    CDN             ; MOVE CURSOR DOWN ONE LINE
    1661/  5.174 : 361                          POP     PSW
    1662/  5.175 : 075                          DCR     A               ; PN TIMES
    1663/  5.176 :                              CPU     Z80
    1664/  5.176 : 040 370                      JR      NZ,ACDN1        ; IF NOT DONE
    1665/  5.200 :                              CPU     8080
    1666/  5.200 :                      
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 29 - 2024-05-01 01:09:39 PM


    1667/  5.200 : 311                          RET
    1668/  5.201 :                      
    1669/  5.201 :                      ;;      ACLFT - ANSI CURSOR LEFT
    1670/  5.201 :                      ;
    1671/  5.201 :                      ;       *ACLFT* MOVES THE CURSOR TO THE BEGINNING OF THE LINE PN TIMES
    1672/  5.201 :                      ;
    1673/  5.201 :                      ;
    1674/  5.201 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    1675/  5.201 :                      ;               (D,E) = PSDW
    1676/  5.201 :                      ;
    1677/  5.201 :                      ;       EXIT    NONE
    1678/  5.201 :                      ;
    1679/  5.201 :                      ;       USED    A,B,D,E,H,L,F
    1680/  5.201 :                      
    1681/  5.201 :                      
    1682/  5.201 : 170                  ACLFT   MOV     A,B             ; SEE IF HAD PN
    1683/  5.202 : 267                          ORA     A
    1684/  5.203 : 312 126 007                  JZ      CLFT            ; IF NONE, DEFAULT TO ONE
    1685/  5.206 :                      
    1686/  5.206 : 032                          LDAX    D               ; GET PN
    1687/  5.207 : 267                          ORA     A               ; SEE IF ZERO
    1688/  5.210 : 312 126 007                  JZ      CLFT
    1689/  5.213 :                      
    1690/  5.213 : 107                          MOV     B,A             ; SAVE COUNT
    1691/  5.214 : 315 126 007          ACLFT1  CALL    CLFT            ; CURSOR LEFT ONE COLUMN
    1692/  5.217 : 005                          DCR     B
    1693/  5.220 :                              CPU     Z80
    1694/  5.220 : 040 372                      JR      NZ,ACLFT1       ; TIL DONE
    1695/  5.222 :                              CPU     8080
    1696/  5.222 :                      
    1697/  5.222 : 311                          RET
    1698/  5.223 :                      
    1699/  5.223 :                      ;;      ACPR - ANSI CURSOR POSITION REPORT
    1700/  5.223 :                      ;
    1701/  5.223 :                      ;       *ACPR* OUTPUTS THE CURRENT CURSOR POSITION IN THE ANSI FORM
    1702/  5.223 :                      ;               ** ESC [ Pl ; Pc r **
    1703/  5.223 :                      ;
    1704/  5.223 :                      ;
    1705/  5.223 :                      ;       ENTRY   NONE
    1706/  5.223 :                      ;
    1707/  5.223 :                      ;       EXIT    NONE
    1708/  5.223 :                      ;
    1709/  5.223 :                      ;       USES    A,B,C,D,E,H,L,F
    1710/  5.223 :                      
    1711/  5.223 :                      
    1712/  5.223 : 170                  ACPR    MOV     A,B             ; SEE IF PN WAS INPUT
    1713/  5.224 : 267                          ORA     A
    1714/  5.225 : 310                          RZ                      ; IF NO PN, ILLEGAL, EXIT
    1715/  5.226 :                      
    1716/  5.226 : 032                          LDAX    D               ; GET PN
    1717/  5.227 : 376 006                      CPI     6               ; MUST BE 6 FOR ACPR
    1718/  5.231 : 300                          RNZ                     ; IF NOT SIX, ILLEGAL, EXIT
    1719/  5.232 :                      
    1720/  5.232 : 315 100 015                  CALL    PSOF            ; OUTPUT FIRST PART OF STRING
    1721/  5.235 : 033 333                      DB      ESC,'['+200Q    ; ESC [
    1722/  5.237 : 072 273 100                  LDA     CURVP           ; GET CURRENT LINE NUMBER
    1723/  5.242 : 074                          INR     A               ; HOME LINE = 1 FOR ANSI
    1724/  5.243 : 315 014 011                  CALL    EDD             ; ENCODE DECIMAL DIGITS
    1725/  5.246 : 172                          MOV     A,D             ; GET TENS DIGIT
    1726/  5.247 : 267                          ORA     A               ; SEE IF A LEADING ZERO
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 30 - 2024-05-01 01:09:39 PM


    1727/  5.250 :                              CPU     Z80
    1728/  5.250 : 050 005                      JR      Z,ACPR1         ; IF ZERO DROP IT
    1729/  5.252 :                              CPU     8080
    1730/  5.252 :                      
    1731/  5.252 : 366 060                      ORI     00110000B       ; MAKE BCD INTO ASCII
    1732/  5.254 : 315 375 013                  CALL    PCOFT           ; ELSE PLACE IN FIFO
    1733/  5.257 : 173                  ACPR1   MOV     A,E             ; GET ONES DIGIT
    1734/  5.260 : 366 060                      ORI     00110000B       ; MAKE BCD INTO ASCII
    1735/  5.262 : 315 375 013                  CALL    PCOFT           ; PUT IN FIFO
    1736/  5.265 :                      
    1737/  5.265 : 315 100 015                  CALL    PSOF            ; SEPARATE LINE FROM COLUMN
    1738/  5.270 : 273                          DB      ';'+200Q
    1739/  5.271 :                      
    1740/  5.271 : 072 272 100                  LDA     CURHP           ; GET CURRENT COLUMN POSITION
    1741/  5.274 : 074                          INR     A               ; HOME COLUMN = 1 FOR ANSI
    1742/  5.275 : 315 014 011                  CALL    EDD             ; ENCODE DIGITS
    1743/  5.300 : 172                          MOV     A,D             ; GET TENS
    1744/  5.301 : 267                          ORA     A               ; SEE IF ZERO
    1745/  5.302 :                              CPU     Z80
    1746/  5.302 : 050 005                      JR      Z,ACPR2         ; IF TENS IS ZERO, FORGET IT
    1747/  5.304 :                              CPU     8080
    1748/  5.304 :                      
    1749/  5.304 : 366 060                      ORI     00110000B       ; MAKE BCD INTO ASCII
    1750/  5.306 : 315 375 013                  CALL    PCOFT           ; OUTPUT TENS
    1751/  5.311 : 173                  ACPR2   MOV     A,E             ; GET ONES DIGIT
    1752/  5.312 : 366 060                      ORI     00110000B       ; MAKE BCD INTO ASCII
    1753/  5.314 : 315 375 013                  CALL    PCOFT           ; OUTPUT ONES
    1754/  5.317 : 315 100 015                  CALL    PSOF            ; OUTPUT FINAL
    1755/  5.322 : 322                          DB      'R'+200Q
    1756/  5.323 : 311                          RET
    1757/  5.324 :                      
    1758/  5.324 :                      ;;      ACRT - ANSI CURSOR RIGHT
    1759/  5.324 :                      ;
    1760/  5.324 :                      ;       *ACRT* MOVES THE CURSOR ONE COLUMN TOWARD THE END OF THE LINE
    1761/  5.324 :                      ;
    1762/  5.324 :                      ;
    1763/  5.324 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    1764/  5.324 :                      ;               (D,E) = PSDW
    1765/  5.324 :                      ;
    1766/  5.324 :                      ;       EXIT    NONE
    1767/  5.324 :                      ;
    1768/  5.324 :                      ;       USES    A,B,D,E,H,L,F
    1769/  5.324 :                      
    1770/  5.324 :                      
    1771/  5.324 : 170                  ACRT    MOV     A,B             ; SEE IF PN WAS INPUT
    1772/  5.325 : 267                          ORA     A
    1773/  5.326 : 312 201 007                  JZ      CRT             ; IF NO PN, DEFAULT TO ONE
    1774/  5.331 :                      
    1775/  5.331 : 032                          LDAX    D               ; GET PN
    1776/  5.332 : 267                          ORA     A               ; SEE IF ZERO
    1777/  5.333 : 312 201 007                  JZ      CRT             ; IF ZERO, DEFAULT TO ONE
    1778/  5.336 :                      
    1779/  5.336 : 107                          MOV     B,A             ; SAVE COUNT
    1780/  5.337 : 315 201 007          ACRT1   CALL    CRT             ; CURSOR RIGHT ONE COLUMN
    1781/  5.342 : 005                          DCR     B
    1782/  5.343 :                      
    1783/  5.343 :                              CPU     Z80
    1784/  5.343 : 040 372                      JR      NZ,ACRT1        ; 'TIL DONE
    1785/  5.345 :                              CPU     8080
    1786/  5.345 :                      
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 31 - 2024-05-01 01:09:39 PM


    1787/  5.345 : 311                          RET
    1788/  5.346 :                      
    1789/  5.346 :                      ;;      ACUP - ANSI CURSOR UP
    1790/  5.346 :                      ;
    1791/  5.346 :                      ;       *ACUP* MOVES THE CURSOR TOWARD THE TOP OF THE SCREEN PN TIMES
    1792/  5.346 :                      ;
    1793/  5.346 :                      ;
    1794/  5.346 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    1795/  5.346 :                      ;               (D,E) = PSDW
    1796/  5.346 :                      ;
    1797/  5.346 :                      ;       EXIT    NONE
    1798/  5.346 :                      ;
    1799/  5.346 :                      ;       USES    A,B,C,D,E,H,L,F
    1800/  5.346 :                      
    1801/  5.346 :                      
    1802/  5.346 : 170                  ACUP    MOV     A,B             ; SEE IF A PN WAS INPUT
    1803/  5.347 : 267                          ORA     A
    1804/  5.350 : 312 227 007                  JZ      CUP             ; IF NONE, DEFAULT TO ONE
    1805/  5.353 :                      
    1806/  5.353 : 032                          LDAX    D               ; GET PN
    1807/  5.354 : 267                          ORA     A               ; ZERO?
    1808/  5.355 : 312 227 007                  JZ      CUP             ; IF ZERO, DEFAULT TO ONE
    1809/  5.360 :                      
    1810/  5.360 : 365                  ACUP1   PUSH    PSW             ; SAVE PSW
    1811/  5.361 : 315 227 007                  CALL    CUP             ; CURSOR UP ONE LINE
    1812/  5.364 : 361                          POP     PSW
    1813/  5.365 : 075                          DCR     A               ; COUNT - 1
    1814/  5.366 :                              CPU     Z80
    1815/  5.366 : 040 370                      JR      NZ,ACUP1        ; 'TIL DONE
    1816/  5.370 :                              CPU     8080
    1817/  5.370 :                      
    1818/  5.370 : 311                          RET
    1819/  5.371 :                      
    1820/  5.371 :                      
    1821/  5.371 :                      ;;      APCA - ANSI PERFORM CURSOR ADDRESSING
    1822/  5.371 :                      ;
    1823/  5.371 :                      ;       *APCA* CHECKS TO SEE THAT THE LINE AND COLUMN VALUES ARE LEGAL
    1824/  5.371 :                      ;       AND SETS THE CURSOR TO THE REQUESTED ADDRESS.  IF THE VALUES
    1825/  5.371 :                      ;       ARE OUT OF RANGE, THE OLD LINE NUMBER REMAINS AND/OR THE CURSOR
    1826/  5.371 :                      ;       GOES TO THE LAST COLUMN ON THE LINE
    1827/  5.371 :                      ;
    1828/  5.371 :                      ;
    1829/  5.371 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    1830/  5.371 :                      ;               (D,E) = PSDW
    1831/  5.371 :                      ;
    1832/  5.371 :                      ;       EXIT    NONE
    1833/  5.371 :                      ;
    1834/  5.371 :                      ;       USES    A,B,C,D,E,H,L,F
    1835/  5.371 :                      
    1836/  5.371 :                      
    1837/  5.371 : 170                  APCA    MOV     A,B             ; SEE IF PS WAS INPUT
    1838/  5.372 : 267                          ORA     A
    1839/  5.373 : 312 271 015                  JZ      SCH             ; IF NO ADDRESS WAS SPECIFIED, PLACE CURSOR HOME
    1840/  5.376 :                      
    1841/  5.376 : 353                          XCHG                    ; (H,L) = PS WORK AREA
    1842/  5.377 : 176                          MOV     A,M             ; GET LINE NUMBER
    1843/  6.000 : 267                          ORA     A               ; SEE IF ZERO
    1844/  6.001 :                              CPU     Z80
    1845/  6.001 : 050 001                      JR      Z,APCA1         ; IF ZERO, THIS IS FIRST LINE
    1846/  6.003 :                              CPU     8080
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 32 - 2024-05-01 01:09:39 PM


    1847/  6.003 :                      
    1848/  6.003 : 075                          DCR     A               ; ELSE, LINE = LINE#-1
    1849/  6.004 : 376 030              APCA1   CPI     24              ; LINE IN RANGE?
    1850/  6.006 :                              CPU     Z80
    1851/  6.006 : 070 013                      JR      C,APCA2         ; IF 0 TO 23
    1852/  6.010 :                      
    1853/  6.010 : 040 014                      JR      NZ,APCA3        ; IF NOT REQUESTING 25TH LINE
    1854/  6.012 :                              CPU     8080
    1855/  6.012 :                      
    1856/  6.012 : 107                          MOV     B,A             ; SAVE LINE NUMBER
    1857/  6.013 : 072 311 100                  LDA     MODEI           ; GET MODE FLAGS
    1858/  6.016 : 346 200                      ANI     MI.25L          ; 25TH LINE ENABLED?
    1859/  6.020 :                              CPU     Z80
    1860/  6.020 : 050 004                      JR      Z,APCA3         ; IF 25TH LINE IS OFF
    1861/  6.022 :                              CPU     8080
    1862/  6.022 :                      
    1863/  6.022 : 170                          MOV     A,B
    1864/  6.023 : 062 273 100          APCA2   STA     CURVP           ; SET NEW LINE NUMBER
    1865/  6.026 :                      
    1866/  6.026 : 043                  APCA3   INX     H               ; GET NEXT PN
    1867/  6.027 : 176                          MOV     A,M             ; COLUMN NUMBER
    1868/  6.030 : 267                          ORA     A               ; ZERO?
    1869/  6.031 :                              CPU     Z80
    1870/  6.031 : 050 001                      JR      Z,APCA4         ; IF ZERO
    1871/  6.033 :                              CPU     8080
    1872/  6.033 :                      
    1873/  6.033 : 075                          DCR     A               ; ELSE COLUMN = COLUMN#-1
    1874/  6.034 : 376 120              APCA4   CPI     80              ; SEE IF IN RANGE
    1875/  6.036 :                              CPU     Z80
    1876/  6.036 : 070 002                      JR      C,APCA5         ; IF 0 TO 79
    1877/  6.040 :                              CPU     8080
    1878/  6.040 :                      
    1879/  6.040 : 076 117                      MVI     A,79            ; ELSE, SET LAST COLUMN
    1880/  6.042 : 062 272 100          APCA5   STA     CURHP           ; SET COLUMN POSITION
    1881/  6.045 : 303 322 015                  JMP     SNCP            ; SET NEW CURSOR POSITION
    1882/  6.050 :                      
    1883/  6.050 :                      ;;      APDC - ANSI PERFORM DELETE CHARACTER
    1884/  6.050 :                      ;
    1885/  6.050 :                      ;       *APDC* DELETES THE SPECIFIED NUMBER OF CHARACTERS FROM THE LINE
    1886/  6.050 :                      ;
    1887/  6.050 :                      ;
    1888/  6.050 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    1889/  6.050 :                      ;               (D,E) = PSDW
    1890/  6.050 :                      ;
    1891/  6.050 :                      ;       EXIT    NONE
    1892/  6.050 :                      ;
    1893/  6.050 :                      ;       USES    A,B,C,D,E,H,L,F
    1894/  6.050 :                      
    1895/  6.050 :                      
    1896/  6.050 : 170                  APDC    MOV     A,B             ; SEE IF INPUT PN
    1897/  6.051 : 267                          ORA     A
    1898/  6.052 : 312 027 014                  JZ      PDC             ; IF NO PN, DEFAULT TO ONE
    1899/  6.055 :                      
    1900/  6.055 : 032                          LDAX    D               ; GET PN
    1901/  6.056 : 267                          ORA     A               ; ZERO?
    1902/  6.057 : 312 027 014                  JZ      PDC             ; IF ZERO, DEFAULT TO ONE
    1903/  6.062 :                      
    1904/  6.062 : 365                  APDC1   PUSH    PSW             ; SAVE PN
    1905/  6.063 : 315 027 014                  CALL    PDC
    1906/  6.066 : 361                          POP     PSW
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 33 - 2024-05-01 01:09:39 PM


    1907/  6.067 : 075                          DCR     A
    1908/  6.070 :                              CPU     Z80
    1909/  6.070 : 040 370                      JR      NZ,APDC1        ; 'TIL DONE
    1910/  6.072 :                              CPU     8080
    1911/  6.072 :                      
    1912/  6.072 : 311                          RET
    1913/  6.073 :                      
    1914/  6.073 :                      ;;      APDL - ANSI PERFORM DELETE LINE
    1915/  6.073 :                      ;
    1916/  6.073 :                      ;       *APDL* DELETES THE SPECIFIED NUMBER OF FOLLOWING LINES
    1917/  6.073 :                      ;
    1918/  6.073 :                      ;
    1919/  6.073 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    1920/  6.073 :                      ;               (D,E) = PSDW
    1921/  6.073 :                      ;
    1922/  6.073 :                      ;       EXIT    NONE
    1923/  6.073 :                      ;
    1924/  6.073 :                      ;       USES    A,B,C,D,E,H,L,F
    1925/  6.073 :                      
    1926/  6.073 :                      
    1927/  6.073 : 170                  APDL    MOV     A,B             ; SEE IF PN WAS INPUT
    1928/  6.074 : 267                          ORA     A
    1929/  6.075 : 312 075 014                  JZ      PDL             ; IF NO PN, DEFAULT TO ONE
    1930/  6.100 :                      
    1931/  6.100 : 032                          LDAX    D               ; GET PN
    1932/  6.101 : 267                          ORA     A               ; ZERO?
    1933/  6.102 : 312 075 014                  JZ      PDL             ; IF ZERO, DEFAULT TO ONE
    1934/  6.105 :                      
    1935/  6.105 : 365                  APDL1   PUSH    PSW             ; SAVE COUNT
    1936/  6.106 : 315 075 014                  CALL    PDL             ; DELETE ONE LINE
    1937/  6.111 : 361                          POP     PSW
    1938/  6.112 : 075                          DCR     A               ; COUNT -1
    1939/  6.113 :                              CPU     Z80
    1940/  6.113 : 040 370                      JR      NZ,APDL1        ; 'TIL DONE
    1941/  6.115 :                              CPU     8080
    1942/  6.115 :                      
    1943/  6.115 : 311                          RET
    1944/  6.116 :                      
    1945/  6.116 :                      ;;      APIL - ANSI PERFORM INSERT LINE
    1946/  6.116 :                      ;
    1947/  6.116 :                      ;       *APIL* INSERTS THE SPECIFIED NUMBER OF LINES AT THE CURRENT LINE
    1948/  6.116 :                      ;       OF THE CURSOR POSITION
    1949/  6.116 :                      ;
    1950/  6.116 :                      ;
    1951/  6.116 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    1952/  6.116 :                      ;               (D,E) = PSDW
    1953/  6.116 :                      ;
    1954/  6.116 :                      ;       EXIT    NONE
    1955/  6.116 :                      ;
    1956/  6.116 :                      ;       USES    A,B,C,D,E,H,L,F
    1957/  6.116 :                      
    1958/  6.116 :                      
    1959/  6.116 : 170                  APIL    MOV     A,B             ; SEE IF PN WAS INPUT
    1960/  6.117 : 267                          ORA     A
    1961/  6.120 : 312 234 014                  JZ      PIL             ; IF NO PN, INSERT ONE LINE
    1962/  6.123 :                      
    1963/  6.123 : 032                          LDAX    D               ; GET PN
    1964/  6.124 : 267                          ORA     A               ; ZERO?
    1965/  6.125 : 312 234 014                  JZ      PIL             ; IF ZERO, DEFAULT TO ONE LINE
    1966/  6.130 :                      
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 34 - 2024-05-01 01:09:39 PM


    1967/  6.130 : 365                  APIL1   PUSH    PSW             ; SAVE COUNT
    1968/  6.131 : 315 234 014                  CALL    PIL             ; INSERT ONE LINE
    1969/  6.134 : 361                          POP     PSW
    1970/  6.135 : 075                          DCR     A
    1971/  6.136 :                              CPU     Z80
    1972/  6.136 : 040 370                      JR      NZ,APIL1        ; 'TIL DONE
    1973/  6.140 :                              CPU     8080
    1974/  6.140 :                      
    1975/  6.140 : 311                          RET
    1976/  6.141 :                      
    1977/  6.141 :                      ;;      ARM - ANSI RESET MODE
    1978/  6.141 :                      ;
    1979/  6.141 :                      ;       *ARM* RESETS THE MODE(S) SPECIFIED BY PN FOR THE SEQUENCE  ESC [ Pn l
    1980/  6.141 :                      ;
    1981/  6.141 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    1982/  6.141 :                      ;
    1983/  6.141 :                      ;       EXIT    NONE
    1984/  6.141 :                      ;
    1985/  6.141 :                      ;       USES    A,B,C,D,E,H,L,F
    1986/  6.141 :                      
    1987/  6.141 :                      
    1988/  6.141 : 170                  ARM     MOV     A,B             ; SEE IF PN WAS INPUT
    1989/  6.142 : 267                          ORA     A
    1990/  6.143 : 310                          RZ                      ; IF NO PN, EXIT
    1991/  6.144 :                      
    1992/  6.144 : 353                          XCHG                    ; (H,L) = PSDW
    1993/  6.145 : 001 310 100                  LXI     B,MODEB         ; (B,C) = MODEB
    1994/  6.150 : 021 307 100          ARM1    LXI     D,MODEA         ; (D,E) = MODEA
    1995/  6.153 : 176                          MOV     A,M             ; GET PN
    1996/  6.154 : 376 002                      CPI     2               ; PN = 2>
    1997/  6.156 : 314 125 011                  CZ      EKI             ; IF 2, ENABLE KEYBOARD INPUT
    1998/  6.161 :                      
    1999/  6.161 : 176                          MOV     A,M             ; GET PN
    2000/  6.162 : 376 004                      CPI     4               ; PN = 4?
    2001/  6.164 : 345                          PUSH    H               ; SAVE PN POINTER
    2002/  6.165 : 314 305 016                  CZ      XICM            ; IF 4, EXIT INSERT CHARACTER MODE
    2003/  6.170 : 341                          POP     H
    2004/  6.171 :                      
    2005/  6.171 : 176                          MOV     A,M             ; GET PN
    2006/  6.172 : 376 024                      CPI     20              ; PN = 20?
    2007/  6.174 : 314 263 016                  CZ      XACR            ; IF 20, EXIT AUTO CARRIAGE RETURN
    2008/  6.177 :                      
    2009/  6.177 : 176                          MOV     A,M             ; GET PN
    2010/  6.200 : 376 154                      CPI     'l'             ; SEE IF PN = FINAL
    2011/  6.202 : 310                          RZ                      ; IF FINAL
    2012/  6.203 :                      
    2013/  6.203 : 043                          INX     H               ; ELSE POINT TO NEXT PN
    2014/  6.204 :                              CPU     Z80
    2015/  6.204 : 030 342                      JR      ARM1
    2016/  6.206 :                              CPU     8080
    2017/  6.206 :                      
    2018/  6.206 :                      ;;      ASBR - ANSI SET BAUD RATE
    2019/  6.206 :                      ;
    2020/  6.206 :                      ;       *ASBR* SETS THE BAUD RATE TO THAT SPECIFIED BY PN
    2021/  6.206 :                      ;
    2022/  6.206 :                      ;
    2023/  6.206 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    2024/  6.206 :                      ;
    2025/  6.206 :                      ;       EXIT    NONE
    2026/  6.206 :                      ;
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 35 - 2024-05-01 01:09:39 PM


    2027/  6.206 :                      ;       USES    A,B,C,D,E,H,L,F
    2028/  6.206 :                      
    2029/  6.206 :                      
    2030/  6.206 : 170                  ASBR    MOV     A,B             ; SEE IF PN WAS INPUT
    2031/  6.207 : 267                          ORA     A
    2032/  6.210 :                              CPU     Z80
    2033/  6.210 : 050 005                      JR      Z,ASBR1         ; IF NON SPECIFIED, DEFAULT 10 110 BAUD
    2034/  6.212 :                              CPU     8080
    2035/  6.212 :                      
    2036/  6.212 : 353                          XCHG                    ; (H,L) = PSDW
    2037/  6.213 : 176                          MOV     A,M             ; GET PN
    2038/  6.214 : 376 016                      CPI     14              ; IN RANGE?
    2039/  6.216 : 320                          RNC                     ; IF NOT, EXIT
    2040/  6.217 :                      
    2041/  6.217 : 303 172 012          ASBR1   JMP                     SBR.
    2042/  6.222 :                      
    2043/  6.222 :                      ;;      ASGM - ANSI SET GRAPHICS MODE
    2044/  6.222 :                      ;
    2045/  6.222 :                      ;       *ASGM* SETS OR RESETS THE GRAPHICS MODE AND/OR THE REVERSE VIDEO MODE
    2046/  6.222 :                      ;
    2047/  6.222 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    2048/  6.222 :                      ;               (D,E) = PSDW
    2049/  6.222 :                      ;
    2050/  6.222 :                      ;       EXIT    NONE
    2051/  6.222 :                      ;
    2052/  6.222 :                      ;       USES    A,D,E,H,L,F
    2053/  6.222 :                      
    2054/  6.222 :                      
    2055/  6.222 : 170                  ASGM    MOV     A,B             ; SEE IF PN WAS INPUT
    2056/  6.223 : 267                          ORA     A
    2057/  6.224 :                              CPU     Z80
    2058/  6.224 : 050 011                      JR      Z,ASGM1.5       ; IF NOT PN, DEFAULT TO REVERSE VIDEO OFF
    2059/  6.226 :                              CPU     8080
    2060/  6.226 :                      
    2061/  6.226 : 325                          PUSH    D               ; SAVE PN POINTER
    2062/  6.227 :                      
    2063/  6.227 : 321                  ASGM1   POP     D               ; GET PN POINTER
    2064/  6.230 : 032                          LDAX    D               ; GET PN
    2065/  6.231 : 023                          INX     D               ; POINT TO NEXT
    2066/  6.232 : 325                          PUSH    D               ; SAVE FOR NEXT PASS(S)
    2067/  6.233 : 041 227 006                  LXI     H,ASGM1         ; SET RETURN ADDRESS
    2068/  6.236 : 345                          PUSH    H
    2069/  6.237 :                      
    2070/  6.237 : 041 265 006          ASGM1.5 LXI     H,ASGMT         ; (H,L) = GRAPHIC MODE TABLE ADDRESS
    2071/  6.242 : 026 004                      MVI     D,ASGMTL        ; (D) = TABLE LENGTH
    2072/  6.244 : 036 003                      MVI     E,ASGMTW        ; (E) = TABLE WIDTH
    2073/  6.246 : 315 363 015                  CALL    STAB            ; SEARCH TABLE FOR PN VALUE
    2074/  6.251 :                              CPU     Z80
    2075/  6.251 : 070 007                      JR      C,ASGM2         ; IF NOT IN TABLE, MUST BE BAD NO. OR FINAL
    2076/  6.253 :                              CPU     8080
    2077/  6.253 :                      
    2078/  6.253 : 043                          INX     H               ; ELSE, IN TABLE, GOT TO ROUTINE
    2079/  6.254 : 146                          MOV     H,M             ; GET MSB
    2080/  6.255 : 157                          MOV     L,A             ; LSB
    2081/  6.256 : 021 307 100                  LXI     D,MODEA         ; (D,E) = MODEA FOR ROUTINES
    2082/  6.261 : 351                          PCHL
    2083/  6.262 :                      
    2084/  6.262 : 341                  ASGM2   POP     H               ; TOSS FORCED RETURN ADDRESS
    2085/  6.263 : 321                          POP     D               ; EVEN STACK
    2086/  6.264 : 311                          RET
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 36 - 2024-05-01 01:09:39 PM


    2087/  6.265 :                      
    2088/  6.265 :                      ;       ASGMT - ANSI SET GRAPHICS MODE TABLE
    2089/  6.265 :                      ;
    2090/  6.265 :                      ;       *ASGMT* CONTAINS THE ADDRESS OF THE ROUTINES WHICH SET
    2091/  6.265 :                      ;       THE REQUESTED GRAPHIC OR REVERSE VIDEO MODE
    2092/  6.265 :                      
    2093/  6.265 : =6.265O              ASGMT   EQU     $
    2094/  6.265 :                      
    2095/  6.265 : 000                          DB      0               ; ZERO
    2096/  6.266 : 325 017                      DW      XRVM            ; EXIT REVERSE VIDEO MODE
    2097/  6.270 :                      
    2098/  6.270 : 007                          DB      7               ; SEVEN
    2099/  6.271 : 361 011                      DW      ERVM            ; ENTER REVERSE VIDEO MODE
    2100/  6.273 :                      
    2101/  6.273 : 012                          DB      10              ; TEN
    2102/  6.274 : 061 011                      DW      EGM             ; ENTER GRAPHICS MODE
    2103/  6.276 :                      
    2104/  6.276 : 013                          DB      11              ; ELEVEN
    2105/  6.277 : 275 016                      DW      XGM             ; EXIT GRAPHICS MODE
    2106/  6.301 :                      
    2107/  6.301 : =3O                  ASGMTW  EQU     3               ; TABLE IS THREE BYTES WIDE
    2108/  6.301 : =4O                  ASGMTL  EQU     ($-ASGMT)/ASGMTW ; TABLE LENGTH
    2109/  6.301 :                      
    2110/  6.301 :                      ;;      ASM - ANSI SET MODE
    2111/  6.301 :                      ;
    2112/  6.301 :                      ;       *ASM* SETS THE MODE(S) SPECIFIED BY PN
    2113/  6.301 :                      ;
    2114/  6.301 :                      ;
    2115/  6.301 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    2116/  6.301 :                      ;               (D,E) = PSDW
    2117/  6.301 :                      ;
    2118/  6.301 :                      ;       EXIT    NONE
    2119/  6.301 :                      ;
    2120/  6.301 :                      ;       USES    A,B,C,D,E,H,L,F
    2121/  6.301 :                      
    2122/  6.301 : 170                  ASM     MOV     A,B             ; SEE IF PN WAS INPUT
    2123/  6.302 : 267                          ORA     A
    2124/  6.303 : 310                          RZ                      ; IF NO PN
    2125/  6.304 :                      
    2126/  6.304 : 353                          XCHG                    ; (H,L) = PSDW
    2127/  6.305 : 001 310 100                  LXI     B,MODEB         ; (B,C) = MODEB
    2128/  6.310 : 021 307 100          ASM1    LXI     D,MODEA         ; (D,E) = MODEA
    2129/  6.313 : 176                          MOV     A,M             ; GET PN
    2130/  6.314 : 376 002                      CPI     2               ; PN = 2?
    2131/  6.316 : 314 226 010                  CZ      DKI             ; IF 2, DISABLE KEYBOARD INPUT
    2132/  6.321 :                      
    2133/  6.321 : 176                          MOV     A,M             ; GET PN
    2134/  6.322 : 345                          PUSH    H               ; SAVE PN POINTER
    2135/  6.323 : 376 004                      CPI     4               ; PN = 4?
    2136/  6.325 : 314 107 011                  CZ      EICM            ; IF 4, ENTER INSERT CHARACTER MODE
    2137/  6.330 : 341                          POP     H
    2138/  6.331 :                      
    2139/  6.331 : 176                          MOV     A,M             ; GET PN
    2140/  6.332 : 376 024                      CPI     20              ; PN = 20?
    2141/  6.334 : 314 276 010                  CZ      EACR            ; IF 20, ENTER AUTO CARRIAGE RETURN
    2142/  6.337 :                      
    2143/  6.337 : 176                          MOV     A,M             ; GET PN
    2144/  6.340 : 376 150                      CPI     'h'             ; SEE IF PN = FINAL
    2145/  6.342 : 310                          RZ
    2146/  6.343 :                      
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 37 - 2024-05-01 01:09:39 PM


    2147/  6.343 : 043                          INX     H               ; ELSE, POINT TO NEXT PN
    2148/  6.344 :                              CPU     Z80
    2149/  6.344 : 030 342                      JR      ASM1
    2150/  6.346 :                              CPU     8080
    2151/  6.346 :                      
    2152/  6.346 :                      ;;      CDN - CURSOR DOWN
    2153/  6.346 :                      ;
    2154/  6.346 :                      ;       *CDN* MOVES THE CURSOR DOWN ONE LINE ON THE DISPLAY, BUT DOES
    2155/  6.346 :                      ;       NOT CAUSE A SCROLL PAST THE LAST LINE.
    2156/  6.346 :                      ;
    2157/  6.346 :                      ;
    2158/  6.346 :                      ;       ENTRY   NONE
    2159/  6.346 :                      ;
    2160/  6.346 :                      ;       EXIT    NONE
    2161/  6.346 :                      ;
    2162/  6.346 :                      ;       USES    A,B,C,D,E,H,L,F
    2163/  6.346 :                      
    2164/  6.346 :                      
    2165/  6.346 : 072 273 100          CDN     LDA     CURVP           ; GET CURRENT VERTICAL POSITION
    2166/  6.351 : 376 027                      CPI     23              ; ON LAST LINE(S)?
    2167/  6.353 : 320                          RNC                     ; IF SO, EXIT
    2168/  6.354 :                      
    2169/  6.354 :                      ;       JMP     PLF             ; ELSE, DO A LINE FEED
    2170/  6.354 :                      ;       ERRNZ   $-PLF
    2171/  6.354 :                      
    2172/  6.354 :                      ;;      PLF - PERFORM LINE FEED
    2173/  6.354 :                      ;
    2174/  6.354 :                      ;       *PLF* MOVES THE CURSOR DOWN ONE LINE IN THE DISPLAY MEMORY.  IF
    2175/  6.354 :                      ;       THE CURSOR WAS ON THE 23RD LINE, THE DISPLAYED VIDEO IS SCROLLED
    2176/  6.354 :                      ;       UP ONE LINE AND THE NEW LINE IS WRITTEN FULL OF SPACES.
    2177/  6.354 :                      ;
    2178/  6.354 :                      ;
    2179/  6.354 :                      ;       ENTRY   NONE
    2180/  6.354 :                      ;
    2181/  6.354 :                      ;       EXIT    NONE
    2182/  6.354 :                      ;
    2183/  6.354 :                      ;       USES    A,B,C,D,E,H,L,F
    2184/  6.354 :                      
    2185/  6.354 :                      
    2186/  6.354 : 072 273 100          PLF     LDA     CURVP           ; GET VERTICAL POSITION
    2187/  6.357 : 376 030                      CPI     24              ; ON 25TH LINE?
    2188/  6.361 : 310                          RZ                      ; IF SO, EXIT WITHOUT ANY ACTION
    2189/  6.362 :                      
    2190/  6.362 : 021 120 000          PLF0.2  LXI     D,80            ; LINES = 80 CHARACTERS
    2191/  6.365 : 052 270 100                  LHLD    CLSA            ; GET CURRENT LINE STARTING ADDRESS
    2192/  6.370 : 031                          DAD     D               ; ADD A LINE
    2193/  6.371 : 174                          MOV     A,H             ; STAY IN VIDEO RAM
    2194/  6.372 : 366 370                      ORI     VRAMS/256
    2195/  6.374 : 147                          MOV     H,A
    2196/  6.375 : 042 270 100                  SHLD    CLSA            ; SET NEW LINE VALUE
    2197/  7.000 : 072 273 100                  LDA     CURVP           ; GET CURSOR VERTICAL POSITION
    2198/  7.003 : 376 027                      CPI     23              ; ON LAST LINE?
    2199/  7.005 :                              CPU     Z80
    2200/  7.005 : 040 061                      JR      NZ,PLF1         ; IF NOT ON LAST LINE
    2201/  7.007 :                              CPU     8080
    2202/  7.007 :                      
    2203/  7.007 :                      ;       SCROLL  VIDEO TO DISPLAY A NEW LINE
    2204/  7.007 :                      ;
    2205/  7.007 : 072 311 100                  LDA     MODEI           ; GET MODE FLAGS
    2206/  7.012 : 346 200                      ANI     MI.25L          ; SEE IF 25TH LINE IS ENABLED
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 38 - 2024-05-01 01:09:39 PM


    2207/  7.014 :                              CPU     Z80
    2208/  7.014 : 050 016                      JR      Z,PLF0.5
    2209/  7.016 :                              CPU     8080
    2210/  7.016 :                      
    2211/  7.016 : 345                          PUSH    H               ; SAVE NEW LINE STARTING ADDRESS
    2212/  7.017 : 021 120 000                  LXI     D,80            ; ADD 80 FOR BEGINNING OF 26TH LINE
    2213/  7.022 : 031                          DAD     D
    2214/  7.023 : 353                          XCHG                    ; (D,E) = BEGINNING OF 26TH LINE
    2215/  7.024 : 341                          POP     H               ; (H,L) = BEGINNING OF 25TH LINE
    2216/  7.025 : 345                          PUSH    H               ; SAVE AGAIN FOR LATER
    2217/  7.026 : 006 005                      MVI     B,80/16         ; SET MOD 16 COUNT FOR ONE LINE
    2218/  7.030 : 315 040 010                  CALL    CPM16           ; COPY LINE
    2219/  7.033 : 341                          POP     H               ; (H,L) = BEGINNING OF 25TH LINE
    2220/  7.034 :                      
    2221/  7.034 : 006 005              PLF0.5  MVI     B,80/16         ; SET MOD-16 ERASE COUNT TO 5 (80 CHARACTERS)
    2222/  7.036 : 315 212 016                  CALL    WSVA            ; WRITE 80 SPACES TO VIDEO TO BLANK THIS LINE
    2223/  7.041 : 052 266 100                  LHLD    SHOME           ; GET OLD HOME POSITION
    2224/  7.044 : 021 120 000                  LXI     D,80            ; ADD ONE LINE
    2225/  7.047 : 031                          DAD     D
    2226/  7.050 : 174                          MOV     A,H             ; STAY IN VIDEO RAM
    2227/  7.051 : 366 370                      ORI     VRAMS/256
    2228/  7.053 : 147                          MOV     H,A
    2229/  7.054 : 042 266 100                  SHLD    SHOME           ; UPDATE HOME POSITION
    2230/  7.057 : 174                          MOV     A,H             ; SET VALUE OF HOME POSITION FOR CRTC
    2231/  7.060 : 346 007                      ANI     HOMAX/256
    2232/  7.062 : 147                          MOV     H,A
    2233/  7.063 : 042 301 100                  SHLD    VI.SA
    2234/  7.066 :                              CPU     Z80
    2235/  7.066 : 030 004                      JR      PLF2            ; UPDATE CURSOR ADDRESS
    2236/  7.070 :                              CPU     8080
    2237/  7.070 :                      
    2238/  7.070 : 074                  PLF1    INR     A               ; ADD ONE TO LINE COUNTER
    2239/  7.071 : 062 273 100                  STA     CURVP
    2240/  7.074 :                      
    2241/  7.074 : 052 274 100          PLF2    LHLD    CURAD           ; GET CURRENT CURSOR POSITION
    2242/  7.077 : 031                          DAD     D               ; ADD ONE LINE
    2243/  7.100 : 174                          MOV     A,H             ; STAY IN VIDEO RAM
    2244/  7.101 : 366 370                      ORI     VRAMS/256
    2245/  7.103 : 147                          MOV     H,A
    2246/  7.104 : 042 274 100                  SHLD    CURAD           ; UPDATE CURSOR ADDRESS
    2247/  7.107 :                      
    2248/  7.107 : 303 146 016                  JMP     UCP.            ; CAUSE NMI TO UPDATE SCREEN IN CASE OF SCROLL
    2249/  7.112 :                      
    2250/  7.112 :                      ;;      PLFCR - PERFORM LINE FEED AND/OR CARRIAGE RETURN
    2251/  7.112 :                      ;
    2252/  7.112 :                      ;       *PLFCR* PERFORMS A CARRIAGE RETURN PRIOR TO PERFORMING A LINE
    2253/  7.112 :                      ;       FEED IF THE AUTO CARRIAGE RETURN FUNCTION IS SELECTED
    2254/  7.112 :                      ;
    2255/  7.112 :                      ;
    2256/  7.112 :                      ;       ENTRY   NONE
    2257/  7.112 :                      ;
    2258/  7.112 :                      ;       EXIT    NONE
    2259/  7.112 :                      ;
    2260/  7.112 :                      ;       USES    A,B,C,D,E,H,L,F
    2261/  7.112 :                      
    2262/  7.112 :                      
    2263/  7.112 : 315 354 006          PLFCR   CALL    PLF             ; DO LINE FEED
    2264/  7.115 : 072 310 100                  LDA     MODEB           ; GET MODE FLAGS
    2265/  7.120 : 346 020                      ANI     MB.ACR          ; SEE IF ACR SELECTED
    2266/  7.122 : 302 013 014                  JNZ     PCR             ; IF SELECTED
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 39 - 2024-05-01 01:09:39 PM


    2267/  7.125 :                      
    2268/  7.125 : 311                          RET                     ; ELSE, JUST RETURN
    2269/  7.126 :                      
    2270/  7.126 :                      ;;      PBS - PERFORM BACKSPACE
    2271/  7.126 :                      ;
    2272/  7.126 :                      ;       CLFT - CURSOR LEFT
    2273/  7.126 :                      ;
    2274/  7.126 :                      ;       *PBS*-*CLFT* STEPS THE CURSOR ONE POSITION TO THE LEFT, BUT DOES NOT
    2275/  7.126 :                      ;       WRAP AROUND TO THE PREVIOUS LINE AFTER REACHING COLUMN ZERO
    2276/  7.126 :                      ;
    2277/  7.126 :                      ;
    2278/  7.126 :                      ;       ENTRY   NONE
    2279/  7.126 :                      ;
    2280/  7.126 :                      ;       EXIT    NONE
    2281/  7.126 :                      ;
    2282/  7.126 :                      ;       USES    A,H,L,F
    2283/  7.126 :                      
    2284/  7.126 :                      
    2285/  7.126 : =7.126O              PBS     EQU     $
    2286/  7.126 : =7.126O              CLFT    EQU     $
    2287/  7.126 : 072 272 100                  LDA     CURHP           ; GET CURRENT POSITION ON LINE
    2288/  7.131 : 267                          ORA     A               ; SEE IF COLUMN ZERO
    2289/  7.132 : 310                          RZ                      ; IF AT BEGINNING OF LINE
    2290/  7.133 :                      
    2291/  7.133 : 075                          DCR     A               ; ELSE, DECREMENT CURSOR POSITION
    2292/  7.134 : 062 272 100                  STA     CURHP
    2293/  7.137 : 052 274 100                  LHLD    CURAD           ; GET CURSOR ADDRESS
    2294/  7.142 : 053                          DCX     H               ; DECREMENT ADDRESS
    2295/  7.143 : 174                  PBS1    MOV     A,H             ; STAY IN VIDEO RAM
    2296/  7.144 : 366 370                      ORI     VRAMS/256
    2297/  7.146 : 147                          MOV     H,A
    2298/  7.147 : 042 274 100                  SHLD    CURAD
    2299/  7.152 :                      
    2300/  7.152 : 311                          RET                     ; EXIT WITH OR WITHOUT
    2301/  7.153 :                      
    2302/  7.153 :                      ;;      CPR - CURSOR POSITION REPORT
    2303/  7.153 :                      ;
    2304/  7.153 :                      ;       *CPR* OUTPUTS THE CURSOR POSITION IN THE HEATH FORMAT
    2305/  7.153 :                      ;               ** ESC Y Pl Pc **
    2306/  7.153 :                      ;
    2307/  7.153 :                      ;
    2308/  7.153 :                      ;       ENTRY   NONE
    2309/  7.153 :                      ;
    2310/  7.153 :                      ;       EXIT    NONE
    2311/  7.153 :                      ;
    2312/  7.153 :                      ;       USES    A,B,C,H,L,F
    2313/  7.153 :                      
    2314/  7.153 : 315 100 015          CPR     CALL    PSOF            ; OUTPUT FIRST PART OF REPORT
    2315/  7.156 : 033 331                      DB      ESC,'Y'+200Q    ; ESC Y
    2316/  7.160 : 072 273 100                  LDA     CURVP           ; GET CURRENT LINE NUMBER
    2317/  7.163 : 306 040                      ADI     40Q             ; MAKE ASCII
    2318/  7.165 : 315 375 013                  CALL    PCOFT           ; PLACE LINE NUMBER IN FIFO
    2319/  7.170 : 072 272 100                  LDA     CURHP           ; GET CURRENT COLUMN NUMBER
    2320/  7.173 : 306 040                      ADI     40Q
    2321/  7.175 : 315 375 013                  CALL    PCOFT           ; PUT IN FIFO
    2322/  7.200 : 311                          RET
    2323/  7.201 :                      
    2324/  7.201 :                      ;;      CRT - CURSOR RIGHT
    2325/  7.201 :                      ;
    2326/  7.201 :                      ;       *CRT* MOVES THE CURSOR RIGHT ONE COLUMN.  IF ALREADY AT THE LAST
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 40 - 2024-05-01 01:09:39 PM


    2327/  7.201 :                      ;       COLUMN, THE CURSOR IS ADVANCED TO THE BEGINNING OF THE NEXT LINE.
    2328/  7.201 :                      ;       *CRT* WILL NOT ADVANCE THE CURSOR PAST COLUMN 79 OF LINE 23.
    2329/  7.201 :                      ;
    2330/  7.201 :                      ;
    2331/  7.201 :                      ;       ENTRY   NONE
    2332/  7.201 :                      ;
    2333/  7.201 :                      ;       EXIT    NONE
    2334/  7.201 :                      ;
    2335/  7.201 :                      ;       USES    A,H,L,F
    2336/  7.201 :                      
    2337/  7.201 :                      
    2338/  7.201 : 072 272 100          CRT     LDA     CURHP           ; GET CURRENT HORIZONTAL POSITION
    2339/  7.204 : 376 117                      CPI     79              ; CURSOR AT LAST COLUMN?
    2340/  7.206 : 310                          RZ                      ; EXIT IF AT END OF LINE
    2341/  7.207 :                      
    2342/  7.207 : 074                          INR     A               ; ELSE, INCREMENT CURSOR POSITION
    2343/  7.210 : 062 272 100                  STA     CURHP
    2344/  7.213 : 052 274 100                  LHLD    CURAD           ; GET CURSOR ADDRESS
    2345/  7.216 : 043                          INX     H               ; INCREMENT ADDRESS
    2346/  7.217 : 174                          MOV     A,H             ; STAY IN VIDEO RAM
    2347/  7.220 : 366 370                      ORI     VRAMS/256
    2348/  7.222 : 147                          MOV     H,A
    2349/  7.223 : 042 274 100                  SHLD    CURAD           ; UPDATE CURAD
    2350/  7.226 :                      
    2351/  7.226 : 311                          RET                     ; RETURN REGARDLESS
    2352/  7.227 :                      
    2353/  7.227 :                      ;;      CUP - CURSOR UP
    2354/  7.227 :                      ;
    2355/  7.227 :                      ;       *CUP* MOVES THE CURSOR UP ONE LINE ON THE DISPLAY.  *CUP* WILL
    2356/  7.227 :                      ;       NOT MOVE THE CURSOR PAST LINE ZERO
    2357/  7.227 :                      ;
    2358/  7.227 :                      ;
    2359/  7.227 :                      ;       ENTRY   NONE
    2360/  7.227 :                      ;
    2361/  7.227 :                      ;       EXIT     NONE
    2362/  7.227 :                      ;
    2363/  7.227 :                      ;       USES    A,B,C,D,E,H,L,F
    2364/  7.227 :                      
    2365/  7.227 :                      
    2366/  7.227 : 072 273 100          CUP     LDA     CURVP           ; GET CURRENT VERTICAL POSITION
    2367/  7.232 : 267                          ORA     A               ; CHECK FOR LINE ZERO
    2368/  7.233 : 310                          RZ                      ; IF LINE ZERO, EXIT WITHOUT MOVING CURSOR
    2369/  7.234 :                      
    2370/  7.234 :                      ;       JMP     PRLF            ; DO A REVERSE LINE FEED
    2371/  7.234 :                      ;       ERRNZ   $-PRLF
    2372/  7.234 :                      
    2373/  7.234 :                      ;;      PRLF - PERFORM A REVERSE LINE FEED
    2374/  7.234 :                      ;
    2375/  7.234 :                      ;       *PRLF* MOVES THE CURSOR UP ONE LINE IN THE VIDEO MEMORY.  IF THE
    2376/  7.234 :                      ;       CURSOR WAS ALREADY ON THE TOP LINE OF THE DISPLAY, THE DISPLAY IS
    2377/  7.234 :                      ;       SCROLLED DOWN AND THE NEW LINE IS FILLED WITH SPACES.
    2378/  7.234 :                      ;
    2379/  7.234 :                      ;
    2380/  7.234 :                      ;       ENTRY   NONE
    2381/  7.234 :                      ;
    2382/  7.234 :                      ;       EXIT    NONE
    2383/  7.234 :                      ;
    2384/  7.234 :                      ;       USES    A,B,C,D,E,H,L,F
    2385/  7.234 :                      
    2386/  7.234 :                      
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 41 - 2024-05-01 01:09:39 PM


    2387/  7.234 : 072 273 100          PRLF    LDA     CURVP           ; GET VERTICAL POSITION
    2388/  7.237 : 376 030                      CPI     24              ; 25TH LINE?
    2389/  7.241 : 310                          RZ                      ; IF SO, FORGET RLF
    2390/  7.242 :                      
    2391/  7.242 : 021 260 377          PRLF0.2 LXI     D,-80           ; (D,E) = TWOS COMPLEMENT OF 80
    2392/  7.245 : 052 270 100                  LHLD    CLSA            ; GET CURRENT LINE ADDRESS
    2393/  7.250 : 031                          DAD     D               ; SUBTRACT ONE LINE
    2394/  7.251 : 174                          MOV     A,H             ; STAY IN VIDEO RAM
    2395/  7.252 : 366 370                      ORI     VRAMS/256
    2396/  7.254 : 147                          MOV     H,A
    2397/  7.255 : 042 270 100                  SHLD    CLSA            ; UPDATE LINE ADDRESS
    2398/  7.260 : 072 273 100                  LDA     CURVP           ; GET CURRENT DISPLAYED LINE NUMBER
    2399/  7.263 : 267                          ORA     A               ; CHECK FOR LINE ZERO
    2400/  7.264 :                              CPU     Z80
    2401/  7.264 : 040 067                      JR      NZ,PRLF1        ; IF NOT ON LINE ZERO
    2402/  7.266 :                              CPU     8080
    2403/  7.266 :                      
    2404/  7.266 : 072 311 100                  LDA     MODEI           ; GET MODE FLAGS
    2405/  7.271 : 346 200                      ANI     MI.25L          ; IS 25TH LINE ON?
    2406/  7.273 :                              CPU     Z80
    2407/  7.273 : 050 021                      JR      Z,PRLF0.5       ; IF NOT ON
    2408/  7.275 :                              CPU     8080
    2409/  7.275 :                      
    2410/  7.275 :                      ;       25TH LINE IS ON, COPY TO 24TH BEFORE DISPLAY IS MOVED
    2411/  7.275 :                      ;
    2412/  7.275 : 052 266 100                  LHLD    SHOME           ; GET HOME ADDRESS
    2413/  7.300 : 021 060 007                  LXI     D,23*80         ; FIND ADDRESS OF LINE #23
    2414/  7.303 : 031                          DAD     D
    2415/  7.304 : 353                          XCHG                    ; (D,E) = BEGINNING OF LINE 23
    2416/  7.305 : 041 120 000                  LXI     H,80            ; FIND ADDRESS OF LINE #24
    2417/  7.310 : 031                          DAD     D
    2418/  7.311 : 006 005                      MVI     B,80/16         ; COPY ONE LINE
    2419/  7.313 : 315 040 010                  CALL    CPM16
    2420/  7.316 :                      
    2421/  7.316 :                      ;       ERASE TOP LINE
    2422/  7.316 :                      ;
    2423/  7.316 : 052 270 100          PRLF0.5 LHLD    CLSA            ; LINE ZERO ADDRESS TO (H,L) FOR ERASE
    2424/  7.321 : 006 005                      MVI     B,5             ; ERASE LINE (5*16) SPACES
    2425/  7.323 : 315 212 016                  CALL    WSVA
    2426/  7.326 : 052 266 100                  LHLD    SHOME           ; GET OLD HOME POSITION
    2427/  7.331 : 021 260 377                  LXI     D,-80
    2428/  7.334 : 031                          DAD     D               ; SUBTRACT ONE LINE
    2429/  7.335 : 174                          MOV     A,H             ; STAY IN VIDEO RAM
    2430/  7.336 : 366 370                      ORI     VRAMS/256
    2431/  7.340 : 147                          MOV     H,A
    2432/  7.341 : 042 266 100                  SHLD    SHOME           ; UPDATE HOME POSITION
    2433/  7.344 : 174                          MOV     A,H             ; SET HOME POSITION FOR CRTC
    2434/  7.345 : 346 007                      ANI     HOMAX/256
    2435/  7.347 : 147                          MOV     H,A
    2436/  7.350 : 042 301 100                  SHLD    VI.SA
    2437/  7.353 :                              CPU     Z80
    2438/  7.353 : 030 004                      JR      PRLF2           ; UPDATE CURSOR
    2439/  7.355 :                              CPU     8080
    2440/  7.355 :                      
    2441/  7.355 : 075                  PRLF1   DCR     A               ; DECREMENT LINE COUNTER
    2442/  7.356 : 062 273 100                  STA     CURVP
    2443/  7.361 :                      
    2444/  7.361 : 052 274 100          PRLF2   LHLD    CURAD           ; GET CURRENT CURSOR ADDRESS
    2445/  7.364 : 031                          DAD     D               ; SUBTRACT ONE LINE
    2446/  7.365 : 174                          MOV     A,H             ; STAY IN VIDEO RAM
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 42 - 2024-05-01 01:09:39 PM


    2447/  7.366 : 366 370                      ORI     VRAMS/256
    2448/  7.370 : 147                          MOV     H,A
    2449/  7.371 : 042 274 100                  SHLD    CURAD           ; UPDATE CURSOR ADDRESS
    2450/  7.374 :                      
    2451/  7.374 : 303 146 016                  JMP     UCP.            ; EXIT
    2452/  7.377 :                      
    2453/  7.377 :                      ;;      EID - ERASE IN DISPLAY
    2454/  7.377 :                      ;
    2455/  7.377 :                      ;       *EID* ERASES THE AMOUNT OF THE SCREEN SPECIFIED BY PN
    2456/  7.377 :                      ;
    2457/  7.377 :                      ;
    2458/  7.377 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    2459/  7.377 :                      ;               (D,E) = PSDW
    2460/  7.377 :                      ;
    2461/  7.377 :                      ;       EXIT    NONE
    2462/  7.377 :                      ;
    2463/  7.377 :                      ;       USES    A,B,C,D,E,H,L,F
    2464/  7.377 :                      
    2465/  7.377 :                      
    2466/  7.377 : 170                  EID     MOV     A,B             ; SEE IF PN WAS INPUT
    2467/ 10.000 : 267                          ORA     A
    2468/ 10.001 : 312 317 011                  JZ      ERM             ; IF NO PN, ERASE TO END OF SCREEN
    2469/ 10.004 :                      
    2470/ 10.004 : 353                          XCHG                    ; (H,L) = PSDW
    2471/ 10.005 : 176                          MOV     A,M             ; GET PN
    2472/ 10.006 : 267                          ORA     A               ; ZERO?
    2473/ 10.007 : 312 317 011                  JZ      ERM             ; IF ZERO, ERASE TO END OF PAGE
    2474/ 10.012 :                      
    2475/ 10.012 : 075                          DCR     A               ; ONE?
    2476/ 10.013 : 312 315 010                  JZ      EBD             ; IF ONE, ERASE BEGINNING OF DISPLAY
    2477/ 10.016 :                      
    2478/ 10.016 : 075                          DCR     A               ; TWO?
    2479/ 10.017 : 300                          RNZ                     ; IF NOT TWO, EXIT
    2480/ 10.020 :                      
    2481/ 10.020 :                      ;       JMP     CLR             ; ELSE, CLEAR DISPLAY
    2482/ 10.020 :                      ;       ERRNZ   $-CLR
    2483/ 10.020 :                      
    2484/ 10.020 :                      ;;      CLR - CLEAR
    2485/ 10.020 :                      ;
    2486/ 10.020 :                      ;       *CLR* PLACES THE SOFTWARE HOME POSITION BACK TO THE HARDWARE
    2487/ 10.020 :                      ;       HOME POSITION (BEGINNING OF VIDEO RAM) AND WRITES ASCII SPACES
    2488/ 10.020 :                      ;       INTO THE FIRST 1920 BYTES (24 LINES X 80 CHARACTERS)
    2489/ 10.020 :                      ;
    2490/ 10.020 :                      ;
    2491/ 10.020 :                      ;       ENTRY   NONE
    2492/ 10.020 :                      ;
    2493/ 10.020 :                      ;       EXIT    NONE
    2494/ 10.020 :                      ;
    2495/ 10.020 :                      ;       USES    A,B,C,D,E,H,L,F
    2496/ 10.020 :                      
    2497/ 10.020 :                      
    2498/ 10.020 : 072 273 100          CLR     LDA     CURVP           ; GET VERTICAL POSITION
    2499/ 10.023 : 376 030                      CPI     24              ; SEE IF ON 25TH LINE
    2500/ 10.025 : 312 051 011                  JZ      EEL             ; IF SO, JUST ERASE LINE
    2501/ 10.030 :                      
    2502/ 10.030 : 315 271 015                  CALL    SCH             ; SET CURSOR TO HOME POSITION (H,L) = CURAD
    2503/ 10.033 : 006 170                      MVI     B,1920/16       ; ERASE 24 LINES WORTH OF CHARACTERS
    2504/ 10.035 : 303 212 016                  JMP     WSVA
    2505/ 10.040 :                      
    2506/ 10.040 :                      ;;      CPM16 - COPY MEMORY - MODULO SIXTEEN
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 43 - 2024-05-01 01:09:39 PM


    2507/ 10.040 :                      ;
    2508/ 10.040 :                      ;       *CPM16* COPIES SIXTEEN BYTES FROM AND TO VIDEO RAM.  FROM AND TO
    2509/ 10.040 :                      ;       ADDRESSES MUST BE AT THE BEGINNING OF A LINE/
    2510/ 10.040 :                      ;
    2511/ 10.040 :                      ;
    2512/ 10.040 :                      ;       ENTRY   (H,L) = ADDRESS TO COPY FROM
    2513/ 10.040 :                      ;               (D,E) = ADDRESS TO COPY TO
    2514/ 10.040 :                      ;                 (B) = NUMBER OF BYTES TO COPY /16
    2515/ 10.040 :                      ;
    2516/ 10.040 :                      ;       EXIT    NONE
    2517/ 10.040 :                      ;
    2518/ 10.040 :                      ;       USES    A,B,D,E,H,L,F
    2519/ 10.040 :                      
    2520/ 10.040 : 172                  CPM16   MOV     A,D             ; KEEP BOTH ADDRESSES IN VIDEO RAM AREA
    2521/ 10.041 : 366 370                      ORI     VRAMS/256
    2522/ 10.043 : 127                          MOV     D,A
    2523/ 10.044 : 174                          MOV     A,H
    2524/ 10.045 : 366 370                      ORI     VRAMS/256
    2525/ 10.047 : 147                          MOV     H,A
    2526/ 10.050 :                      
    2527/ 10.050 :                      ;       COPY SIXTEEN BYTES
    2528/ 10.050 :                      ;
    2529/ 10.050 : 176                          MOV     A,M             ; GET BYTE FROM FIRST LINE
    2530/ 10.051 : 022                          STAX    D               ; PUT IN SAME COLUMN AS OTHER LINE
    2531/ 10.052 : 043                          INX     H               ; POINT TO NEXT COLUMN ON BOTH LINES
    2532/ 10.053 : 023                          INX     D
    2533/ 10.054 :                      
    2534/ 10.054 : 176                          MOV     A,M             ; *2
    2535/ 10.055 : 022                          STAX    D
    2536/ 10.056 : 043                          INX     H
    2537/ 10.057 : 023                          INX     D
    2538/ 10.060 :                      
    2539/ 10.060 : 176                          MOV     A,M             ; *3
    2540/ 10.061 : 022                          STAX    D
    2541/ 10.062 : 043                          INX     H
    2542/ 10.063 : 023                          INX     D
    2543/ 10.064 :                      
    2544/ 10.064 : 176                          MOV     A,M             ; *4
    2545/ 10.065 : 022                          STAX    D
    2546/ 10.066 : 043                          INX     H
    2547/ 10.067 : 023                          INX     D
    2548/ 10.070 :                      
    2549/ 10.070 : 176                          MOV     A,M             ; *5
    2550/ 10.071 : 022                          STAX    D
    2551/ 10.072 : 043                          INX     H
    2552/ 10.073 : 023                          INX     D
    2553/ 10.074 :                      
    2554/ 10.074 : 176                          MOV     A,M             ; *6
    2555/ 10.075 : 022                          STAX    D
    2556/ 10.076 : 043                          INX     H
    2557/ 10.077 : 023                          INX     D
    2558/ 10.100 :                      
    2559/ 10.100 : 176                          MOV     A,M             ; *7
    2560/ 10.101 : 022                          STAX    D
    2561/ 10.102 : 043                          INX     H
    2562/ 10.103 : 023                          INX     D
    2563/ 10.104 :                      
    2564/ 10.104 : 176                          MOV     A,M             ; *8
    2565/ 10.105 : 022                          STAX    D
    2566/ 10.106 : 043                          INX     H
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 44 - 2024-05-01 01:09:39 PM


    2567/ 10.107 : 023                          INX     D
    2568/ 10.110 :                      
    2569/ 10.110 : 176                          MOV     A,M             ; *9
    2570/ 10.111 : 022                          STAX    D
    2571/ 10.112 : 043                          INX     H
    2572/ 10.113 : 023                          INX     D
    2573/ 10.114 :                      
    2574/ 10.114 : 176                          MOV     A,M             ; *10
    2575/ 10.115 : 022                          STAX    D
    2576/ 10.116 : 043                          INX     H
    2577/ 10.117 : 023                          INX     D
    2578/ 10.120 :                      
    2579/ 10.120 : 176                          MOV     A,M             ; *11
    2580/ 10.121 : 022                          STAX    D
    2581/ 10.122 : 043                          INX     H
    2582/ 10.123 : 023                          INX     D
    2583/ 10.124 :                      
    2584/ 10.124 : 176                          MOV     A,M             ; *12
    2585/ 10.125 : 022                          STAX    D
    2586/ 10.126 : 043                          INX     H
    2587/ 10.127 : 023                          INX     D
    2588/ 10.130 :                      
    2589/ 10.130 : 176                          MOV     A,M             ; *13
    2590/ 10.131 : 022                          STAX    D
    2591/ 10.132 : 043                          INX     H
    2592/ 10.133 : 023                          INX     D
    2593/ 10.134 :                      
    2594/ 10.134 : 176                          MOV     A,M             ; *14
    2595/ 10.135 : 022                          STAX    D
    2596/ 10.136 : 043                          INX     H
    2597/ 10.137 : 023                          INX     D
    2598/ 10.140 :                      
    2599/ 10.140 : 176                          MOV     A,M             ; *15
    2600/ 10.141 : 022                          STAX    D
    2601/ 10.142 : 043                          INX     H
    2602/ 10.143 : 023                          INX     D
    2603/ 10.144 :                      
    2604/ 10.144 : 176                          MOV     A,M             ; *16
    2605/ 10.145 : 022                          STAX    D
    2606/ 10.146 : 043                          INX     H
    2607/ 10.147 : 023                          INX     D
    2608/ 10.150 :                      
    2609/ 10.150 :                              CPU     Z80
    2610/ 10.150 : 020 266                      DJNZ    CPM16
    2611/ 10.152 :                              CPU     8080
    2612/ 10.152 : 311                          RET                     ; TIL DONE
    2613/ 10.153 :                      
    2614/ 10.153 :                      ;;      D25L - DISABLE 25TH LINE
    2615/ 10.153 :                      ;
    2616/ 10.153 :                      ;       *D25L* DISABLES THE DISPLAY OF THE 25TH LINE
    2617/ 10.153 :                      ;
    2618/ 10.153 :                      ;
    2619/ 10.153 :                      ;       ENTRY   NONE
    2620/ 10.153 :                      ;
    2621/ 10.153 :                      ;       EXIT    NONE
    2622/ 10.153 :                      ;
    2623/ 10.153 :                      ;       USES    A,F
    2624/ 10.153 :                      
    2625/ 10.153 :                      
    2626/ 10.153 : 072 311 100          D25L    LDA     MODEI           ; GET MODE FLAGS
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 45 - 2024-05-01 01:09:39 PM


    2627/ 10.156 : 346 177                      ANI     255-MI.25L      ; CLEAR 25TH LINE FLAG
    2628/ 10.160 : 062 311 100                  STA     MODEI
    2629/ 10.163 : 076 030                      MVI     A,24
    2630/ 10.165 : 062 276 100                  STA     VI.VD           ; UPDATE VIDEO DISPLAYED INFO FOR NMI
    2631/ 10.170 : 311                          RET
    2632/ 10.171 :                      
    2633/ 10.171 :                      ;;      DALF - DISABLE AUTO LINE FEED
    2634/ 10.171 :                      ;
    2635/ 10.171 :                      ;       *DALF* DISABLES A CARRIAGE RETURN CAUSING AN AUTOMATIC LINE FEED
    2636/ 10.171 :                      ;
    2637/ 10.171 :                      ;
    2638/ 10.171 :                      ;       ENTRY   (B,C) = MODEB
    2639/ 10.171 :                      ;
    2640/ 10.171 :                      ;       EXIT    NONE
    2641/ 10.171 :                      ;
    2642/ 10.171 :                      ;       USES    A,F
    2643/ 10.171 :                      
    2644/ 10.171 :                      
    2645/ 10.171 : 012                  DALF    LDAX    B               ; GET MODE FLAGS
    2646/ 10.172 : 346 367                      ANI     255-MB.ALF      ; CLEAR AUTO LINE FEED
    2647/ 10.174 : 002                          STAX    B
    2648/ 10.175 : 311                          RET
    2649/ 10.176 :                      
    2650/ 10.176 :                      ;;      DC - DISABLE CURSOR
    2651/ 10.176 :                      ;
    2652/ 10.176 :                      ;       *DC* INHIBITS THE DISPLAY OF THE CURSOR.  ALL OTHER FUNCTIONS
    2653/ 10.176 :                      ;       PERFORM AS THEY WOULD IF THE CURSOR WERE ON
    2654/ 10.176 :                      ;
    2655/ 10.176 :                      ;
    2656/ 10.176 :                      ;       ENTRY   NONE
    2657/ 10.176 :                      ;
    2658/ 10.176 :                      ;       EXIT    NONE
    2659/ 10.176 :                      ;
    2660/ 10.176 :                      ;       USES    A
    2661/ 10.176 :                      
    2662/ 10.176 :                      
    2663/ 10.176 : 072 307 100          DC      LDA     MODEA           ; GET MODE FLAGS
    2664/ 10.201 : 366 020                      ORI     MA.CD           ; SET CURSOR DISABLED
    2665/ 10.203 : 062 307 100                  STA     MODEA
    2666/ 10.206 : 046 040                      MVI     H,VB.CND        ; CURSOR NOT DISPLAYED
    2667/ 10.210 : 056 000                      MVI     L,0             ; SET CURSOR END ADDRESS TO ZERO
    2668/ 10.212 : 042 277 100                  SHLD    VI.CSE
    2669/ 10.215 : 311                          RET
    2670/ 10.216 :                      
    2671/ 10.216 :                      ;;      DEOL - DISCARD AT END OF LINE
    2672/ 10.216 :                      ;
    2673/ 10.216 :                      ;       *DEOL* RESETS THE WRAP AROUND AT END OF LINE FLAG.  CHARACTERS
    2674/ 10.216 :                      ;       INCOMING CHARACTERS PAST COLUMN 79 ARE PLACED IN COLUMN 79 UNTIL
    2675/ 10.216 :                      ;       A CARRIAGE RETURN IS RECEIVED
    2676/ 10.216 :                      ;
    2677/ 10.216 :                      ;
    2678/ 10.216 :                      ;       ENTRY   (B,C) = MODEB
    2679/ 10.216 :                      ;
    2680/ 10.216 :                      ;       EXIT    NONE
    2681/ 10.216 :                      ;
    2682/ 10.216 :                      ;       USES    A,F
    2683/ 10.216 :                      
    2684/ 10.216 :                      
    2685/ 10.216 : 012                  DEOL    LDAX    B               ; GET MODE FLAGS
    2686/ 10.217 : 346 373                      ANI     255-MB.WRAP     ; CLEAR WRAP AROUND FLAG
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 46 - 2024-05-01 01:09:39 PM


    2687/ 10.221 : 002                          STAX    B
    2688/ 10.222 : 311                          RET
    2689/ 10.223 :                      
    2690/ 10.223 :                      ;;      DING - DING BELL
    2691/ 10.223 :                      ;
    2692/ 10.223 :                      ;
    2693/ 10.223 :                      ;       ENTRY   NONE
    2694/ 10.223 :                      ;
    2695/ 10.223 :                      ;       EXIT    NONE
    2696/ 10.223 :                      ;
    2697/ 10.223 :                      ;       USES    NONE
    2698/ 10.223 :                      
    2699/ 10.223 :                      
    2700/ 10.223 : =10.223O             DING    EQU     $
    2701/ 10.223 : 323 340                      OUT     MP.BELL
    2702/ 10.225 : 311                          RET
    2703/ 10.226 :                      
    2704/ 10.226 :                      ;;      DKI - DISABLE KEYBOARD INPUT
    2705/ 10.226 :                      ;
    2706/ 10.226 :                      ;       *DKI* CAUSES ALL KEYBOARD ENTRIES TO BE IGNORED
    2707/ 10.226 :                      ;
    2708/ 10.226 :                      ;
    2709/ 10.226 :                      ;       ENTRY   NONE
    2710/ 10.226 :                      ;
    2711/ 10.226 :                      ;       EXIT    NONE
    2712/ 10.226 :                      ;
    2713/ 10.226 :                      ;       USES    A,F
    2714/ 10.226 :                      
    2715/ 10.226 :                      
    2716/ 10.226 : 072 311 100          DKI     LDA     MODEI           ; GET PROPER MODE FLAGS
    2717/ 10.231 : 366 004                      ORI     MI.KID          ; SET KEYBOARD INPUT DISABLED
    2718/ 10.233 : 062 311 100                  STA     MODEI
    2719/ 10.236 : 311                          RET
    2720/ 10.237 :                      
    2721/ 10.237 :                      ;;      E25L - ENABLE 25TH LINE
    2722/ 10.237 :                      ;
    2723/ 10.237 :                      ;       *E25L* ENABLES THE DISPLAY OF THE 25TH LINE ONLY IF IT HAS NOT
    2724/ 10.237 :                      ;       BEEN PREVIOUSLY ENABLED.  THE 25TH LINE IS CLEARED AT THE TIME
    2725/ 10.237 :                      ;       IT IS ENABLED.
    2726/ 10.237 :                      ;
    2727/ 10.237 :                      ;
    2728/ 10.237 :                      ;       ENTRY   NONE
    2729/ 10.237 :                      ;
    2730/ 10.237 :                      ;       EXIT    NONE
    2731/ 10.237 :                      ;
    2732/ 10.237 :                      ;       USES    A,B,C,D,E,H,L,F
    2733/ 10.237 :                      
    2734/ 10.237 :                      
    2735/ 10.237 : 072 311 100          E25L    LDA     MODEI           ; GET MODE FLAGS
    2736/ 10.242 : 107                          MOV     B,A             ; SAVE
    2737/ 10.243 : 346 200                      ANI     MI.25L          ; SEE IF 25TH LINE ALREADY ON
    2738/ 10.245 : 300                          RNZ                     ; IF ON
    2739/ 10.246 :                      
    2740/ 10.246 : 076 200                      MVI     A,MI.25L        ; ELSE, SET FLAG
    2741/ 10.250 : 260                          ORA     B
    2742/ 10.251 : 062 311 100                  STA     MODEI
    2743/ 10.254 : 052 266 100                  LHLD    SHOME           ; SET CURRENT HOME POSITION
    2744/ 10.257 : 021 200 007                  LXI     D,1920          ; ADD 24 LINE SIZE FOR BEGINNING OF 25TH
    2745/ 10.262 : 031                          DAD     D               ; (H,L) = STARTING ADDRESS OF LINE 25
    2746/ 10.263 : 006 005                      MVI     B,80/16         ; SET MODULO 16 COUNT FOR ERASE
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 47 - 2024-05-01 01:09:39 PM


    2747/ 10.265 : 315 212 016                  CALL    WSVA.           ; ERASE LINE
    2748/ 10.270 :                      
    2749/ 10.270 : 076 031                      MVI     A,25            ; SET VERTICAL DISPLAYED INFO TO 25 LINES
    2750/ 10.272 : 062 276 100                  STA     VI.VD
    2751/ 10.275 : 311                          RET
    2752/ 10.276 :                      
    2753/ 10.276 :                      ;;      EACR - ENTER AUTO CARRIAGE RETURN
    2754/ 10.276 :                      ;
    2755/ 10.276 :                      ;       *EACR* ENABLES THE TERMINAL TO PERFORM AN AUTOMATIC CARRIAGE
    2756/ 10.276 :                      ;       RETURN UPON RECEIPT OF A LINE FEED CHARACTER
    2757/ 10.276 :                      ;
    2758/ 10.276 :                      ;
    2759/ 10.276 :                      ;       ENTRY   (B,C) = MODEB
    2760/ 10.276 :                      ;
    2761/ 10.276 :                      ;       EXIT    NONE
    2762/ 10.276 :                      ;
    2763/ 10.276 :                      ;       USES    A,F
    2764/ 10.276 :                      
    2765/ 10.276 :                      
    2766/ 10.276 : 012                  EACR    LDAX    B               ; GET MODE FLAGS
    2767/ 10.277 : 366 020                      ORI     MB.ACR          ; SET AUTO CARRIAGE RETURN
    2768/ 10.301 : 002                          STAX    B
    2769/ 10.302 : 311                          RET
    2770/ 10.303 :                      
    2771/ 10.303 :                      ;;      EALF - ENABLE AUTO LINE FEED
    2772/ 10.303 :                      ;
    2773/ 10.303 :                      ;       *EALF* ENABLED THE TERMINAL TO PERFORM AN AUTOMATIC LINE FEED
    2774/ 10.303 :                      ;       UPON RECEIPT OF A CARRIAGE RETURN
    2775/ 10.303 :                      ;
    2776/ 10.303 :                      ;
    2777/ 10.303 :                      ;       ENTRY   (B, C) = MODEB
    2778/ 10.303 :                      ;
    2779/ 10.303 :                      ;       EXIT    NONE
    2780/ 10.303 :                      ;
    2781/ 10.303 :                      ;       USES    A,F
    2782/ 10.303 :                      
    2783/ 10.303 :                      
    2784/ 10.303 : 012                  EALF    LDAX    B               ; GET MODE FLAGS
    2785/ 10.304 : 366 010                      ORI     MB.ALF
    2786/ 10.306 : 002                          STAX    B
    2787/ 10.307 : 311                          RET
    2788/ 10.310 :                      
    2789/ 10.310 :                      ;;      EAM - ENTER ANSI MODE
    2790/ 10.310 :                      ;
    2791/ 10.310 :                      ;       *EAM* PLACES THE TERMINAL IN THE ANSI MODE FOR ESCAPE CODE.
    2792/ 10.310 :                      ;
    2793/ 10.310 :                      ;
    2794/ 10.310 :                      ;       ENTRY   (B,C) = MODEB
    2795/ 10.310 :                      ;
    2796/ 10.310 :                      ;       EXIT    NONE
    2797/ 10.310 :                      ;
    2798/ 10.310 :                      ;       USES    A,F
    2799/ 10.310 :                      
    2800/ 10.310 :                      
    2801/ 10.310 : 012                  EAM     LDAX    B               ; GET MODE FLAGS
    2802/ 10.311 : 366 040                      ORI     MB.ANSI         ; GET ANSI MODE FLAG
    2803/ 10.313 : 002                          STAX    B
    2804/ 10.314 : 311                          RET
    2805/ 10.315 :                      
    2806/ 10.315 :                      ;;      EBD - ERASE BEGINNING OF DISPLAY
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 48 - 2024-05-01 01:09:39 PM


    2807/ 10.315 :                      ;
    2808/ 10.315 :                      ;       *EBD* ERASES THE SCREEN FROM 'HOME' TO THE CURRENT CURSOR POSITION
    2809/ 10.315 :                      ;
    2810/ 10.315 :                      ;
    2811/ 10.315 :                      ;       ENTRY   NONE
    2812/ 10.315 :                      ;
    2813/ 10.315 :                      ;       EXIT    NONE
    2814/ 10.315 :                      ;
    2815/ 10.315 :                      ;       USES    A,B,C,D,E,H,L,F
    2816/ 10.315 :                      
    2817/ 10.315 :                      
    2818/ 10.315 : =10.315O             EBD     EQU     $
    2819/ 10.315 : 072 273 100                  LDA     CURVP           ; GET VERTICAL POSITION
    2820/ 10.320 : 376 030                      CPI     24              ; SEE IF ON 25TH LINE
    2821/ 10.322 :                              CPU     Z80
    2822/ 10.322 : 050 026                      JR      Z,EBL           ; IF SO, JUST DO BEGINNING OF THIS LINE
    2823/ 10.324 :                              CPU     8080
    2824/ 10.324 :                      
    2825/ 10.324 :                      ;       ERASE ALL LINES ABOVE CURRENT LINE
    2826/ 10.324 :                      ;
    2827/ 10.324 : 072 273 100                  LDA     CURVP           ; GET CURRENT LINE NUMBER
    2828/ 10.327 : 267                          ORA     A               ; SEE IF ALREADY ON HOME LINE
    2829/ 10.330 :                              CPU     Z80
    2830/ 10.330 : 050 020                      JR      Z,EBD1          ; IF SO, NO FULL LINES TO ERASE
    2831/ 10.332 :                              CPU     8080
    2832/ 10.332 :                      
    2833/ 10.332 : 157                          MOV     L,A             ; MULTIPLY LINE COUNT BY 5 FOR MODULO 16 COLUMNS
    2834/ 10.333 : 137                          MOV     E,A
    2835/ 10.334 : 046 000                      MVI     H,0
    2836/ 10.336 : 127                          MOV     D,A
    2837/ 10.337 : 031                          DAD     D               ; *2
    2838/ 10.340 : 031                          DAD     D               ; *3
    2839/ 10.341 : 031                          DAD     D               ; *4
    2840/ 10.342 : 031                          DAD     D               ; *5
    2841/ 10.343 : 105                          MOV     B,L             ; (B) = RESULT
    2842/ 10.344 : 052 266 100                  LHLD    SHOME           ; (H,L) = FIRST ADDRESS TO SPACE
    2843/ 10.347 : 315 212 016                  CALL    WSVA            ; WRITE SPACES
    2844/ 10.352 :                      
    2845/ 10.352 : =10.352O             EBD1    EQU     $
    2846/ 10.352 :                      ;       JMP     EBL             ; ERASE BEGINNING OF CURRENT LINE
    2847/ 10.352 :                      ;       ERRNZ   $-EBL
    2848/ 10.352 :                      
    2849/ 10.352 :                      ;;      EBL - ERASE BEGINNING OF LINE
    2850/ 10.352 :                      ;
    2851/ 10.352 :                      ;       *EBL* ERASES FROM THE BEGINNING OF THE CURRENT LINE TO THE CURSOR
    2852/ 10.352 :                      ;
    2853/ 10.352 :                      ;
    2854/ 10.352 :                      ;       ENTRY   NONE
    2855/ 10.352 :                      ;
    2856/ 10.352 :                      ;       EXIT    NONE
    2857/ 10.352 :                      ;
    2858/ 10.352 :                      ;       USES    A,B,H,L,D
    2859/ 10.352 :                      
    2860/ 10.352 :                      
    2861/ 10.352 : 052 270 100          EBL     LHLD    CLSA            ; GET ADDRESS OF FIRST COLUMN ON THIS LINE
    2862/ 10.355 : 072 272 100                  LDA     CURHP           ; GET COLUMN COUNT
    2863/ 10.360 : 074                          INR     A               ; ADD ONE FOR THE CURSOR POSITION
    2864/ 10.361 : 107                          MOV     B,A             ; (B) = COUNT
    2865/ 10.362 :                      
    2866/ 10.362 : 076 040                      MVI     A,' '           ; WRITE SPACES
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 49 - 2024-05-01 01:09:39 PM


    2867/ 10.364 : 167                  EBL1    MOV     M,A             ; PUT SPACE IN DISPLAY
    2868/ 10.365 : 043                          INX     H               ; POINT TO NEXT
    2869/ 10.366 :                              CPU     Z80
    2870/ 10.366 : 020 374                      DJNZ    EBL1            ; UNTIL DONE
    2871/ 10.370 :                              CPU     8080
    2872/ 10.370 :                      
    2873/ 10.370 : 311                          RET
    2874/ 10.371 :                      
    2875/ 10.371 :                      ;;      EC - ENABLE CURSOR
    2876/ 10.371 :                      ;
    2877/ 10.371 :                      ;       *EC* ENABLED THE DISPLAY OF THE CURSOR
    2878/ 10.371 :                      ;
    2879/ 10.371 :                      ;       ENTRY   NONE
    2880/ 10.371 :                      ;
    2881/ 10.371 :                      ;       EXIT    NONE
    2882/ 10.371 :                      ;
    2883/ 10.371 :                      ;       USES    A,F
    2884/ 10.371 :                      
    2885/ 10.371 :                      
    2886/ 10.371 : 072 307 100          EC      LDA     MODEA           ; GET MODE FLAGS
    2887/ 10.374 : 346 357                      ANI     255-MA.CD       ; SHOW CURSOR AS NOT DISABLED
    2888/ 10.376 : 062 307 100                  STA     MODEA
    2889/ 11.001 : 072 310 100                  LDA     MODEB           ; GET OTHER MODE FLAGS
    2890/ 11.004 : 346 001                      ANI     MB.CBLK         ; BLOCK CURSOR SELECTED?
    2891/ 11.006 : 302 261 015                  JNZ     SBC.            ; IF BLOCK SELECTED, SET IT
    2892/ 11.011 :                      
    2893/ 11.011 : 303 026 016                  JMP     SUC.            ; ELSE, SET UNDERSCORE CURSOR
    2894/ 11.014 :                      
    2895/ 11.014 :                      ;;      EDD - ENCODE DECIMAL DIGITS
    2896/ 11.014 :                      ;
    2897/ 11.014 :                      ;       *EDD* ENCODES TWO DECIMAL DIGITS FROM THE BINARY VALUE SUPPLIED.
    2898/ 11.014 :                      ;       THE DECIMAL DIGITS ARE IN THE FORM OF TWO BCD BYTES (NOT ASCII).
    2899/ 11.014 :                      ;
    2900/ 11.014 :                      ;
    2901/ 11.014 :                      ;       ENTRY   (A) = BINARY VALUE TO BE DECODED
    2902/ 11.014 :                      ;
    2903/ 11.014 :                      ;       EXIT    (D) = DECIMAL TENS DIGIT (IN BCD)
    2904/ 11.014 :                      ;               (E) = DECIMAL ONES DIGIT (IN BCD)
    2905/ 11.014 :                      ;
    2906/ 11.014 :                      ;       USES    A,D,E
    2907/ 11.014 :                      
    2908/ 11.014 :                      
    2909/ 11.014 : 026 000              EDD     MVI     D,0             ; CLEAR DECIMAL COUNTERS
    2910/ 11.016 : 376 012              EDD1    CPI     10              ; SEE IF BINARY IS MORE THAN NINE
    2911/ 11.020 :                              CPU     Z80
    2912/ 11.020 : 070 005                      JR      C,EDD2          ; IF LESS THAN TEN
    2913/ 11.022 :                              CPU     8080
    2914/ 11.022 :                      
    2915/ 11.022 : 326 012                      SUI     10              ; ELSE, SUBTRACT TEN FROM BINARY
    2916/ 11.024 : 024                          INR     D               ; ADD ONE TO TENS DIGIT
    2917/ 11.025 :                              CPU     Z80
    2918/ 11.025 : 030 367                      JR      EDD1            ; SEE IF MORE TENS
    2919/ 11.027 :                              CPU     8080
    2920/ 11.027 :                      
    2921/ 11.027 : 137                  EDD2    MOV     E,A             ; LEFTOVERS ARE ONES DIGIT
    2922/ 11.030 : 311                          RET
    2923/ 11.031 :                      
    2924/ 11.031 :                      ;;      EIL - ERASE IN LINE
    2925/ 11.031 :                      ;
    2926/ 11.031 :                      ;       *EIL* ERASES THE PORTION OF THE CURRENT LINE AS SPECIFIED BY PN
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 50 - 2024-05-01 01:09:39 PM


    2927/ 11.031 :                      ;
    2928/ 11.031 :                      ;
    2929/ 11.031 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    2930/ 11.031 :                      ;               (D,E) = PSDW
    2931/ 11.031 :                      ;
    2932/ 11.031 :                      ;       EXIT    NONE
    2933/ 11.031 :                      ;
    2934/ 11.031 :                      ;       USES    A,B,C,D,E,H,L,F
    2935/ 11.031 :                      
    2936/ 11.031 :                      
    2937/ 11.031 : 170                  EIL     MOV     A,B             ; SEE IF PN WAS INPUT
    2938/ 11.032 : 267                          ORA     A
    2939/ 11.033 : 312 277 011                  JZ      EOL             ; IF NO PN, ERASE TO END OF LINE
    2940/ 11.036 :                      
    2941/ 11.036 : 353                          XCHG                    ; (H,L) = PSDW
    2942/ 11.037 : 176                          MOV     A,M             ; GET PN
    2943/ 11.040 : 267                          ORA     A               ; ZERO?
    2944/ 11.041 : 312 277 011                  JZ      EOL             ; IF ZERO, ERASE TO END OF LINE
    2945/ 11.044 :                      
    2946/ 11.044 : 075                          DCR     A               ; ONE?
    2947/ 11.045 :                              CPU     Z80
    2948/ 11.045 : 050 303                      JR      Z,EBL           ; IF ONE, ERASE BEGINNING OF LINE
    2949/ 11.047 :                              CPU     8080
    2950/ 11.047 :                      
    2951/ 11.047 : 075                          DCR     A               ; TWO?
    2952/ 11.050 : 300                          RNZ                     ; IF NOT TWO, ILLEGAL, EXIT
    2953/ 11.051 :                      
    2954/ 11.051 :                      ;       JMP     EEL             ; ELSE, ERASE ENTIRE LINE
    2955/ 11.051 :                      ;       ERRNZ   *-EEL
    2956/ 11.051 :                      
    2957/ 11.051 :                      ;;      EEL - ERASE ENTIRE LINE
    2958/ 11.051 :                      ;
    2959/ 11.051 :                      ;       *EEL* WRITE SPACES INTO THE ENTIRE LINE WHERE THE CURSOR RESIDES
    2960/ 11.051 :                      ;
    2961/ 11.051 :                      ;
    2962/ 11.051 :                      ;       ENTRY   NONE
    2963/ 11.051 :                      ;
    2964/ 11.051 :                      ;       EXIT    NONE
    2965/ 11.051 :                      ;
    2966/ 11.051 :                      ;       USES    A,B,C,H,L,F
    2967/ 11.051 :                      
    2968/ 11.051 :                      
    2969/ 11.051 : 052 270 100          EEL     LHLD    CLSA            ; START ERASING AT BEGINNING OF CURRENT LINE
    2970/ 11.054 : 006 005                      MVI     B,80/16         ; MODULO 16 COUNT FOR NUMBER TO WRITE
    2971/ 11.056 : 303 212 016                  JMP     WSVA            ; WRITE SPACES AND EXIT
    2972/ 11.061 :                      
    2973/ 11.061 :                      ;;      EGM - ENTER GRAPHICS MODE
    2974/ 11.061 :                      ;
    2975/ 11.061 :                      ;       *EGM* SETS THE GRPAHICS MODE FLAG
    2976/ 11.061 :                      ;
    2977/ 11.061 :                      ;
    2978/ 11.061 :                      ;       ENTRY   (D,E) = MODEA
    2979/ 11.061 :                      ;
    2980/ 11.061 :                      ;       EXIT    NONE
    2981/ 11.061 :                      ;
    2982/ 11.061 :                      ;       USES    A,F
    2983/ 11.061 :                      
    2984/ 11.061 :                      
    2985/ 11.061 : 353                  EGM     XCHG                    ; (H,L) = MODE
    2986/ 11.062 :                              CPU     Z80
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 51 - 2024-05-01 01:09:39 PM


    2987/ 11.062 : 313 316                      SET     IB.GRPH,(HL)    ; SET GRAPHICS MODE FLAG
    2988/ 11.064 :                              CPU     8080
    2989/ 11.064 : 311                          RET
    2990/ 11.065 :                      
    2991/ 11.065 :                      ;;      EHM - ENTER HEATH MODE
    2992/ 11.065 :                      ;
    2993/ 11.065 :                      ;       *EHM* TAKES THE TERMINAL OUT OF THE ANSI MODE AND INTO THE HEATH MODE
    2994/ 11.065 :                      ;
    2995/ 11.065 :                      ;
    2996/ 11.065 :                      ;       ENTRY   NONE
    2997/ 11.065 :                      ;
    2998/ 11.065 :                      ;       EXIT    NONE
    2999/ 11.065 :                      ;
    3000/ 11.065 :                      ;       USES    A,F
    3001/ 11.065 :                      
    3002/ 11.065 :                      
    3003/ 11.065 : 072 310 100          EHM     LDA     MODEB           ; GET MODE FLAGS
    3004/ 11.070 : 346 337                      ANI     255-MB.ANSI
    3005/ 11.072 : 062 310 100                  STA     MODEB
    3006/ 11.075 : 311                          RET
    3007/ 11.076 :                      
    3008/ 11.076 :                      ;;      EHSM - ENTER HOLD SCREEN MODE
    3009/ 11.076 :                      ;
    3010/ 11.076 :                      ;
    3011/ 11.076 :                      ;       *EHSM* SETS THE HOLD SCREEN MODE FLAG
    3012/ 11.076 :                      ;
    3013/ 11.076 :                      ;
    3014/ 11.076 :                      ;       ENTRY   (D,E) = MODEA
    3015/ 11.076 :                      ;
    3016/ 11.076 :                      ;       EXIT    NONE
    3017/ 11.076 :                      ;
    3018/ 11.076 :                      ;       USES    A,F
    3019/ 11.076 :                      
    3020/ 11.076 : 353                  EHSM    XCHG                    ; (H,L) = MODEA
    3021/ 11.077 :                              CPU     Z80
    3022/ 11.077 : 313 306                      SET     IB.HSM,(HL)     ; SET HOLD SCREEN MODE FLAG
    3023/ 11.101 :                              CPU     8080
    3024/ 11.101 : 076 001                      MVI     A,1             ; SET LINE COUNTER TO ONE
    3025/ 11.103 : 062 313 100                  STA     HSMLC
    3026/ 11.106 : 311                          RET
    3027/ 11.107 :                      
    3028/ 11.107 :                      ;;      EICM - ENTER INSERT CHARACTER MODE
    3029/ 11.107 :                      ;
    3030/ 11.107 :                      ;       *EICM* SETS THE INSERT CHARACTER MODE FLAG
    3031/ 11.107 :                      ;
    3032/ 11.107 :                      ;
    3033/ 11.107 :                      ;       ENTRY   (D,E) = MODEA
    3034/ 11.107 :                      ;
    3035/ 11.107 :                      ;       EXIT    NONE
    3036/ 11.107 :                      ;
    3037/ 11.107 :                      ;       USES    A,F
    3038/ 11.107 :                      
    3039/ 11.107 :                      
    3040/ 11.107 : 353                  EICM    XCHG                    ; (H,L) = MODEA
    3041/ 11.110 :                              CPU     Z80
    3042/ 11.110 : 313 366                      SET     IB.ICM,(HL)     ; SET INSERT CHARACTER MODE FLAG
    3043/ 11.112 :                              CPU     8080
    3044/ 11.112 : 311                          RET
    3045/ 11.113 :                      
    3046/ 11.113 :                      ;;      EKAM - ENTER KEYPAD ALTERNATE MODE
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 52 - 2024-05-01 01:09:39 PM


    3047/ 11.113 :                      ;
    3048/ 11.113 :                      ;       *EKAM* SETS THE KEYPAD ALTERNATE MODE FLAG IN *MODE*
    3049/ 11.113 :                      ;
    3050/ 11.113 :                      ;
    3051/ 11.113 :                      ;       ENTRY   (B,C) = MODEB
    3052/ 11.113 :                      ;
    3053/ 11.113 :                      ;       EXIT    NONE
    3054/ 11.113 :                      ;
    3055/ 11.113 :                      ;       USES    A,F
    3056/ 11.113 :                      
    3057/ 11.113 :                      
    3058/ 11.113 : 012                  EKAM    LDAX    B               ; GET MODEB FLAGS
    3059/ 11.114 : 366 200                      ORI     MB.KPDA         ; SET KEYPAD ALTERNATE MODE
    3060/ 11.116 : 002                          STAX    B
    3061/ 11.117 : 311                          RET
    3062/ 11.120 :                      
    3063/ 11.120 :                      ;;      EKC - ENABLE KEYPAD CLICK
    3064/ 11.120 :                      ;
    3065/ 11.120 :                      ;       *EKC* RESETS THE FLAG WHICH INHIBITS KEY CLICK
    3066/ 11.120 :                      ;
    3067/ 11.120 :                      ;
    3068/ 11.120 :                      ;       ENTRY   (BC) = MODEB
    3069/ 11.120 :                      ;
    3070/ 11.120 :                      ;       EXIT    NONE
    3071/ 11.120 :                      ;
    3072/ 11.120 :                      ;       USES    A,F
    3073/ 11.120 :                      
    3074/ 11.120 :                      
    3075/ 11.120 : 012                  EKC     LDAX    B               ; GET MODE FLAGS
    3076/ 11.121 : 346 375                      ANI     255-MB.NOTK     ; CLEAR NO TICK FLAG
    3077/ 11.123 : 002                          STAX    B
    3078/ 11.124 : 311                          RET
    3079/ 11.125 :                      
    3080/ 11.125 :                      
    3081/ 11.125 :                      ;;      EKI - ENABLE KEYBOARD INPUT
    3082/ 11.125 :                      ;
    3083/ 11.125 :                      ;       *EKI* RESETS THE FLAG WHICH DISABLES INPUT FROM THE KEYBOARD
    3084/ 11.125 :                      ;
    3085/ 11.125 :                      ;
    3086/ 11.125 :                      ;       ENTRY   NONE
    3087/ 11.125 :                      ;
    3088/ 11.125 :                      ;       EXIT    NONE
    3089/ 11.125 :                      ;
    3090/ 11.125 :                      ;       USES    A,F
    3091/ 11.125 :                      
    3092/ 11.125 :                      
    3093/ 11.125 : 072 311 100          EKI     LDA     MODEI           ; GET MODE FLAGS
    3094/ 11.130 : 346 373                      ANI     255-MI.KID      ; TOSS KEYBOARD DISABLE FLAG
    3095/ 11.132 : 062 311 100                  STA     MODEI
    3096/ 11.135 : 311                          RET
    3097/ 11.136 :                      
    3098/ 11.136 :                      ;;      EKSM - ENTER KEYPAD SHIFTED MODE
    3099/ 11.136 :                      ;
    3100/ 11.136 :                      ;       *EKSM* SETS THE KEYPAD SHIFTED MODE FLAG
    3101/ 11.136 :                      ;
    3102/ 11.136 :                      ;       ENTRY   (B,C) = MODEB
    3103/ 11.136 :                      ;
    3104/ 11.136 :                      ;       EXIT    NONE
    3105/ 11.136 :                      ;
    3106/ 11.136 :                      ;       USES    A,F
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 53 - 2024-05-01 01:09:39 PM


    3107/ 11.136 :                      
    3108/ 11.136 :                      
    3109/ 11.136 : 012                  EKSM    LDAX    B               ; GET MODEB FLAGS
    3110/ 11.137 : 366 100                      ORI     MB.KPDS
    3111/ 11.141 : 002                          STAX    B
    3112/ 11.142 : 311                          RET
    3113/ 11.143 :                      
    3114/ 11.143 :                      ;;      ELB - ESCAPE LEFT BRACKET
    3115/ 11.143 :                      ;
    3116/ 11.143 :                      ;       *ELB: IS A CONTINUATION OF THE ESCAPE SEQUENCE PROCESSING FOR
    3117/ 11.143 :                      ;       ANSI ESCAPE SEQUENCES.  THE FINAL CHARACTER OF THE SEQUENCE IS
    3118/ 11.143 :                      ;       DECODED WITH OR WITHOUT A PRECEDING PARAMETER STRING AND
    3119/ 11.143 :                      ;       CONTROL IS PASSED ON TO THE ASSOCIATED ROUTINE
    3120/ 11.143 :                      ;
    3121/ 11.143 :                      ;
    3122/ 11.143 :                      ;       ENTRY   NONE
    3123/ 11.143 :                      ;
    3124/ 11.143 :                      ;       EXIT    TO REQUESTED ROUTINE WITH
    3125/ 11.143 :                      ;                       (B) = ZERO IF NO PARAMETER STRING WAS INPUT
    3126/ 11.143 :                      ;
    3127/ 11.143 :                      ;       USES    A,B,C,D,E,H,L,F
    3128/ 11.143 :                      
    3129/ 11.143 :                      
    3130/ 11.143 : 315 346 014          ELB     CALL    PSD             ; DECODE PARAMETER STRING
    3131/ 11.146 : 305                          PUSH    B               ; SAVE (B)
    3132/ 11.147 :                      
    3133/ 11.147 :                      ;       SEARCH TABLE FOR FINAL CHARACTER OF SEQUENCE
    3134/ 11.147 :                      ;
    3135/ 11.147 : 026 027                      MVI     D,ELBTL         ; SET TABLE LENGTH
    3136/ 11.151 : 036 003                      MVI     E,ELBTW         ; SET TABLE WIDTH
    3137/ 11.153 : 041 172 011                  LXI     H,ELBT          ; SET TABLE ADDRESS
    3138/ 11.156 : 315 363 015                  CALL    STAB            ; SEARCH TABLE
    3139/ 11.161 : 301                          POP     B               ; RESTORE (B)
    3140/ 11.162 : 330                          RC                      ; IF CHARACTER NOT FOUND IN TABLE, EXIT NOW
    3141/ 11.163 :                      
    3142/ 11.163 : 043                          INX     H               ; ELSE, GET ADDRESS OF ROUTINE
    3143/ 11.164 : 146                          MOV     H,M             ; GET MSB
    3144/ 11.165 : 157                          MOV     L,A             ; GET LSB
    3145/ 11.166 : 021 314 100                  LXI     D,PSDW          ; (D,E) = PSD WORK AREA
    3146/ 11.171 : 351                          PCHL
    3147/ 11.172 :                      
    3148/ 11.172 :                      ;;      ELBT - ESCAPE LEFT BRACKET TABLE
    3149/ 11.172 :                      ;
    3150/ 11.172 :                      ;       *ELBT* CONTAINS THE THIRD AND/OR FINAL CHARACTERS OF THE ANSI
    3151/ 11.172 :                      ;       ESCAPE SEQUENCES
    3152/ 11.172 :                      
    3153/ 11.172 :                      
    3154/ 11.172 : =11.172O             ELBT    EQU    $
    3155/ 11.172 :                      
    3156/ 11.172 : 076                          DB     '>'              ; ESC [ >
    3157/ 11.173 : 073 005                      DW     A2M              ; ANSI SET MODE #2
    3158/ 11.175 :                      
    3159/ 11.175 : 077                          DB     '?'              ; ESC [ ?
    3160/ 11.176 : 376 004                      DW     A1M              ; ANSI SET MODE #1
    3161/ 11.200 :                      
    3162/ 11.200 : 101                          DB     'A'              ; ESC [ A
    3163/ 11.201 : 346 005                      DW     ACUP             ; ANSI CURSOR UP
    3164/ 11.203 :                      
    3165/ 11.203 : 102                          DB     'B'              ; ESC [ B
    3166/ 11.204 : 156 005                      DW     ACDN             ; ANSI CURSOR DOWN
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 54 - 2024-05-01 01:09:39 PM


    3167/ 11.206 :                      
    3168/ 11.206 : 103                          DB     'C'              ; ESC [ C
    3169/ 11.207 : 324 005                      DW     ACRT             ; ANSI  CURSOR RIGHT
    3170/ 11.211 :                      
    3171/ 11.211 : 104                          DB     'D'              ; ESC [ D
    3172/ 11.212 : 201 005                      DW     ACLFT            ; ANSI CURSOR LEFT
    3173/ 11.214 :                      
    3174/ 11.214 : 110                          DB     'H'              ; ESC [ H
    3175/ 11.215 : 371 005                      DW     APCA             ; ANSIR PERFORM CURSOR ADDRESSING
    3176/ 11.217 :                      
    3177/ 11.217 : 112                          DB     'J'              ; ESC [ J
    3178/ 11.220 : 377 007                      DW     EID              ; ERASE IN DISPLAY
    3179/ 11.222 :                      
    3180/ 11.222 : 113                          DB     'K'              ; ESC [ K
    3181/ 11.223 : 031 011                      DW     EIL              ; ERASE IN LINE
    3182/ 11.225 :                      
    3183/ 11.225 : 114                          DB     'L'              ; ESC [ L
    3184/ 11.226 : 116 006                      DW     APIL             ; ANSI PERFORM LINE INSERT
    3185/ 11.230 :                      
    3186/ 11.230 : 115                          DB     'M'              ; ESC [ M
    3187/ 11.231 : 073 006                      DW     APDL             ; ANSI PERFORM DELETE LINE
    3188/ 11.233 :                      
    3189/ 11.233 : 120                          DB     'P'              ; ESC [ P
    3190/ 11.234 : 050 006                      DW     APDC             ; ANSI PERFORM DELETE CHARACTER
    3191/ 11.236 :                      
    3192/ 11.236 : 146                          DB     'f'              ; ESC [ f         (LOWER CASE F)
    3193/ 11.237 : 371 005                      DW     APCA             ; ANSI PERFORM CURSOR ADDRESSING
    3194/ 11.241 :                      
    3195/ 11.241 : 150                          DB     'h'              ; ESC [ h         (LOWER CASE H)
    3196/ 11.242 : 301 006                      DW     ASM              ; ANSI SET MODE
    3197/ 11.244 :                      
    3198/ 11.244 : 154                          DB     'l'              ; ESC [ l         (LOWER CASE L)
    3199/ 11.245 : 141 006                      DW     ARM              ; ANSI RESET MODE
    3200/ 11.247 :                      
    3201/ 11.247 : 155                          DB     'm'              ; ESC [ m         (LOWER CASE M)
    3202/ 11.250 : 222 006                      DW     ASGM             ; ANSI SET GRAPHICS MODE
    3203/ 11.252 :                      
    3204/ 11.252 : 156                          DB     'n'              ; ESC [ n         (LOWER CASE N)
    3205/ 11.253 : 223 005                      DW     ACPR             ; ANSIR CURSOR POSITION REPORT
    3206/ 11.255 :                      
    3207/ 11.255 : 160                          DB     'p'              ; ESC [ p         (LOWER CASE P)
    3208/ 11.256 : 247 017                      DW     AXMTP            ; ANSI TRANSMIT PAGE
    3209/ 11.260 :                      
    3210/ 11.260 : 161                          DB     'q'              ; ESC [ q         (LOWER CASE Q)
    3211/ 11.261 : 323 016                      DW     AXMT25           ; ANSI TRANSMIT 25TH LINE
    3212/ 11.263 :                      
    3213/ 11.263 : 162                          DB     'r'              ; ESC [ r         (LOWER CASE R)
    3214/ 11.264 : 206 006                      DW     ASBR             ; ANSI SET BAUD RATE
    3215/ 11.266 :                      
    3216/ 11.266 : 163                          DB     's'              ; ESC [ s         (LOWER CASE S)
    3217/ 11.267 : 127 015                      DW     ASCP             ; ANSI SAVE CURSOR POSITION
    3218/ 11.271 :                      
    3219/ 11.271 : 165                          DB     'u'              ; ESC [ u         (LOWER CASE U)
    3220/ 11.272 : 311 015                      DW     AUSCP            ; ANSI UNSAVE CURSOR POSITION
    3221/ 11.274 :                      
    3222/ 11.274 : 172                          DB     'z'              ; ESC [ z         (LOWER CASE Z)
    3223/ 11.275 : 375 012                      DW     ARAMP            ; ANSI RESET ALL MODES TO POWER UP CONFIGURATION
    3224/ 11.277 :                      
    3225/ 11.277 : =3O                  ELBTW   EQU    3                ; TABLE WIDTH IS 3
    3226/ 11.277 : =27O                 ELBTL   EQU    ($-ELBT)/ELBTW   ; TABLE LENGTH
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 55 - 2024-05-01 01:09:39 PM


    3227/ 11.277 :                      
    3228/ 11.277 :                      ;;      EOL - ERASE TO END OF LINE
    3229/ 11.277 :                      ;
    3230/ 11.277 :                      ;       *EOL* PLACES SPACES IN VIDEO RAM FROM THE CURRENT CURSOR POSITION
    3231/ 11.277 :                      ;       TO THE END OF THE CURRENT LINE.  CURSOR POSITION DOES NOT CHANGE.
    3232/ 11.277 :                      ;
    3233/ 11.277 :                      ;
    3234/ 11.277 :                      ;       ENTRY   NONE
    3235/ 11.277 :                      ;
    3236/ 11.277 :                      ;       EXIT    NONE
    3237/ 11.277 :                      ;
    3238/ 11.277 :                      ;       USES    A,B,C,D,E,H,L,F
    3239/ 11.277 :                      
    3240/ 11.277 :                      
    3241/ 11.277 : 052 274 100          EOL     LHLD    CURAD           ; GET CURSOR ADDRESS
    3242/ 11.302 : 072 272 100                  LDA     CURHP           ; GET CURSOR COLUMN POSITION
    3243/ 11.305 :                              CPU     Z80
    3244/ 11.305 : 355 104                      NEG                     ; SUBTRACT COLUMN COUNTER FROM 80
    3245/ 11.307 :                              CPU     8080
    3246/ 11.307 : 306 120                      ADI     80
    3247/ 11.311 : 137                          MOV     E,A             ; PLACE COUNT IN D & E
    3248/ 11.312 : 026 000                      MVI     D,0
    3249/ 11.314 : 303 160 016                  JMP     WSV             ; WRITE SPACES ON REST OF LINE
    3250/ 11.317 :                      
    3251/ 11.317 :                      ;;      ERM - ERASE REST OF MEMORY
    3252/ 11.317 :                      ;
    3253/ 11.317 :                      ;       *ERM* ERASES THE SCREEN FROM THE CURRENT CURSOR POSITION TO
    3254/ 11.317 :                      ;       THE END OF THE SCREE
    3255/ 11.317 :                      ;
    3256/ 11.317 :                      ;
    3257/ 11.317 :                      ;       ENTRY   NONE
    3258/ 11.317 :                      ;
    3259/ 11.317 :                      ;       EXIT    NONE
    3260/ 11.317 :                      ;
    3261/ 11.317 :                      ;       USES    A,B,C,D,E,H,L,F
    3262/ 11.317 :                      
    3263/ 11.317 :                      
    3264/ 11.317 : 072 273 100          ERM     LDA     CURVP           ; GET CURRENT VERTICAL POSITION
    3265/ 11.322 : 376 030                      CPI     24              ; SEE IF ON 25TH LINE
    3266/ 11.324 :                              CPU     Z80
    3267/ 11.324 : 050 351                      JR      Z,EOL           ; IF SO, JUST SETTLE FOR END OF THIS LINE
    3268/ 11.326 :                              CPU     8080
    3269/ 11.326 :                      
    3270/ 11.326 : 052 266 100                  LHLD    SHOME           ; GET HOME ADDRESS
    3271/ 11.331 : 021 177 007                  LXI     D,1919          ; AND DISPLAY SIZE TO FIND END
    3272/ 11.334 : 031                          DAD     D
    3273/ 11.335 : 067                          STC                     ; CLEAR CARRY BIT FOR NEXT OPERATION
    3274/ 11.336 : 077                          CMC
    3275/ 11.337 :                              CPU     Z80
    3276/ 11.337 : 355 133 274 100              LD      DE,(CURAD)
    3277/ 11.343 : 355 122                      SBC     HL,DE           ; SUBTRACT CURSOR ADDRESS FROM END OF DISPLAY
    3278/ 11.345 :                              CPU     8080
    3279/ 11.345 : 043                          INX     H               ; ADD ONE TO ERASE CHARACTER AT (CURAD)
    3280/ 11.346 : 353                          XCHG                    ; (D,E) = COUNT TO END OF DISPLAY
    3281/ 11.347 : 172                          MOV     A,D             ; MASK TO KEEP COUNT UNDER 2K
    3282/ 11.350 : 346 007                      ANI     00000111B
    3283/ 11.352 : 127                          MOV     D,A
    3284/ 11.353 : 052 274 100                  LHLD    CURAD           ; (H,L) = ADDRESS OF FIRST SPACE TO WRITE
    3285/ 11.356 : 303 160 016                  JMP     WSV             ; WRITE SPACES
    3286/ 11.361 :                      
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 56 - 2024-05-01 01:09:39 PM


    3287/ 11.361 :                      ;;      ERVM - ENTER REVERSE VIDEO MODE
    3288/ 11.361 :                      ;
    3289/ 11.361 :                      ;       *ERVM* SETS THE REVERSE VIDEO MODE FLAG
    3290/ 11.361 :                      ;
    3291/ 11.361 :                      ;
    3292/ 11.361 :                      ;       ENTRY   (D,E) = MODEA
    3293/ 11.361 :                      ;
    3294/ 11.361 :                      ;       EXIT    NONE
    3295/ 11.361 :                      ;
    3296/ 11.361 :                      ;       USES    A,F
    3297/ 11.361 :                      
    3298/ 11.361 :                      
    3299/ 11.361 : =11.361O             ERVM    EQU     $
    3300/ 11.361 :                      
    3301/ 11.361 :                      
    3302/ 11.361 : 353                          XCHG                    ; (H,L) = MODE
    3303/ 11.362 : 176                          MOV     A,M             ; GET MODE FLAGS
    3304/ 11.363 : 366 210                      ORI     MA.RV+MA.RVP    ; SET REVERSE VIDEO AND RV PRESENT FLAGS
    3305/ 11.365 : 167                          MOV     M,A
    3306/ 11.366 : 311                          RET
    3307/ 11.367 :                      
    3308/ 11.367 :                      ;;      FCIF - FETCH CHARACTER FROM INPUT FIFO
    3309/ 11.367 :                      ;
    3310/ 11.367 :                      ;       *FCIF* IS USED TO FETCH A SINGLE CHARACTER FROM THE INPUT FIFO
    3311/ 11.367 :                      ;       IF ANY ARE AVAILABLE.
    3312/ 11.367 :                      ;
    3313/ 11.367 :                      ;
    3314/ 11.367 :                      ;       ENTRY   NONE
    3315/ 11.367 :                      ;
    3316/ 11.367 :                      ;       EXIT    (A) = CHARACTER IF ONE IS AVAILABLE
    3317/ 11.367 :                      ;               'C' = SET IF NO CHARACTER
    3318/ 11.367 :                      ;               'C' = CLEAR IF CHARACTER IN ACCUMULATOR
    3319/ 11.367 :                      ;
    3320/ 11.367 :                      ;       USES    A,B,H,L,F
    3321/ 11.367 :                      
    3322/ 11.367 :                      
    3323/ 11.367 : 072 241 100          FCIF    LDA     IFC             ; GET INPUT FIFO COUNTER
    3324/ 11.372 : 267                          ORA     A               ; SEE IF FIFO IS EMPTY
    3325/ 11.373 : 067                          STC                     ; SET 'C' FOR NO CHARACTER
    3326/ 11.374 : 310                          RZ                      ; IF NOT CHARACTER IN FIFO, EXIT
    3327/ 11.375 :                      
    3328/ 11.375 : 363                          DI                      ; LOCK OUT ANY ENTRIES FOR NOW
    3329/ 11.376 : 072 241 100                  LDA     IFC             ; DECREMENT INPUT FIFO COUNTER
    3330/ 12.001 : 075                          DCR     A
    3331/ 12.002 : 062 241 100                  STA     IFC
    3332/ 12.005 : 072 240 100                  LDA     IFP             ; GET INPUT FIFO POINTER
    3333/ 12.010 : 107                          MOV     B,A             ; SAVE VALUE
    3334/ 12.011 : 041 000 100                  LXI     H,INFI          ; POINT TO INPUT FIFO
    3335/ 12.014 : 205                          ADD     L               ; ADD POINTER
    3336/ 12.015 : 157                          MOV     L,A
    3337/ 12.016 : 170                          MOV     A,B             ; INCREMENT POINTER
    3338/ 12.017 : 074                          INR     A
    3339/ 12.020 : 346 177                      ANI     IFCMSK          ; KEEP POINTER IN FIFO
    3340/ 12.022 : 062 240 100                  STA     IFP             ; UPDATE POINTER
    3341/ 12.025 : 176                          MOV     A,M             ; READ CHARACTER FROM FIFO
    3342/ 12.026 : 067                          STC                     ; CLEAR 'C'
    3343/ 12.027 : 077                          CMC
    3344/ 12.030 : 373                          EI                      ; ALLOW NEW ENTRIES TO FIFO
    3345/ 12.031 : 311                          RET
    3346/ 12.032 :                      
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 57 - 2024-05-01 01:09:39 PM


    3347/ 12.032 :                      ;;      FCOF - FETCH CHARACTER FROM OUTPUT FIFO
    3348/ 12.032 :                      ;
    3349/ 12.032 :                      ;       *FCOF* FETCHES A CHARACTER FROM THE OUTPUT FIFO IF ANY ARE AVAILABLE
    3350/ 12.032 :                      ;
    3351/ 12.032 :                      ;
    3352/ 12.032 :                      ;       ENTRY   NONE
    3353/ 12.032 :                      ;
    3354/ 12.032 :                      ;       EXIT    (A) = CHARACTER IF AVAILABLE
    3355/ 12.032 :                      ;               'C' = SET IF NO CHARACTERS IN FIFO
    3356/ 12.032 :                      ;               'C' = CLEAR IF CHARACTER IN ACCUMULATOR
    3357/ 12.032 :                      ;
    3358/ 12.032 :                      ;       USES    A,B,H,L,F
    3359/ 12.032 :                      
    3360/ 12.032 :                      
    3361/ 12.032 : 072 243 100          FCOD    LDA     OFC             ; GET OUTPUT FIFO COUNTER
    3362/ 12.035 : 267                          ORA     A               ; SEE IF FIFO IS EMPTY
    3363/ 12.036 : 067                          STC                     ; SET 'C' FOR NO CHARACTERS
    3364/ 12.037 : 310                          RZ                      ; IF NO CHARACTERS IN FIFO
    3365/ 12.040 :                      
    3366/ 12.040 : 075                          DCR     A               ; DECREMENT COUNTER
    3367/ 12.041 : 062 243 100                  STA     OFC
    3368/ 12.044 : 072 242 100                  LDA     OFP             ; GET OUTPUT FIFO COUNTER
    3369/ 12.047 : 107                          MOV     B,A             ; SAVE FOR LATER
    3370/ 12.050 : 041 200 100                  LXI     H,OUTF          ; POINT TO OUTPUT FIFO
    3371/ 12.053 : 205                          ADD     L               ; ADD POINTER
    3372/ 12.054 : 157                          MOV     L,A
    3373/ 12.055 : 170                          MOV     A,B             ; INCREMENT POINTER
    3374/ 12.056 : 074                          INR     A
    3375/ 12.057 : 346 037                      ANI     OFCMSK          ; KEEP POINTER IN FIFO
    3376/ 12.061 : 062 242 100                  STA     OFP             ; UPDATE OUTPUT FIFO POINTER
    3377/ 12.064 : 176                          MOV     A,M             ; READ CHARACTER FROM FIFO
    3378/ 12.065 : 067                          STC                     ; CLEAR 'C'
    3379/ 12.066 : 077                          CMC
    3380/ 12.067 : 311                          RET
    3381/ 12.070 :                      
    3382/ 12.070 :                      ;;      FNCP - FETCH NEXT CHARACTER FOR PRIVATE PROCESSING
    3383/ 12.070 :                      ;
    3384/ 12.070 :                      ;       FNCP GETS THE NEXT CHARACTER AVAILABLE FROM THE INPUT FIFO.
    3385/ 12.070 :                      ;       IF NONE ARE AVAILABLE, FNCP CONTINUES TO PROCESS KEYBOARD
    3386/ 12.070 :                      ;       CHARACTERS AND OUTPUT FIFO CHARACTERS
    3387/ 12.070 :                      ;
    3388/ 12.070 :                      ;       ENTRY   NONE
    3389/ 12.070 :                      ;
    3390/ 12.070 :                      ;       EXIT    (A) = CHARACTER FROM INPUT FIFO
    3391/ 12.070 :                      ;               'C' = CLEARED
    3392/ 12.070 :                      ;
    3393/ 12.070 :                      ;       USES    A,G
    3394/ 12.070 :                      
    3395/ 12.070 :                      
    3396/ 12.070 : 305                  FNCP    PUSH    B               ; SAVE REGISTERS
    3397/ 12.071 : 325                          PUSH    D
    3398/ 12.072 : 345                          PUSH    H
    3399/ 12.073 : 315 016 000          FNCP1   CALL    MAIN.N          ; SERVICE KEYBOARD AND OUTPUT FIFO
    3400/ 12.076 : 315 367 011                  CALL     FCIF           ; SEE IF THERE IS A CHARACTER IN THE INPUT FIFO
    3401/ 12.101 :                              CPU      Z80
    3402/ 12.101 : 070 370                      JR       C,FNCP1        ; IF NO CHARACTER YET
    3403/ 12.103 :                              CPU      8080
    3404/ 12.103 :                      
    3405/ 12.103 : 341                          POP      H              ; ELSE, RESTORE REGISTERS AND EXIT
    3406/ 12.104 : 321                          POP      D
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 58 - 2024-05-01 01:09:39 PM


    3407/ 12.105 : 301                          POP      B
    3408/ 12.106 : 311                          RET
    3409/ 12.107 :                      
    3410/ 12.107 :                      ;;      FVKF - FETCH VALUE FROM KEYBOARD FIFO
    3411/ 12.107 :                      ;
    3412/ 12.107 :                      ;       *FVKF* FETCHES A TWO BYTE VALUE FROM THE KEYBOARD FIFO
    3413/ 12.107 :                      ;       AND THEN DOES A BUBBLE DOWN ON THE REST OF THE CONTENTS OF THE FIFO
    3414/ 12.107 :                      ;       AND UPDATES THE KEYBOARD FIFO POINTER
    3415/ 12.107 :                      ;
    3416/ 12.107 :                      ;       ENTRY   NONE
    3417/ 12.107 :                      ;
    3418/ 12.107 :                      ;       EXIT    (D,E) = TWO BYTE VALUE FROM KEYBOARD IF AVAILABLE
    3419/ 12.107 :                      ;               'C' = SET IF FIFO WAS EMPTY
    3420/ 12.107 :                      ;               'C' = CLEAR IF VALUE WAS PLACED IN (D,E)
    3421/ 12.107 :                      ;
    3422/ 12.107 :                      ;       USES    A,D,E,F
    3423/ 12.107 :                      
    3424/ 12.107 :                      
    3425/ 12.107 : 305                  FVKF    PUSH    B               ; SAVE (B,C,H,L)
    3426/ 12.110 : 345                          PUSH    H
    3427/ 12.111 : 363                          DI                      ; INHIBIT ANY NEW ENTRIES WHILE REMOVING OLD
    3428/ 12.112 : 052 264 100                  LHLD    KBDFP           ; (H,L) = KEYBOARD FIFO POINTER
    3429/ 12.115 : 175                          MOV     A,L             ; CHECK LSB TO SEE IF THERE ARE ANY ENTRIES
    3430/ 12.116 : 376 244                      CPI     KBDFMIN&377Q
    3431/ 12.120 : 067                          STC                     ; SET CARRY IN CASE NO ENTRY
    3432/ 12.121 :                              CPU     Z80
    3433/ 12.121 : 050 030                      JR      Z,FVKF1         ; IF FIFO EMPTY
    3434/ 12.123 :                              CPU     8080
    3435/ 12.123 :                      
    3436/ 12.123 : 053                          DCX     H               ; ELSE, UPDATE FIFO POINTER
    3437/ 12.124 : 053                          DCX     H
    3438/ 12.125 : 042 264 100                  SHLD    KBDFP
    3439/ 12.130 : 041 244 100                  LXI     H,KBDF          ; (H,L) = BEGINNING OF FIFO
    3440/ 12.133 : 126                          MOV     D,M             ; (D) = VALUE FROM IP.KBD1
    3441/ 12.134 : 043                          INX     H
    3442/ 12.135 : 136                          MOV     E,M             ; (E) = VALUE FROM IP.KBD2
    3443/ 12.136 : 043                          INX     H               ; POINT TO NEXT ENTRY
    3444/ 12.137 : 325                          PUSH    D               ; SAVE KEYBOARD VALUES
    3445/ 12.140 : 021 244 100                  LXI     D,KBDF          ; (D,E) = BEGINNING OF FIFO FOR BUBBLE DOWN
    3446/ 12.143 : 001 016 000                  LXI     B,KBDFL-2       ; (B,C) = NUMBER OF BYTES TO BUBBLE
    3447/ 12.146 :                              CPU     Z80
    3448/ 12.146 : 355 260                      LDIR                    ; BUBBLE UNTIL (BC) = 0
    3449/ 12.150 :                              CPU     8080
    3450/ 12.150 : 067                          STC                     ; CLEAR CARRY BIT TO INDICATE VALUE FOUND
    3451/ 12.151 : 077                          CMC
    3452/ 12.152 : 321                          POP     D               ; (D,E) = KEYBOARD VALUES
    3453/ 12.153 : 341                  FVKF1   POP     H               ; RESTORE REGISTERS
    3454/ 12.154 : 301                          POP     B
    3455/ 12.155 : 373                          EI
    3456/ 12.156 : 311                          RET
    3457/ 12.157 :                      
    3458/ 12.157 :                      ;;      SBR - SET BAUD RATE
    3459/ 12.157 :                      ;
    3460/ 12.157 :                      ;       *SBR* ALLOWS THE BAUD RATE TO BE SENT INDEPENDENT OF THE POWER-UP
    3461/ 12.157 :                      ;       SWITCH CONFIGURATION
    3462/ 12.157 :                      ;
    3463/ 12.157 :                      ;
    3464/ 12.157 :                      ;       ENTRY   NONE
    3465/ 12.157 :                      ;
    3466/ 12.157 :                      ;       EXIT    NONE
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 59 - 2024-05-01 01:09:39 PM


    3467/ 12.157 :                      ;
    3468/ 12.157 :                      ;       USES    A,B,C,D,E,H,L,F
    3469/ 12.157 :                      
    3470/ 12.157 :                      
    3471/ 12.157 : 315 070 012          SBR     CALL    FNCP            ; FETCH NEXT CHARACTER
    3472/ 12.162 :                      
    3473/ 12.162 :                      ;       INPUT CHARACTER MUST BE AN ASCII A,B,C,D,E,F,G OR H.  (A=110, B=150,
    3474/ 12.162 :                      ;       C=300, D=600, E=1200, F=1800, G=2000, H=2400, I=3600, J=4800, K=7200,
    3475/ 12.162 :                      ;       L=9600)
    3476/ 12.162 :                      ;
    3477/ 12.162 : 376 101              SBR1    CPI     'A'             ; SEE IF CHARACTER IS IN RANGE
    3478/ 12.164 : 330                          RC                      ; IF LESS THAN AN 'A'
    3479/ 12.165 :                      
    3480/ 12.165 : 376 116                      CPI     'N'
    3481/ 12.167 : 320                          RNC                     ; IF GREATER THAN A 'P'
    3482/ 12.170 :                      
    3483/ 12.170 : 346 017                      ANI     P1.BR           ; MASK FOR LOWER BITS
    3484/ 12.172 :                      
    3485/ 12.172 :                      ;       ALTERNATE ENTRY POINT FROM *ASBR*
    3486/ 12.172 :                      ;
    3487/ 12.172 : 107                  SBR.    MOV     B,A             ; SAVE RESULT
    3488/ 12.173 : 072 312 100                  LDA     MODES           ; GET SERIAL I/O MODE
    3489/ 12.176 : 346 360                      ANI     377Q-MS.BR      ; TOSS OLD BAUD RATE
    3490/ 12.200 : 260                          ORA     B               ; REPLACE WITH NEW BAUD RATE
    3491/ 12.201 : 062 312 100                  STA     MODES           ; UPDATE 'IMAGE'
    3492/ 12.204 :                      ;       JMP     IACE            ; SET ACE TO NEW RATE
    3493/ 12.204 :                      ;       ERRNZ   $-ACE
    3494/ 12.204 :                      
    3495/ 12.204 :                      
    3496/ 12.204 :                      ;;      IACE - INITIALIZE ACE (UART)
    3497/ 12.204 :                      ;
    3498/ 12.204 :                      ;       *IACE* SETS UP THE DEFAULT I/O PARAMETERS ACCORDING TO THE SWITCH
    3499/ 12.204 :                      ;       POSITIONS ON PORT MP.PUP1
    3500/ 12.204 :                      ;
    3501/ 12.204 :                      ;
    3502/ 12.204 :                      ;       ENTRY   NONE
    3503/ 12.204 :                      ;
    3504/ 12.204 :                      ;       EXIT    NONE
    3505/ 12.204 :                      ;
    3506/ 12.204 :                      ;       USES    A,B,C,D,E,H,L,F
    3507/ 12.204 :                      
    3508/ 12.204 :                      
    3509/ 12.204 : 076 200              IACE    MVI     A,AB.DLAB       ; SET DIVISOR LATCH ACCESS BIT
    3510/ 12.206 : 323 103                      OUT     AP.LCR
    3511/ 12.210 :                      
    3512/ 12.210 :                      ;       SET BAUD RATE DIVISORS TO DESIRED BAUD RATE
    3513/ 12.210 :                      ;
    3514/ 12.210 : 072 312 100                  LDA     MODES           ; GET SERIAL I/O MODE (POWER-UP SWITCH #1)
    3515/ 12.213 : 117                          MOV     C,A             ; SAVE IMAGE
    3516/ 12.214 : 346 017                      ANI     MS.BR           ; MASK FOR BAUD RATE SWITCHES
    3517/ 12.216 :                              CPU     Z80
    3518/ 12.216 : 050 001                      JR      Z,IACE0.5       ; IF SWITCHES ARE SET TO ZERO KEEP 110 BAUD
    3519/ 12.220 :                              CPU     8080
    3520/ 12.220 :                      
    3521/ 12.220 : 075                          DCR     A               ; ELSE, SWITCHES = SWITCHES-1
    3522/ 12.221 : 107                  IACE0.5 MOV     B,A
    3523/ 12.222 : 007                          RLC                     ; SWITCHES*2 = TABLE VECTOR
    3524/ 12.223 : 041 301 012                  LXI     H,BRTAB         ; POINT TO BAUD RATE DIVISOR TABLE
    3525/ 12.226 : 205                          ADD     L               ; ADD VECTOR
    3526/ 12.227 : 157                          MOV     L,A
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 60 - 2024-05-01 01:09:39 PM


    3527/ 12.230 : 176                          MOV     A,M             ; GET DESIRED DIVISOR LSB
    3528/ 12.231 : 323 100                      OUT     AP.DLL          ; OUTPUT TO ACE
    3529/ 12.233 : 043                          INX     H
    3530/ 12.234 : 176                          MOV     A,M             ; GET DIVISOR MSB
    3531/ 12.235 : 323 101                      OUT     AP.DLM          ; OUTPUT TO ACE
    3532/ 12.237 :                      
    3533/ 12.237 :                      ;       SET WORD CONFIGURATION
    3534/ 12.237 :                      ;
    3535/ 12.237 : 257                          XRA     A               ; CLEAR ACC
    3536/ 12.240 : 260                          ORA     B               ; SEE IF 110 BAUD
    3537/ 12.241 : 006 000                      MVI     B,0             ; SET ONE STOP BIT IF NOT 110 BAUD
    3538/ 12.243 :                              CPU     Z80
    3539/ 12.243 : 040 002                      JR      NZ,ACE1         ; IF (B) NOT 110 BAUD
    3540/ 12.245 :                              CPU     8080
    3541/ 12.245 :                      
    3542/ 12.245 : 006 004                      MVI     B,AB.2SB        ; ELSE, SET TWO STOP BITS IN B
    3543/ 12.247 : 171                  ACE1    MOV     A,C             ; GET PARITY CONFIGURATION
    3544/ 12.250 : 346 160                      ANI     P1.PEN+P1.EPS+P1.SPS
    3545/ 12.252 : 017                          RRC                     ; SHIFT INTO POSITION FOR UART
    3546/ 12.253 : 260                          ORA     B               ; ADD NUMBER OF STOP BITS
    3547/ 12.254 : 107                          MOV     B,A             ; SAVE RESULT
    3548/ 12.255 : 346 010                      ANI     P1.PEN/2        ; SEE IF PARITY WAS ON
    3549/ 12.257 : 076 002                      MVI     A,AB.7BW        ; SET SEVEN BIT WORD IF PARITY ON
    3550/ 12.261 :                              CPU     Z80
    3551/ 12.261 : 040 002                      JR      NZ,ACE2         ; IF PARITY ON
    3552/ 12.263 :                              CPU     8080
    3553/ 12.263 :                      
    3554/ 12.263 : 076 003                      MVI     A,AB.8BW        ; ELSE, SET AN 8 BIT WORD WITH NO PARITY
    3555/ 12.265 : 260                  ACE2    ORA     B               ; ADD TO STOP BITS AND PARITY SELECT/TYPE
    3556/ 12.266 : 323 103                      OUT     AP.LCR          ; OUTPUT WORD SIZE AND PARITY SELECTION TO ACE
    3557/ 12.270 :                      
    3558/ 12.270 : 076 001                      MVI     A,AB.ERDA       ; ENABLE RECEIVED DATA AVAILABLE INTERRUPTS
    3559/ 12.272 : 323 101                      OUT     AP.IER
    3560/ 12.274 : 076 003                      MVI     A,AB.DTR+AB.RTS ; SET DATA TERMINAL READY
    3561/ 12.276 : 323 104                      OUT     AP.MCR
    3562/ 12.300 : 311                          RET
    3563/ 12.301 :                      
    3564/ 12.301 :                      ;;      BRTAB - BAUD RATE DIVISOR TABLE
    3565/ 12.301 :                      ;
    3566/ 12.301 :                      ;       *BRTAB* CONTAINS THE ACE DIVISOR LSB FOLLOWED BY THE MSB
    3567/ 12.301 :                      ;
    3568/ 12.301 :                      ;       TABLE MUST RESIDE IN ONE PAGE
    3569/ 12.301 :                      
    3570/ 12.301 :                      
    3571/ 12.301 : =12.301O             BRTAB   EQU     $
    3572/ 12.301 : 321 006              BR110   DB      209,6           ; 110 BAUD
    3573/ 12.303 : 000 005              BR150   DB      0,5             ; 150 BAUD
    3574/ 12.305 : 173 002              BR300   DB      123,2           ; 300 BAUD
    3575/ 12.307 : 100 001              BR600   DB      64,1            ; 600 BAUD
    3576/ 12.311 : 240 000              BR1200  DB      160,0           ; 1200 BAUD
    3577/ 12.313 : 153 000              BR1800  DB      107,0           ; 1800 BAUD
    3578/ 12.315 : 140 000              BR2000  DB      96,0            ; 2000 BAUD
    3579/ 12.317 : 120 000              BR2400  DB      80,0            ; 2400 BAUD
    3580/ 12.321 : 065 000              BR3600  DB      53,0            ; 3600 BAUD
    3581/ 12.323 : 050 000              BR4800  DB      40,0            ; 4800 BAUD
    3582/ 12.325 : 033 000              BR7200  DB      27,0            ; 7200 BAUD
    3583/ 12.327 : 024 000              BR9600  DB      20,0            ; 9600 BAUD
    3584/ 12.331 : 012 000              BR19.2K DB      10,0            ; 19,200 BAUD
    3585/ 12.333 : (MACRO)                      ERRNZ   $/256-BRTAB/256
    3585/ 12.333 : =>FALSE                      IF ($/256-BRTAB/256) != 0
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 61 - 2024-05-01 01:09:39 PM


    3585/ 12.333 :                                ERROR Expression is not zero
    3585/ 12.333 : [14.001]                     ENDIF
    3586/ 12.333 :                      
    3587/ 12.333 :                      ;;      ICRT - INITIALIZE CRT CONTROLLER
    3588/ 12.333 :                      ;
    3589/ 12.333 :                      ;       *ICRT* SETS THE CRT CONTROLLER FOR AN 80 COLUMN, 24 LINE
    3590/ 12.333 :                      ;       DISPLAY WITH THE DISPLAY HOME ADDRESS AND THE CURSOR ADDRESS
    3591/ 12.333 :                      ;       AT *VRAMS*
    3592/ 12.333 :                      ;
    3593/ 12.333 :                      ;
    3594/ 12.333 :                      ;       ENTRY   NONE
    3595/ 12.333 :                      ;
    3596/ 12.333 :                      ;       EXIT    NONE
    3597/ 12.333 :                      ;
    3598/ 12.333 :                      ;       USES    A,B,C,H,L,F
    3599/ 12.333 :                      
    3600/ 12.333 :                      
    3601/ 12.333 : =12.333O             ICRT    EQU     $
    3602/ 12.333 :                      
    3603/ 12.333 : 333 040                      IN      MP.PUP2         ; GET CONFIGURATION SWITCH INFO
    3604/ 12.335 :                      
    3605/ 12.335 : 346 200                      ANI     P2.50HZ
    3606/ 12.337 : 041 351 017                  LXI     H,VPARD50       ; (H,L) = 50 HERTZ VIDEO PARAMETERS
    3607/ 12.342 :                              CPU     Z80
    3608/ 12.342 : 040 003                      JR      NZ,ICRT0.5      ; IF SET FOR 50 HZ
    3609/ 12.344 :                              CPU     8080
    3610/ 12.344 :                      
    3611/ 12.344 : 041 331 017                  LXI     H,VPARD60       ; (H,L) = 60 HERTZ VIDEO PARAMETERS
    3612/ 12.347 :                      
    3613/ 12.347 : 006 020              ICRT0.5 MVI     B,16            ; 16 REGISTERS TO INITIALIZE IN CRTC
    3614/ 12.351 : 016 000                      MVI     C,0             ; START WITH REGISTER 0
    3615/ 12.353 :                      
    3616/ 12.353 : 171                  ICRT1   MOV     A,C             ; GET REGISTER ADDRESS
    3617/ 12.354 : 323 140                      OUT     VP.AR           ; SET ADDRESS REGISTER IN CRTC
    3618/ 12.356 : 176                          MOV     A,M             ; GET DATA FOR CRTC REGISTER
    3619/ 12.357 : 323 141                      OUT     VP.REGO         ; OUTPUT TO REGISTER
    3620/ 12.361 : 014                          INR     C               ; POINT TO NEXT REGISTER
    3621/ 12.362 : 043                          INX     H               ; POINT TO NEXT REGISTER'S DATA
    3622/ 12.363 :                              CPU     Z80
    3623/ 12.363 : 020 366                      DJNZ    ICRT1           ; IF NOT DONE WITH ALL REGISTERS
    3624/ 12.365 :                              CPU     8080
    3625/ 12.365 :                      
    3626/ 12.365 : 311                          RET
    3627/ 12.366 :                      
    3628/ 12.366 :                      ;;      IDT - IDENTIFY TERMINAL
    3629/ 12.366 :                      ;
    3630/ 12.366 :                      ;       *IDT* IDENTIFIES THE TERMINAL AS A DEC VT52 SO THAT EXISTING DEC
    3631/ 12.366 :                      ;       SOFTWARE WHICH INTERROGATES THE CONSOLE TYPE WILL OPERATE AS IT
    3632/ 12.366 :                      ;       WOULD WITH A VT52
    3633/ 12.366 :                      ;
    3634/ 12.366 :                      ;
    3635/ 12.366 :                      ;       ENTRY   NONE
    3636/ 12.366 :                      ;
    3637/ 12.366 :                      ;       EXIT    NONE
    3638/ 12.366 :                      ;
    3639/ 12.366 :                      ;       USES    A,B,C,H,L,F
    3640/ 12.366 :                      
    3641/ 12.366 : 315 100 015          IDT     CALL    PSOF            ; REPLY WITH 'ESC / K'
    3642/ 12.371 : 033 057 313                  DB      ESC,'/','K'+200Q
    3643/ 12.374 : 311                          RET
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 62 - 2024-05-01 01:09:39 PM


    3644/ 12.375 :                      
    3645/ 12.375 :                      ;;      ARAMP - ANSI RESET ALL MODES TO POWERUP CONFIGURATION
    3646/ 12.375 :                      ;
    3647/ 12.375 :                      ;       *ARAMP* RESETS ALL FLAGS ETC., TO THE CONFIGURATION OF THE
    3648/ 12.375 :                      ;       POWER UP SWITCHES.
    3649/ 12.375 :                      ;
    3650/ 12.375 :                      ;
    3651/ 12.375 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    3652/ 12.375 :                      ;
    3653/ 12.375 :                      ;       EXIT    NONE
    3654/ 12.375 :                      ;
    3655/ 12.375 :                      ;       USES    ALL
    3656/ 12.375 :                      
    3657/ 12.375 :                      
    3658/ 12.375 : 170                  ARAMP   MOV     A,B             ; SEE IF PN WAS INPUT
    3659/ 12.376 : 267                          ORA     A
    3660/ 12.377 : 300                          RNZ                     ; IF PN WAS INPUT, ILLEGAL, EXIT
    3661/ 13.000 :                      
    3662/ 13.000 :                      ;       JMP     RAMP            ; ELSE, CONTINUE LIKE IN HEATH MODE
    3663/ 13.000 :                      ;       ERRNZ   $-RAMP
    3664/ 13.000 :                      
    3665/ 13.000 :                      ;;      RAMP - RESET ALL MODES TO POWER UP CONFIGURATION
    3666/ 13.000 :                      ;
    3667/ 13.000 :                      ;       RAMP PROVIDES THE SAME FUNCTION AS A HARDWARE RESET
    3668/ 13.000 :                      ;
    3669/ 13.000 :                      ;
    3670/ 13.000 :                      ;       ENTRY   NONE
    3671/ 13.000 :                      ;
    3672/ 13.000 :                      ;       EXIT    NONE
    3673/ 13.000 :                      ;
    3674/ 13.000 :                      ;       USES    ALL
    3675/ 13.000 :                      
    3676/ 13.000 :                      
    3677/ 13.000 : 363                  RAMP    DI                      ; LOCK OUT THE WORLD
    3678/ 13.001 :                      ;       JMP     INIT
    3679/ 13.001 :                      ;       ERRNZ   $-INIT
    3680/ 13.001 :                      
    3681/ 13.001 :                      
    3682/ 13.001 :                      ;;;     INIT - INITIALIZE THE SYSTEM ON POWER UP
    3683/ 13.001 :                      ;
    3684/ 13.001 :                      ;       INIT INITIALIZES THE SYSTEM BY CLEARING THE I/O PORTS, INITIALIZING
    3685/ 13.001 :                      ;       THE SCRATCHPAD, INITIALIZING THE CRT CONTROLLER, INITIALIZING THE
    3686/ 13.001 :                      ;       ACE SERIAL PORT, AND JUMPING TO THE MAIN CONTROL LOOP
    3687/ 13.001 :                      
    3688/ 13.001 :                      
    3689/ 13.001 : =13.001O             INIT    EQU        $
    3690/ 13.001 :                      ;       JMP        IRAM         ; INITIALIZE RAM
    3691/ 13.001 :                      
    3692/ 13.001 :                      
    3693/ 13.001 :                      ;;      IRAM - INITIALIZE RAM
    3694/ 13.001 :                      ;
    3695/ 13.001 :                      ;       *IRAM* SETS ALL RAM LOCATIONS TO ZERO AND THEN COPIES IN THE
    3696/ 13.001 :                      ;       DEFAULT DATA FROM PRSTAB
    3697/ 13.001 :                      ;
    3698/ 13.001 :                      ;
    3699/ 13.001 :                      ;       ENTRY   NONE
    3700/ 13.001 :                      ;
    3701/ 13.001 :                      ;       EXIT    NONE
    3702/ 13.001 :                      ;
    3703/ 13.001 :                      ;       USES    A,B,C,D,E,H,L,F
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 63 - 2024-05-01 01:09:39 PM


    3704/ 13.001 :                      
    3705/ 13.001 :                      
    3706/ 13.001 : 041 000 100          IRAM    LXI     H,RAM           ; POINT TO BEGINNING OF SCRATCHPAD
    3707/ 13.004 : 021 001 100                  LXI     D,RAM+1         ; COPY TO NEXT LOCATION
    3708/ 13.007 : 001 377 000                  LXI     B,255           ; COPY 255 TIMES
    3709/ 13.012 : 066 000                      MVI     M,0             ; PLACE ZERO IN FOR COPY
    3710/ 13.014 :                              CPU     Z80
    3711/ 13.014 : 355 260                      LDIR
    3712/ 13.016 :                              CPU     8080
    3713/ 13.016 :                      
    3714/ 13.016 : 041 244 100                  LXI     H,KBDF          ; KEYBOARD FIFO
    3715/ 13.021 : 042 264 100                  SHLD    KBDFP
    3716/ 13.024 : 076 030                      MVI     A,24            ; SET VIDEO INFORMATION FOR NMI
    3717/ 13.026 : 062 276 100                  STA     VI.VD           ; VIDEO DISPLAYED
    3718/ 13.031 : 046 110                      MVI     H,VB.CBE+8      ; FAST BLINKING CURSOR ON LINE 0
    3719/ 13.033 : 056 010                      MVI     L,8             ; END ON LINE 8 TOO
    3720/ 13.035 : 042 277 100                  SHLD    VI.CSE
    3721/ 13.040 :                      
    3722/ 13.040 : 333 000                      IN      MP.PUP1         ; INPUT POWER-UP SWITCH #1
    3723/ 13.042 :                      
    3724/ 13.042 : 062 312 100                  STA     MODES           ; SAVE AS SERIAL I/O MODE
    3725/ 13.045 :                      
    3726/ 13.045 : 333 040                      IN      MP.PUP2         ; INPUT POWER SWITCH #2
    3727/ 13.047 : 346 177                      ANI     01111111B       ; TOSS 50HZ BIT
    3728/ 13.051 :                      
    3729/ 13.051 : 062 310 100                  STA     MODEB           ; SAVE AS SPECIAL SETUP MODE
    3730/ 13.054 :                      
    3731/ 13.054 : 333 040                      IN      MP.PUP2         ; INPUT POWER-UP SWITCH #2
    3732/ 13.056 : 346 177                      ANI     377Q-P2.50HZ    ; GET ALL BUT LINE FREQUENCY SWITCHES
    3733/ 13.060 : 062 310 100                  STA     MODEB           ; SAVE AS MODEB FLAGS
    3734/ 13.063 : 257                          XRA     A               ; CLEAR ALL INTERNAL FLAGS
    3735/ 13.064 : 062 311 100                  STA     MODEI           ; SAVE AS INTERNAL MODE WITH ALL OTHER FLAGS = ZERO
    3736/ 13.067 :                      
    3737/ 13.067 : 061 000 101                  LXI     SP,RAM+256      ; SET STACK POINTER TO TOP OF RAM
    3738/ 13.072 :                      
    3739/ 13.072 : 041 000 370                  LXI     H,VRAMS         ; SET HOME, CURRENT LINE, AND CURSOR ADDRESSES
    3740/ 13.075 : 042 266 100                  SHLD    SHOME
    3741/ 13.100 : 042 270 100                  SHLD    CLSA
    3742/ 13.103 : 042 274 100                  SHLD    CURAD
    3743/ 13.106 : 021 000 010                  LXI     D,2048          ; WRITE SPACES TO ALL OF VIDEO RAM
    3744/ 13.111 : 315 160 016                  CALL    WSV
    3745/ 13.114 :                      
    3746/ 13.114 :                      ;;      CONTINUE INITIALIZATION OF SYSTEM
    3747/ 13.114 :                      ;
    3748/ 13.114 :                      
    3749/ 13.114 : 315 333 012          INIT1   CALL    ICRT            ; INITIALIZE CRTC
    3750/ 13.117 : 315 204 012                  CALL    IACE            ; INITIALIZE ACE
    3751/ 13.122 : 315 371 010                  CALL    EC              ; GET PROPER CURSOR TYPE
    3752/ 13.125 :                              CPU     Z80
    3753/ 13.125 : 355 126                      IM      1               ; SET INTERRUPT MODE 1
    3754/ 13.127 :                              CPU     8080
    3755/ 13.127 : 076 000                      MVI     A,0             ; CAUSE FIRST NMI
    3756/ 13.131 : 323 144                      OUT     VP.AR+VB.NMI
    3757/ 13.133 : 373                          EI                      ; LET IT ALL BEGIN
    3758/ 13.134 : 303 004 000                  JMP     MAIN            ; GO TO MAIN LOOP
    3759/ 13.137 :                      
    3760/ 13.137 :                      ;;      MPY80 - MULTIPLY BY EIGHTY
    3761/ 13.137 :                      ;
    3762/ 13.137 :                      ;       MULTIPLY AN 8 BIT NUMBER BY EIGHTY
    3763/ 13.137 :                      ;
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 64 - 2024-05-01 01:09:39 PM


    3764/ 13.137 :                      ;
    3765/ 13.137 :                      ;       ENTRY   (A) = MULTIPLICAND
    3766/ 13.137 :                      ;
    3767/ 13.137 :                      ;       EXIT    (H,L) = (A)*80
    3768/ 13.137 :                      ;
    3769/ 13.137 :                      ;       USES    D,E,H,L,F
    3770/ 13.137 :                      
    3771/ 13.137 : 157                  MPY80   MOV     L,A             ; VALUE TO MULTIPLY TO (H,L)
    3772/ 13.140 : 046 000                      MVI     H,0
    3773/ 13.142 : 051                          DAD     H               ; *16
    3774/ 13.143 : 051                          DAD     H
    3775/ 13.144 : 051                          DAD     H
    3776/ 13.145 : 051                          DAD     H
    3777/ 13.146 : 124                          MOV     D,H             ; *5
    3778/ 13.147 : 135                          MOV     E,L
    3779/ 13.150 : 031                          DAD     D
    3780/ 13.151 : 031                          DAD     D
    3781/ 13.152 : 031                          DAD     D
    3782/ 13.153 : 031                          DAD     D
    3783/ 13.154 : 311                          RET
    3784/ 13.155 :                      
    3785/ 13.155 :                      
    3786/ 13.155 :                      ;;      NKC - NO KEYBOARD CLICK
    3787/ 13.155 :                      ;
    3788/ 13.155 :                      ;       *NKC* SETS THE FLAG WHICH DISABLES THE KEYBOARD CLICK DURING *AKI*
    3789/ 13.155 :                      ;
    3790/ 13.155 :                      ;
    3791/ 13.155 :                      ;       ENTRY   (B,C) = MODEB
    3792/ 13.155 :                      ;
    3793/ 13.155 :                      ;       EXIT    NONE
    3794/ 13.155 :                      ;
    3795/ 13.155 :                      ;       USES    A,F
    3796/ 13.155 :                      
    3797/ 13.155 :                      
    3798/ 13.155 : 012                  NKC     LDAX    B               ; GET CURRENT FLAGS
    3799/ 13.156 : 366 002                      ORI     MB.NOTK         ; SET NO TICK
    3800/ 13.160 : 002                          STAX    B
    3801/ 13.161 : 311                          RET
    3802/ 13.162 :                      
    3803/ 13.162 :                      ;;      PCA - PERFORM CURSOR ADDRESSING
    3804/ 13.162 :                      ;
    3805/ 13.162 :                      ;       *PCA* SETS THE CURSOR LINE AND COLUMN VALUES ACCORDING TO THE
    3806/ 13.162 :                      ;       NEXT TWO BYTES FROM THE INPUT FIFO.  LINE NUMBER 40Q IS THE TOP
    3807/ 13.162 :                      ;       LINE OF THE DISPLAY.  COLUMN 40Q IS THE LEFTMOST COLUMN.  AN ILLEGAL
    3808/ 13.162 :                      ;       LINE NUMBER WILL CAUSE THE CURSOR TO REMAIN ON THE CURRENT LINE.
    3809/ 13.162 :                      ;       AN ILLEGAL COLUMN NUMBER WILL CAUSE THE CURSOR TO BE PLACED AT
    3810/ 13.162 :                      ;       THE END OF THE CURRENT LINE.
    3811/ 13.162 :                      ;
    3812/ 13.162 :                      ;
    3813/ 13.162 :                      ;       ENTRY   NONE
    3814/ 13.162 :                      ;
    3815/ 13.162 :                      ;       EXIT    NONE
    3816/ 13.162 :                      ;
    3817/ 13.162 :                      ;       USES    A,B,C,D,E,H,L,F
    3818/ 13.162 :                      
    3819/ 13.162 : 315 070 012          PCA     CALL    FNCP            ; FETCH NEXT INPUT FIFO CHARACTER
    3820/ 13.165 : 376 030                      CPI     CAN             ; SEE IF TO CANCEL THIS SEQUENCE
    3821/ 13.167 : 310                          RZ                      ; IF CANCEL
    3822/ 13.170 :                      
    3823/ 13.170 :                      ;       HAVE A LINE NUMBER, PROCESS IT
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 65 - 2024-05-01 01:09:39 PM


    3824/ 13.170 :                      ;
    3825/ 13.170 : 376 040              PCA1    CPI     40Q             ; SEE IF LINE NUMBER IN RANGE
    3826/ 13.172 :                              CPU     Z80
    3827/ 13.172 : 070 024                      JR      C,PCA2          ; IF LESS THAN LINE ZERO, USE SAME LINE
    3828/ 13.174 :                              CPU     8080
    3829/ 13.174 :                      
    3830/ 13.174 : 376 070                      CPI     40Q+24
    3831/ 13.176 :                              CPU     Z80
    3832/ 13.176 : 070 013                      JR      C,PCA1.5        ; IF LINE 23 OR LESS
    3833/ 13.200 :                      
    3834/ 13.200 : 040 016                      JR      NZ,PCA2         ; IF NOT 24, USE SAVE
    3835/ 13.202 :                              CPU     8080
    3836/ 13.202 :                      
    3837/ 13.202 : 107                          MOV     B,A             ; ELSE, SAVE LINE NUMBER
    3838/ 13.203 : 072 311 100                  LDA     MODEI           ; GET MODE FLAGS
    3839/ 13.206 : 346 200                      ANI     MI.25L          ; SEE IF 25TH LINE IS ENABLED
    3840/ 13.210 :                              CPU     Z80
    3841/ 13.210 : 050 006                      JR      Z,PCA2          ; IF LINE 24 REQUESTED AND NOT AVAILABLE
    3842/ 13.212 :                              CPU     8080
    3843/ 13.212 :                      
    3844/ 13.212 : 170                          MOV     A,B             ; ELSE, GET LINE 24 VALUE BACK AND USE IT
    3845/ 13.213 :                      
    3846/ 13.213 : 326 040              PCA1.5  SUI     40Q             ; MASK FOR LINE VALUE
    3847/ 13.215 : 062 273 100                  STA     CURVP           ; SAVE NEW VERTICAL POSITION
    3848/ 13.220 :                      
    3849/ 13.220 : 315 070 012          PCA2    CALL    FNCP            ; FETCH NEXT INPUT FIFO CHARACTER
    3850/ 13.223 : 376 030                      CPI     CAN             ; SEE IF TO CANCEL NOW
    3851/ 13.225 :                              CPU     Z80
    3852/ 13.225 : 050 017                      JR      Z,PCA6          ; IF TO CANCEL
    3853/ 13.227 :                              CPU     8080
    3854/ 13.227 :                      
    3855/ 13.227 :                      ;       HAVE A COLUMN NUMBER
    3856/ 13.227 :                      ;
    3857/ 13.227 : 376 040              PCA3    CPI     40Q             ; SEE IF IN RANGE
    3858/ 13.231 :                              CPU     Z80
    3859/ 13.231 : 070 004                      JR      C,PCA4          ; IF LESS THAN COLUMN ZERO
    3860/ 13.233 :                              CPU     8080
    3861/ 13.233 :                      
    3862/ 13.233 : 376 160                      CPI     40Q+80
    3863/ 13.235 :                              CPU     Z80
    3864/ 13.235 : 070 002                      JR      C,PCA5          ; IF COLUMN ZERO THRU 79
    3865/ 13.237 :                              CPU     8080
    3866/ 13.237 :                      
    3867/ 13.237 : 076 157              PCA4    MVI     A,40Q+79        ; OUT OF RANGE, SET CURSOR TO END OF LINE
    3868/ 13.241 : 326 040              PCA5    SUI     40Q             ; MASK FOR COLUMN VALUE
    3869/ 13.243 : 062 272 100                  STA     CURHP           ; UPDATE COLUMN COUNTER
    3870/ 13.246 :                      
    3871/ 13.246 : 303 322 015          PCA6    JMP     SNCP            ; SET CURSOR POSITION
    3872/ 13.251 :                      
    3873/ 13.251 :                      ;;      PCIF - PLACE CHARACTER IN FIFO
    3874/ 13.251 :                      ;
    3875/ 13.251 :                      ;       *PCIF* PLACES A SINGLE CHARACTER INTO THE INPUT FIFO
    3876/ 13.251 :                      ;
    3877/ 13.251 :                      ;
    3878/ 13.251 :                      ;       ENTRY   (A) = CHARACTER
    3879/ 13.251 :                      ;
    3880/ 13.251 :                      ;       EXIT    (A) = CHARACTER
    3881/ 13.251 :                      ;               'C' = SET IF NO ROOM IN FIFO
    3882/ 13.251 :                      ;
    3883/ 13.251 :                      ;       USES    A,B,C,H,L,F
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 66 - 2024-05-01 01:09:39 PM


    3884/ 13.251 :                      
    3885/ 13.251 :                      
    3886/ 13.251 : 117                  PCIF    MOV     C,A             ; SAVE CHARACTER FOR FIFO
    3887/ 13.252 : 072 241 100                  LDA     IFC             ; GET INPUT FIFO CHARACTER
    3888/ 13.255 : 376 200                      CPI     IFMAX           ; CHECK FOR FIFO ALREADY FULL
    3889/ 13.257 : 067                          STC                     ; SET 'C' FOR FIFO FULL
    3890/ 13.260 : 312 223 010                  JZ      DING            ; DING BELL AND EXIT
    3891/ 13.263 :                      
    3892/ 13.263 : 107                          MOV     B,A             ; ELSE, SAVE FIFO COUNTER
    3893/ 13.264 : 072 240 100                  LDA     IFP             ; GET INPUT FIFO POINTER
    3894/ 13.267 : 200                          ADD     B               ; ADD COUNT FOR VECTOR TO NEXT CURSOR ADDRESS
    3895/ 13.270 : 346 177                      ANI     IFCMSK          ; KEEP VECTOR IN FIFO
    3896/ 13.272 : 041 000 100                  LXI     H,INFI          ; POINT TO INPUT FIFO
    3897/ 13.275 : 205                          ADD     L               ; ADD VECTOR
    3898/ 13.276 : 157                          MOV     L,A
    3899/ 13.277 : 161                          MOV     M,C             ; PLACE CHARACTER IN FIFO
    3900/ 13.300 : 170                          MOV     A,B             ; INCREMENT INPUT FIFO COUNTER
    3901/ 13.301 : 074                          INR     A
    3902/ 13.302 : 062 241 100                  STA     IFC
    3903/ 13.305 : 067                          STC                     ; CLEAR 'C' TO SHOW THAT CHARACTER WAS PLACED
    3904/ 13.306 : 077                          CMC
    3905/ 13.307 : 171                          MOV     A,C             ; CHARACTER TO (A)
    3906/ 13.310 : 311                          RET
    3907/ 13.311 :                      
    3908/ 13.311 :                      ;;      PCOF - PLACE CHARACTER IN OUTPUT FIFO
    3909/ 13.311 :                      ;
    3910/ 13.311 :                      ;       *PCOF* PLACES A SINGLE CHARACTER INTO THE OUTPUT FIFO
    3911/ 13.311 :                      ;
    3912/ 13.311 :                      ;
    3913/ 13.311 :                      ;       ENTRY   (A) = CHARACTER
    3914/ 13.311 :                      ;
    3915/ 13.311 :                      ;       EXIT    (A) = CHARACTER
    3916/ 13.311 :                      ;               'C' = SET IF NO ROOM IN FIFO
    3917/ 13.311 :                      ;
    3918/ 13.311 :                      ;       USES    A,B,C,H,L,F
    3919/ 13.311 :                      
    3920/ 13.311 :                      
    3921/ 13.311 : 117                  PCOF    MOV     C,A             ; SAVE CHARACTER
    3922/ 13.312 : 072 311 100                  LDA     MODEI           ; GET MODE FLAGS
    3923/ 13.315 : 346 010                      ANI     MI.ONLN         ; IS TERMINAL ON-LINE?
    3924/ 13.317 :                              CPU     Z80
    3925/ 13.317 : 040 005                      JR      NZ,PCOF1        ; IF TERMINAL IS ON-LINE
    3926/ 13.321 :                              CPU     8080
    3927/ 13.321 :                      
    3928/ 13.321 :                      ;       TERMINAL IS OFF-LINE, PLACE CHARACTER IN INPUT FIFO INSTEAD
    3929/ 13.321 :                      ;
    3930/ 13.321 : 171                          MOV     A,C
    3931/ 13.322 : 315 251 013                  CALL    PCIF            ; PLACE CHARACTER IN INPUT FIFO
    3932/ 13.325 : 311                          RET
    3933/ 13.326 :                      
    3934/ 13.326 : 072 312 100          PCOF1   LDA     MODES           ; GET MODE FOR SERIAL I/O
    3935/ 13.331 : 346 200                      ANI     MS.FDX          ; IS FULL DUPLEX SELECTED?
    3936/ 13.333 : 171                          MOV     A,C             ; (A) = CHARACTER
    3937/ 13.334 : 314 251 013                  CZ      PCIF            ; IF HALF DUPLEX, PLACE CHARACTER IN BOTH FIFOS
    3938/ 13.337 :                      
    3939/ 13.337 : 072 243 100                  LDA     OFC             ; GET OUTPUT FIFO COUNTER
    3940/ 13.342 : 376 040                      CPI     OFMAX           ; SEE IF FIFO IS FULL
    3941/ 13.344 : 067                          STC                     ; SET 'C' FOR FULL
    3942/ 13.345 :                              CPU     Z80
    3943/ 13.345 : 050 025                      JR      Z,PCOF2         ; IF FIFO IS ALREADY FULL
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 67 - 2024-05-01 01:09:39 PM


    3944/ 13.347 :                              CPU     8080
    3945/ 13.347 :                      
    3946/ 13.347 : 107                          MOV     B,A             ; SAVE CURRENT COUNT
    3947/ 13.350 : 072 242 100                  LDA     OFP             ; GET OUTPUT FIFO POINTER
    3948/ 13.353 : 200                          ADD     B               ; ADD TO COUNT FOR VECTOR TO ADDRESS FOR THIS CHAR
    3949/ 13.354 : 346 037                      ANI     OFCMSK          ; KEEP VECTOR IN FIFO
    3950/ 13.356 : 041 200 100                  LXI     H,OUTF          ; POINT TO OUTPUT FIFO
    3951/ 13.361 : 205                          ADD     L               ; ADD VECTOR
    3952/ 13.362 : 157                          MOV     L,A
    3953/ 13.363 : 161                          MOV     M,C             ; PUT CHARACTER IN FIFO
    3954/ 13.364 : 170                          MOV     A,B             ; INCREMENT OUTPUT FIFO COUNTER
    3955/ 13.365 : 074                          INR     A
    3956/ 13.366 : 062 243 100                  STA     OFC
    3957/ 13.371 : 067                          STC                     ; CLEAR 'C' TO SHOW CHARACTER PLACED
    3958/ 13.372 : 077                          CMC
    3959/ 13.373 : 171                          MOV     A,C             ; (A) = OUTPUT CHARACTER
    3960/ 13.374 : 311                  PCOF2   RET
    3961/ 13.375 :                      
    3962/ 13.375 :                      ;;      PCOFT - PLACE CHARACTER IN OUTPUT FIFO DURING TASK TIME
    3963/ 13.375 :                      ;
    3964/ 13.375 :                      ;
    3965/ 13.375 :                      ;       ENTRY   (A) = CHARACTER
    3966/ 13.375 :                      ;
    3967/ 13.375 :                      ;       EXIT    'C' SET IF NO ROOM
    3968/ 13.375 :                      ;
    3969/ 13.375 :                      ;       USES    A,B,C,H,L,F
    3970/ 13.375 :                      
    3971/ 13.375 :                      
    3972/ 13.375 : 363                  PCOFT   DI                      ; LOCK OUT INTERRUPT CHARACTER REMOVALS
    3973/ 13.376 : 315 311 013                  CALL    PCOF            ; PLACE CHARACTER
    3974/ 14.001 : 373                          EI                      ; ALLOW INTERRUPTS NOW
    3975/ 14.002 : 311                          RET
    3976/ 14.003 :                      
    3977/ 14.003 :                      ;;      PCRLF - PERFORM CARRIAGE RETURN AND/OR LINE FEED
    3978/ 14.003 :                      ;
    3979/ 14.003 :                      ;       *PCRLF* PERFORMS A LINE FEED PRIOR TO PERFORMING A CARRIAGE
    3980/ 14.003 :                      ;       RETURN IF THE AUTO LINE FEED FUNCTION IS SELECTED
    3981/ 14.003 :                      ;
    3982/ 14.003 :                      ;
    3983/ 14.003 :                      ;       ENTRY   NONE
    3984/ 14.003 :                      ;
    3985/ 14.003 :                      ;       EXIT    NONE
    3986/ 14.003 :                      ;
    3987/ 14.003 :                      ;       USES    A,H,L,F
    3988/ 14.003 :                      
    3989/ 14.003 :                      
    3990/ 14.003 : 072 310 100          PCRLF   LDA     MODEB           ; GET MODE FLAGS
    3991/ 14.006 : 346 010                      ANI     MB.ALF          ; SEE IF AUTO LINE FEED IS SELECTED
    3992/ 14.010 : 304 354 006                  CNZ     PLF             ; IF SELECTED
    3993/ 14.013 :                      ;       JMP     PCR             ; PERFORM CARRIAGE RETURN
    3994/ 14.013 :                      ;       ERRNZ   $-PCT
    3995/ 14.013 :                      
    3996/ 14.013 :                      ;;      PCR - PERFORM CARRIAGE RETURN
    3997/ 14.013 :                      ;
    3998/ 14.013 :                      ;       PCR MOVES THE CURSOR TO THE BEGINNING OF THE CURRENT LINE
    3999/ 14.013 :                      ;
    4000/ 14.013 :                      ;
    4001/ 14.013 :                      ;       ENTRY   NONE
    4002/ 14.013 :                      ;
    4003/ 14.013 :                      ;       EXIT    NONE
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 68 - 2024-05-01 01:09:39 PM


    4004/ 14.013 :                      ;
    4005/ 14.013 :                      ;       USES    A,H,L,F
    4006/ 14.013 :                      
    4007/ 14.013 :                      
    4008/ 14.013 : 076 000              PCR     MVI     A,0             ; SET CURSOR HORIZONTAL POSITION TO ZERO
    4009/ 14.015 : 062 272 100                  STA     CURHP
    4010/ 14.020 : 052 270 100                  LHLD    CLSA            ; SET CURSOR ADDRESS TO BEGINNING OF LINE
    4011/ 14.023 : 042 274 100                  SHLD    CURAD
    4012/ 14.026 :                      
    4013/ 14.026 :                      
    4014/ 14.026 : 311                          RET                     ; EXIT
    4015/ 14.027 :                      
    4016/ 14.027 :                      ;;      PDC - PERFORM DELETE CHARACTER
    4017/ 14.027 :                      ;
    4018/ 14.027 :                      ;       *PDC* DELETES THE CHARACTER AT THE CURSOR POSITION BY MOVING
    4019/ 14.027 :                      ;       THE REMAINING CHARACTERS ON THE LINE TO THE LEFT ONE COLUMN AND
    4020/ 14.027 :                      ;       INSERTING A SPACE IN THE LAST COLUMN ON THE LINE
    4021/ 14.027 :                      ;
    4022/ 14.027 :                      ;
    4023/ 14.027 :                      ;       ENTRY   NONE
    4024/ 14.027 :                      ;
    4025/ 14.027 :                      ;       EXIT    NONE
    4026/ 14.027 :                      ;
    4027/ 14.027 :                      ;       USES    A,B,C,D,E,H,L,F
    4028/ 14.027 :                      
    4029/ 14.027 :                      
    4030/ 14.027 : =14.027O             PDC     EQU     $
    4031/ 14.027 :                      
    4032/ 14.027 :                      
    4033/ 14.027 : 072 272 100                  LDA     CURHP           ; GET CURRENT COLUMN POSITION
    4034/ 14.032 :                              CPU     Z80
    4035/ 14.032 : 355 104                      NEG                     ; SUBTRACT FORM 79 FOR NUMBER OF MOVES
    4036/ 14.034 :                              CPU     8080
    4037/ 14.034 : 306 117                      ADI     79
    4038/ 14.036 : 117                          MOV     C,A             ; SAVE RESULT
    4039/ 14.037 : 006 000                      MVI     B,0
    4040/ 14.041 :                              CPU     Z80
    4041/ 14.041 : 355 133 274 100              LD      DE,(CURAD)      ; (D,E) = CURSOR ADDRESS
    4042/ 14.045 : 050 022                      JR      Z,PDC2          ; IF ALREADY AT COLUMN 79
    4043/ 14.047 :                              CPU     8080
    4044/ 14.047 :                      
    4045/ 14.047 : 052 274 100                  LHLD    CURAD           ; (H,L) = CURSOR ADDRESS + 1
    4046/ 14.052 : 043                          INX     H
    4047/ 14.053 :                      
    4048/ 14.053 : 172                  PDC1    MOV     A,D             ; KEEP POINTERS IN VIDEO RAM
    4049/ 14.054 : 366 370                      ORI     VRAMS/256
    4050/ 14.056 : 127                          MOV     D,A
    4051/ 14.057 : 174                          MOV     A,H
    4052/ 14.060 : 366 370                      ORI     VRAMS/256
    4053/ 14.062 : 147                          MOV     H,A
    4054/ 14.063 :                              CPU     Z80
    4055/ 14.063 : 355 240                      LDI                     ; COPY FROM (H,L) TO (D,E)
    4056/ 14.065 :                              CPU     8080
    4057/ 14.065 : 170                          MOV     A,B             ; SEE IF (B,C) = ZERO
    4058/ 14.066 : 261                          ORA     C
    4059/ 14.067 :                              CPU     Z80
    4060/ 14.067 : 040 362                      JR      NZ,PDC1         ; IF NOT DONE WITH LAST CHARACTER
    4061/ 14.071 :                              CPU     8080
    4062/ 14.071 :                      
    4063/ 14.071 : 076 040              PDC2    MVI     A,' '           ; PUT SPACE IN LAST COLUMN
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 69 - 2024-05-01 01:09:39 PM


    4064/ 14.073 : 022                          STAX    D
    4065/ 14.074 : 311                          RET
    4066/ 14.075 :                      
    4067/ 14.075 :                      ;;      PDL - PERFORM DELETE LINE
    4068/ 14.075 :                      ;
    4069/ 14.075 :                      ;       *PDL* MOVES THE REMAINING LINES OF THE DISPLAY UP ONE LINE, WRITES
    4070/ 14.075 :                      ;       SPACES INTO THE LAST LINE, AND MOVES THE CURSOR TO THE BEGINNING
    4071/ 14.075 :                      ;       OF THE CURRENT LINE.
    4072/ 14.075 :                      ;
    4073/ 14.075 :                      ;
    4074/ 14.075 :                      ;       ENTRY   NONE
    4075/ 14.075 :                      ;
    4076/ 14.075 :                      ;       EXIT    NONE
    4077/ 14.075 :                      ;
    4078/ 14.075 :                      ;       USES    A,B,C,D,E,H,L,F
    4079/ 14.075 :                      
    4080/ 14.075 :                      
    4081/ 14.075 : =14.075O             PDL     EQU     $
    4082/ 14.075 :                      
    4083/ 14.075 : 076 000                      MVI     A,0             ; SET COLUMN COUNTER TO ZERO
    4084/ 14.077 : 062 272 100                  STA     CURHP
    4085/ 14.102 : 052 270 100                  LHLD    CLSA            ; SET *CURAD* TO BEGINNING OF THIS LINE
    4086/ 14.105 : 042 274 100                  SHLD    CURAD
    4087/ 14.110 : 353                          XCHG                    ; (D,E) = BEGINNING OF THIS LINE
    4088/ 14.111 : 041 120 000                  LXI     H,80            ; SET (H,L) TO BEGINNING OF NEXT LINE
    4089/ 14.114 : 031                          DAD     D
    4090/ 14.115 : 072 273 100                  LDA     CURVP           ; GET CURRENT LINE NUMBER
    4091/ 14.120 :                              CPU     Z80
    4092/ 14.120 : 355 104                      NEG                     ; SUBTRACT FROM 23 FOR NUMBER OF LINES TO MOVE
    4093/ 14.122 :                              CPU     8080
    4094/ 14.122 : 306 027                      ADI     23
    4095/ 14.124 :                              CPU     Z80
    4096/ 14.124 : 050 031                      JR      Z,PDL2          ; IF ON LINE 23, JUST BLANK IT
    4097/ 14.126 :                              CPU     8080
    4098/ 14.126 :                      
    4099/ 14.126 : 117                          MOV     C,A             ; LINES LEFT*5 = MOD 16 MOVE COUNT
    4100/ 14.127 : 201                          ADD     C
    4101/ 14.130 : 201                          ADD     C
    4102/ 14.131 : 201                          ADD     C
    4103/ 14.132 : 201                          ADD     C
    4104/ 14.133 : 117                          MOV     C,A
    4105/ 14.134 :                      
    4106/ 14.134 : 305                  PDL1    PUSH    B               ; SAVE (B,C)
    4107/ 14.135 : 172                          MOV     A,D             ; KEEP POINTERS IN VIDEO RAM
    4108/ 14.136 : 366 370                      ORI     VRAMS/256
    4109/ 14.140 : 127                          MOV     D,A
    4110/ 14.141 : 174                          MOV     A,H
    4111/ 14.142 : 366 370                      ORI     VRAMS/256
    4112/ 14.144 : 147                          MOV     H,A
    4113/ 14.145 : 016 020                      MVI     C,16            ; COPY 16 BYTES
    4114/ 14.147 : 006 000                      MVI     B,0
    4115/ 14.151 :                              CPU     Z80
    4116/ 14.151 : 355 260                      LDIR
    4117/ 14.153 :                              CPU     8080
    4118/ 14.153 : 301                          POP     B               ; RESTORE (B,C)
    4119/ 14.154 : 015                          DCR     C               ; DECREMENT MOD 16 COUNT
    4120/ 14.155 :                              CPU     Z80
    4121/ 14.155 : 040 355                      JR      NZ,PDL1         ; IF NOT DONE, DO 16 MORE
    4122/ 14.157 :                              CPU     8080
    4123/ 14.157 :                      
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 70 - 2024-05-01 01:09:39 PM


    4124/ 14.157 : 353                  PDL2    XCHG                    ; (H,L) = LINE 23
    4125/ 14.160 : 006 005                      MVI     B,5             ; ERASE 80 CHARACTERS (5*16)
    4126/ 14.162 : 303 212 016                  JMP     WSVA            ; WRITE 80 SPACES AND EXIT
    4127/ 14.165 :                      
    4128/ 14.165 :                      ;;      PIC - PERFORM INSERT CHARACTER
    4129/ 14.165 :                      ;
    4130/ 14.165 :                      ;       *PIC* MOVES ALL CHARACTERS THAT ARE AT AND TO THE RIGHT OF THE
    4131/ 14.165 :                      ;       CURSOR ONE COLUMN TO THE RIGHT
    4132/ 14.165 :                      ;
    4133/ 14.165 :                      ;
    4134/ 14.165 :                      ;       ENTRY   NONE
    4135/ 14.165 :                      ;
    4136/ 14.165 :                      ;       EXIT    NONE
    4137/ 14.165 :                      ;
    4138/ 14.165 :                      ;       USES    A,B,C,D,E,H,L,F
    4139/ 14.165 :                      
    4140/ 14.165 :                      
    4141/ 14.165 : =14.165O             PIC     EQU     $
    4142/ 14.165 :                      
    4143/ 14.165 :                      
    4144/ 14.165 : 072 272 100                  LDA     CURHP           ; GET CURRENT COLUMN POSITION
    4145/ 14.170 :                              CPU     Z80
    4146/ 14.170 : 355 104                      NEG                     ; SUBTRACT FROM 79 FOR NUMBER OF CHAR. TO MOVE
    4147/ 14.172 :                              CPU     8080
    4148/ 14.172 : 306 117                      ADI     79
    4149/ 14.174 : 310                          RZ                      ; IF AT COLUMN 79, NO COPY NEEDED
    4150/ 14.175 :                      
    4151/ 14.175 : 117                          MOV     C,A             ; (B,C) = RESULT
    4152/ 14.176 : 006 000                      MVI     B,0
    4153/ 14.200 : 052 270 100                  LHLD    CLSA            ; GET CURRENT LINE STARTING ADDRESS
    4154/ 14.203 : 021 117 000                  LXI     D,79            ; ADD 79 FOR END OF LINE ADDRESS
    4155/ 14.206 : 031                          DAD     D
    4156/ 14.207 : 124                          MOV     D,H             ; (D,E) = ADDRESS OF END OF LINE
    4157/ 14.210 : 135                          MOV     E,L
    4158/ 14.211 : 053                          DCX     H               ; (H,L) = ADDRESS OF END OF LINE - 1
    4159/ 14.212 :                      
    4160/ 14.212 : 172                  PIC1    MOV     A,D             ; STAY IN VIDEO RAM
    4161/ 14.213 : 366 370                      ORI     VRAMS/256
    4162/ 14.215 : 127                          MOV     D,A
    4163/ 14.216 : 174                          MOV     A,H
    4164/ 14.217 : 366 370                      ORI     VRAMS/256
    4165/ 14.221 : 147                          MOV     H,A
    4166/ 14.222 :                              CPU     Z80
    4167/ 14.222 : 355 250                      LDD                     ; COPY CHARACTER
    4168/ 14.224 :                              CPU     8080
    4169/ 14.224 : 170                          MOV     A,B             ; SEE IF COUNT EXHAUSTED
    4170/ 14.225 : 261                          ORA     C
    4171/ 14.226 :                              CPU     Z80
    4172/ 14.226 : 040 362                      JR      NZ,PIC1         ; IF NOT DONE YET
    4173/ 14.230 :                              CPU     8080
    4174/ 14.230 :                      
    4175/ 14.230 : 052 274 100                  LHLD    CURAD           ; GET CURSOR ADDRESS TO PLACE CHARACTER
    4176/ 14.233 : 311                          RET
    4177/ 14.234 :                      
    4178/ 14.234 :                      ;;      PIL - PERFORM INSERT LINE
    4179/ 14.234 :                      ;
    4180/ 14.234 :                      ;       *PIL* INSERTS A BLANK LINE AT THE CURSOR POSITION AFTER MOVING
    4181/ 14.234 :                      ;       THE REMAINING LINES DOWN ONE LINE.  DATA ON LINE 23 IS LOST.
    4182/ 14.234 :                      ;
    4183/ 14.234 :                      ;
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 71 - 2024-05-01 01:09:39 PM


    4184/ 14.234 :                      ;       ENTRY   NONE
    4185/ 14.234 :                      ;
    4186/ 14.234 :                      ;       EXIT    NONE
    4187/ 14.234 :                      ;
    4188/ 14.234 :                      ;       USES    A,B,C,D,E,H,L,F
    4189/ 14.234 :                      
    4190/ 14.234 :                      
    4191/ 14.234 : =14.234O             PIL     EQU     $
    4192/ 14.234 :                      
    4193/ 14.234 :                      
    4194/ 14.234 : 072 273 100                  LDA     CURVP           ; GET CURRENT LINE NUMBER
    4195/ 14.237 :                              CPU     Z80
    4196/ 14.237 : 355 104                      NEG                     ; SUBTRACT FROM 23 FOR NUMBER OF LINES TO MOVE
    4197/ 14.241 :                              CPU     8080
    4198/ 14.241 : 306 027                      ADI     23
    4199/ 14.243 :                              CPU     Z80
    4200/ 14.243 : 050 061                      JR      Z,PIL2          ; IF ON LAST LINE, SKIP COPY
    4201/ 14.245 :                              CPU     8080
    4202/ 14.245 :                      
    4203/ 14.245 : 117                          MOV     C,A             ; LINES*5 = MODE 16 CHARACTER COUNT
    4204/ 14.246 : 201                          ADD     C
    4205/ 14.247 : 201                          ADD     C
    4206/ 14.250 : 201                          ADD     C
    4207/ 14.251 : 201                          ADD     C
    4208/ 14.252 : 117                          MOV     C,A             ; (C) = RESULT
    4209/ 14.253 :                              CPU     Z80
    4210/ 14.253 : 355 133 266 100              LD      DE,(SHOME)      ; (D,E) = CURRENT HOME POSITION
    4211/ 14.257 :                              CPU     8080
    4212/ 14.257 : 041 177 007                  LXI     H,1919          ; ADD NUMBER OF CHARACTERS TO POINT TO LAST CHAR.
    4213/ 14.262 : 031                          DAD     D               ; (H,L) = LAST ADDRESS IN DISPLAY
    4214/ 14.263 : 345                          PUSH    H               ; SAVE ON STACK
    4215/ 14.264 : 041 057 007                  LXI     H,1839          ; ADD NUMBER OF CHARACTERS TO END OF LINE 22
    4216/ 14.267 : 031                          DAD     D               ; (H,L) = END OF LINE 22
    4217/ 14.270 : 321                          POP     D               ; (D,E) = END OF LINE 23
    4218/ 14.271 :                      
    4219/ 14.271 : 305                  PIL1    PUSH    B               ; SAVE (B,C)
    4220/ 14.272 : 172                          MOV     A,D             ; KEEP POINTERS IN VIDEO RAM
    4221/ 14.273 : 366 370                      ORI     VRAMS/256
    4222/ 14.275 : 127                          MOV     D,A
    4223/ 14.276 : 174                          MOV     A,H
    4224/ 14.277 : 366 370                      ORI     VRAMS/256
    4225/ 14.301 : 147                          MOV     H,A
    4226/ 14.302 : 016 020                      MVI     C,16            ; COPY 16 BYTES
    4227/ 14.304 : 006 000                      MVI     B,0
    4228/ 14.306 :                              CPU     Z80
    4229/ 14.306 : 355 270                      LDDR
    4230/ 14.310 :                              CPU     8080
    4231/ 14.310 : 301                          POP     B               ; RESTORE (B,C)
    4232/ 14.311 : 015                          DCR     C               ; COPY COMPLETE?
    4233/ 14.312 :                              CPU     Z80
    4234/ 14.312 : 040 355                      JR      NZ,PIL1         ; IF NOT DONE
    4235/ 14.314 :                              CPU     8080
    4236/ 14.314 :                      
    4237/ 14.314 : 172                          MOV     A,D             ; KEEP POINTERS IN VIDEO RAM
    4238/ 14.315 : 366 370                      ORI     VRAMS/256
    4239/ 14.317 : 127                          MOV     D,A
    4240/ 14.320 : 174                          MOV     A,H
    4241/ 14.321 : 366 370                      ORI     VRAMS/256
    4242/ 14.323 : 147                          MOV     H,A
    4243/ 14.324 :                              CPU     Z80
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 72 - 2024-05-01 01:09:39 PM


    4244/ 14.324 : 355 250                      LDD                     ; COPY FIRST CHARACTER ON THIS LINE
    4245/ 14.326 :                              CPU     8080
    4246/ 14.326 :                      
    4247/ 14.326 : 076 000              PIL2    MVI     A,0             ; SET CURSOR TO BEGINNING OF LINE
    4248/ 14.330 : 062 272 100                  STA     CURHP
    4249/ 14.333 : 052 270 100                  LHLD    CLSA            ; SET CURAD TO BEGINNING OF LINE
    4250/ 14.336 : 042 274 100                  SHLD    CURAD
    4251/ 14.341 : 006 005                      MVI     B,5             ; WRITE 80 SPACES (5*16)
    4252/ 14.343 : 303 212 016                  JMP     WSVA
    4253/ 14.346 :                      
    4254/ 14.346 :                      ;;      PSD - PARAMETER STRING DECODER
    4255/ 14.346 :                      ;
    4256/ 14.346 :                      ;       *PSD* INPUTS A PARAMETER STRING OF DECIMAL NUMBERS SEPARATED BY
    4257/ 14.346 :                      ;       A SEMICOLON (TO A MAX OF 15) UNTIL THE FINAL CHARACTER OF THE
    4258/ 14.346 :                      ;       ESCAPE SEQUENCE (NON DECIMAL AND NOT A SEMICOLON) IS INPUT
    4259/ 14.346 :                      ;
    4260/ 14.346 :                      ;
    4261/ 14.346 :                      ;       ENTRY   NONE
    4262/ 14.346 :                      ;
    4263/ 14.346 :                      ;       EXIT    (A) = FINAL CHARACTER
    4264/ 14.346 :                      ;               (B) = ZERO IF NO PARAMETER STRING PRECEDING FINAL CHARACTER
    4265/ 14.346 :                      ;
    4266/ 14.346 :                      ;       USES    A,B,C,D,H,L,F
    4267/ 14.346 :                      
    4268/ 14.346 :                      
    4269/ 14.346 : 041 314 100          PSD     LXI     H,PSDW          ; POINT TO PSD WORK AREA
    4270/ 14.351 : 001 000 000                  LXI     B,0             ; NO PARAMETER STRING YET
    4271/ 14.354 : 160                          MOV     M,B             ; FIRST VALUE = ZERO
    4272/ 14.355 : 315 070 012                  CALL    FNCP            ; INPUT FIRST CHARACTER
    4273/ 14.360 : 376 073                      CPI     ';'             ; CAN'T HAVE A SEMICOLON AS FIRST CHARACTER
    4274/ 14.362 : 310                          RZ                      ; IF SEMICOLON, END SEQUENCE
    4275/ 14.363 :                      
    4276/ 14.363 : 376 060              PSD1    CPI     '0'             ; SEE IF LESS THAN DECIMAL
    4277/ 14.365 :                              CPU     Z80
    4278/ 14.365 : 070 046                      JR      C,PSD4          ; IF TOO LOW, EXIT
    4279/ 14.367 :                              CPU     8080
    4280/ 14.367 :                      
    4281/ 14.367 : 376 072                      CPI     '9'+1           ; SEE IF GREATER THAN DECIMAL
    4282/ 14.371 :                              CPU     Z80
    4283/ 14.371 : 060 017                      JR      NC,PSD2         ; IF NOT DECIMAL
    4284/ 14.373 :                              CPU     8080
    4285/ 14.373 :                      
    4286/ 14.373 :                      ;       INPUT CHARACTER IS DECIMAL
    4287/ 14.373 :                      ;
    4288/ 14.373 : 346 017                      ANI     00001111B       ; MASK FOR BINARY
    4289/ 14.375 : 127                          MOV     D,A             ; SAVE RESULT
    4290/ 14.376 :                      
    4291/ 14.376 :                      ;       NEW DIGITS VALUE, MULTIPLY OLD VALUE BY TEN
    4292/ 14.376 :                      ;
    4293/ 14.376 : 176                          MOV     A,M             ; GET OLD VALUE
    4294/ 14.377 : 007                          RLC                     ; *2
    4295/ 15.000 : 167                          MOV     M,A
    4296/ 15.001 : 007                          RLC                     ; *4
    4297/ 15.002 : 007                          RLC                     ; *8
    4298/ 15.003 : 206                          ADD     M               ; *2 + *8 = *10
    4299/ 15.004 : 202                          ADD     D               ; ADD NEW DIGITS
    4300/ 15.005 : 167                          MOV     M,A             ; SAVE RESULT
    4301/ 15.006 : 004                          INR     B               ; SHOW THAT A PN HAS BEEN INPUT
    4302/ 15.007 : 014                          INR     C
    4303/ 15.010 :                              CPU     Z80
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 73 - 2024-05-01 01:09:39 PM


    4304/ 15.010 : 030 016                      JR      PSD3.5          ; INPUT NEXT CHARACTER
    4305/ 15.012 :                              CPU     8080
    4306/ 15.012 :                      
    4307/ 15.012 : 376 073              PSD2    CPI     ';'             ; SEE IF NEXT CHARACTER IS A SEMICOLON
    4308/ 15.014 :                              CPU     Z80
    4309/ 15.014 : 040 017                      JR      NZ,PSD4         ; IF NOT, THEN CHARACTER IS FINAL
    4310/ 15.016 :                              CPU     8080
    4311/ 15.016 :                      
    4312/ 15.016 : 175                          MOV     A,L             ; ELSE, SEE IF ROOM FOR THIS PARAMETER
    4313/ 15.017 : 376 332                      CPI     PSDWE-2         ; SAVE ROOM FOR LAST PLUS FINAL
    4314/ 15.021 :                              CPU     Z80
    4315/ 15.021 : 050 001                      JR      Z,PSD3          ; IF NO MORE ROOM
    4316/ 15.023 :                              CPU     8080
    4317/ 15.023 :                      
    4318/ 15.023 : 043                          INX     H               ; POINT TO NEXT CELL
    4319/ 15.024 : 016 000              PSD3    MVI     C,0             ; RESET PARAMETER BUILD REGISTER
    4320/ 15.026 : 066 000                      MVI     M,0             ; TOSS OLD PN
    4321/ 15.030 : 315 070 012          PSD3.5  CALL    FNCP            ; GET NEXT CHARACTER
    4322/ 15.033 :                              CPU     Z80
    4323/ 15.033 : 030 326                      JR      PSD1            ; DECODE CHARACTER
    4324/ 15.035 :                              CPU     8080
    4325/ 15.035 :                      
    4326/ 15.035 : 127                  PSD4    MOV     D,A             ; SAVE FINAL CHARACTER
    4327/ 15.036 : 257                          XRA     A               ; SEE IF PN IS IN MEMORY AT CURRENT ADDRESS
    4328/ 15.037 : 261                          ORA     C
    4329/ 15.040 :                              CPU     Z80
    4330/ 15.040 : 050 001                      JR      Z,PSD5          ; IF NOTHING IN PROGRESS
    4331/ 15.042 :                              CPU     8080
    4332/ 15.042 :                      
    4333/ 15.042 : 043                          INX     H               ; ELSE PUT FINAL IN NEXT BYTE
    4334/ 15.043 : 162                  PSD5    MOV     M,D             ; PUT FINAL CHARACTER IN WORK AREA
    4335/ 15.044 : 172                          MOV     A,D             ; AND (A)
    4336/ 15.045 : 021 314 100                  LXI     D,PSDW          ; (D,E) = PSDW
    4337/ 15.050 : 311                          RET
    4338/ 15.051 :                      
    4339/ 15.051 :                      ;;      PSIF - PUT STRING IN INPUT FIFO
    4340/ 15.051 :                      ;
    4341/ 15.051 :                      ;       *PSIF* PLACES THE STRING IMMEDIATELY FOLLOWING THE CALL TO
    4342/ 15.051 :                      ;       THIS ROUTINE INTO THE INPUT FIFO
    4343/ 15.051 :                      ;
    4344/ 15.051 :                      ;
    4345/ 15.051 :                      ;       ENTRY   NONE
    4346/ 15.051 :                      ;
    4347/ 15.051 :                      ;       EXIT    NONE
    4348/ 15.051 :                      ;
    4349/ 15.051 :                      ;       USES    A,B,C,D,E,H,L,F
    4350/ 15.051 :                      
    4351/ 15.051 :                      
    4352/ 15.051 : 321                  PSIF    POP     D               ; GET ADDRESS OF CHARACTERS TO OUTPUT
    4353/ 15.052 : 032                  PSIF1   LDAX    D               ; GET CHARACTER
    4354/ 15.053 : 023                          INX     D               ; POINT TO NEXT CHARACTER
    4355/ 15.054 : 267                          ORA     A               ; GET CPU FLAGS
    4356/ 15.055 : 372 067 015                  JM      PSIF2           ; IF THIS IS LAST CHARACTER TO OUTPUT
    4357/ 15.060 :                      
    4358/ 15.060 : 363                          DI                      ; LOCK OUT INTERRUPTS
    4359/ 15.061 : 315 251 013                  CALL    PCIF            ; PLACE CHARACTER
    4360/ 15.064 : 373                          EI
    4361/ 15.065 :                              CPU     Z80
    4362/ 15.065 : 030 363                      JR      PSIF1           ; GET NEXT CHARACTER
    4363/ 15.067 :                              CPU     8080
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 74 - 2024-05-01 01:09:39 PM


    4364/ 15.067 :                      
    4365/ 15.067 : 346 177              PSIF2   ANI     01111111B       ; MASK OFF TERMINATOR
    4366/ 15.071 : 325                          PUSH    D               ; SET RETURN ADDRESS BACK ON STACK
    4367/ 15.072 : 363                          DI
    4368/ 15.073 : 315 251 013                  CALL    PCIF            ; PLACE LAST CHARACTER
    4369/ 15.076 : 373                          EI
    4370/ 15.077 : 311                          RET
    4371/ 15.100 :                      
    4372/ 15.100 :                      ;;      PSOF - PUT STRING IN OUTPUT FIFO
    4373/ 15.100 :                      ;
    4374/ 15.100 :                      ;       *PSOF* PLACES THE CHARACTER STRING IMMEDIATELY FOLLOWING THE
    4375/ 15.100 :                      ;       CALL TO THIS ROUTINE INTO THE OUTPUT FIFO
    4376/ 15.100 :                      ;
    4377/ 15.100 :                      ;
    4378/ 15.100 :                      ;       ENTRY   NONE
    4379/ 15.100 :                      ;
    4380/ 15.100 :                      ;       EXIT    NONE
    4381/ 15.100 :                      ;
    4382/ 15.100 :                      ;       USES    A,B,C,D,E,H,L,F
    4383/ 15.100 :                      
    4384/ 15.100 :                      
    4385/ 15.100 : 321                  PSOF    POP     D               ; GET ADDRESS OF CHARACTERS TO OUTPUT
    4386/ 15.101 : 032                  PSOF1   LDAX    D               ; GET CHARACTER
    4387/ 15.102 : 023                          INX     D               ; POINT TO NEXT CHARACTER
    4388/ 15.103 : 267                          ORA     A               ; SET CPU FLAGS
    4389/ 15.104 : 372 114 015                  JM      PSOF2           ; IF THIS IS LAST CHARACTER TO OUTPUT
    4390/ 15.107 :                      
    4391/ 15.107 : 315 375 013                  CALL    PCOFT           ; PLACE CHARACTER IN OUTPUT FIFO
    4392/ 15.112 :                              CPU     Z80
    4393/ 15.112 : 030 365                      JR      PSOF1           ; GET NEXT CHARACTER
    4394/ 15.114 :                              CPU     8080
    4395/ 15.114 :                      
    4396/ 15.114 : 346 177              PSOF2   ANI     01111111B       ; TOSS TERMINATOR BIT
    4397/ 15.116 : 325                          PUSH    D               ; SET RETURN ADDRESS
    4398/ 15.117 : 303 375 013                  JMP     PCOFT           ; OUTPUT LAST CHARACTER
    4399/ 15.122 :                      
    4400/ 15.122 :                      ;;      *RMS* RESETS THE MODE SPECIFIED BY THE LAST CHARACTER IN THE SEQUENCE
    4401/ 15.122 :                      ;
    4402/ 15.122 :                      ;
    4403/ 15.122 :                      ;       ENTRY   (B,C) = MODEB
    4404/ 15.122 :                      ;               (D,E) = MODEA
    4405/ 15.122 :                      ;
    4406/ 15.122 :                      ;       EXIT    NONE
    4407/ 15.122 :                      ;
    4408/ 15.122 :                      ;       USES    A,B,C,D,E,H,L,F
    4409/ 15.122 :                      
    4410/ 15.122 :                      
    4411/ 15.122 : 041 227 015          RMS     LXI     H,RMST          ; (H,L) = RESET MODE SEQUENCE TABLE
    4412/ 15.125 :                              CPU     Z80
    4413/ 15.125 : 030 015                      JR      SMSA            ; CONTINUE SAME AS SET MODE SEQUENCE
    4414/ 15.127 :                              CPU     8080
    4415/ 15.127 :                      
    4416/ 15.127 :                      ;;      ASCP - ANSI SAVE CURSOR POSITION
    4417/ 15.127 :                      ;
    4418/ 15.127 :                      ;       *ASCP* SAVES THE CURRENT LINE AND COLUMN NUMBERS OF THE CURSOR
    4419/ 15.127 :                      ;       POSITION
    4420/ 15.127 :                      ;
    4421/ 15.127 :                      ;
    4422/ 15.127 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    4423/ 15.127 :                      ;
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 75 - 2024-05-01 01:09:39 PM


    4424/ 15.127 :                      ;       EXIT    NONE
    4425/ 15.127 :                      ;
    4426/ 15.127 :                      ;       USES    A,H,L,F
    4427/ 15.127 :                      
    4428/ 15.127 :                      
    4429/ 15.127 : 170                  ASCP    MOV     A,B             ; SEE IF PN WAS INPUT
    4430/ 15.130 : 267                          ORA     A
    4431/ 15.131 : 300                          RNZ                     ; IF INPUT, ILLEGAL, EXIT
    4432/ 15.132 :                      
    4433/ 15.132 :                      ;       JMP     SCP             ; ELSE, SAVE CURSOR POSITION
    4434/ 15.132 :                      ;       ERRNZ   $-SCP
    4435/ 15.132 :                      
    4436/ 15.132 :                      ;;      SCP - SAVE CURSOR POSITION
    4437/ 15.132 :                      ;
    4438/ 15.132 :                      ;       *SCP* SAVES THE CURRENT POSITION OF THE CURSOR WHICH MAY BE RESTORED
    4439/ 15.132 :                      ;       WITH THE USE OF *USCP*
    4440/ 15.132 :                      ;
    4441/ 15.132 :                      ;
    4442/ 15.132 :                      ;       ENTRY   NONE
    4443/ 15.132 :                      ;
    4444/ 15.132 :                      ;       EXIT    NONE
    4445/ 15.132 :                      ;
    4446/ 15.132 :                      ;       USES    H,L
    4447/ 15.132 :                      
    4448/ 15.132 :                      
    4449/ 15.132 : 052 272 100          SCP     LHLD    CURHP           ; GET CURSOR POSITIONS
    4450/ 15.135 :                      ;       ERRNZ   CURVP-CURHP-1   ; MUST BE CONTIGUOUS
    4451/ 15.135 : 042 305 100                  SHLD    CSA             ; KEEP IN CURSOR SAVED ADDRESS
    4452/ 15.140 : 311                          RET
    4453/ 15.141 :                      
    4454/ 15.141 :                      ;;      SMS - SET MODE SEQUENCE
    4455/ 15.141 :                      ;
    4456/ 15.141 :                      ;       *SMS* SETS THE MODE SPECIFIED BY THE LAST CHARACTER IN THE SEQUENCE
    4457/ 15.141 :                      ;
    4458/ 15.141 :                      ;
    4459/ 15.141 :                      ;       ENTRY   (B,C) = MODEB
    4460/ 15.141 :                      ;               (D,E) = MODEA
    4461/ 15.141 :                      ;
    4462/ 15.141 :                      ;       EXIT    NONE
    4463/ 15.141 :                      ;
    4464/ 15.141 :                      ;       USES    A,B,C,D,E,H,L,F
    4465/ 15.141 :                      
    4466/ 15.141 :                      
    4467/ 15.141 : 041 205 015          SMS     LXI     H,SMST          ; (H,L) = SET MODE SEQUENCE TABLE
    4468/ 15.144 :                      
    4469/ 15.144 : 315 070 012          SMSA    CALL    FNCP            ; GET FINAL SEQUENCE CHARACTER
    4470/ 15.147 : 376 030                      CPI     CAN             ; SEE IF TO CANCEL
    4471/ 15.151 : 310                          RZ                      ; IF CANCEL, EXIT NOW
    4472/ 15.152 :                      
    4473/ 15.152 : 376 061                      CPI     '1'             ; CAN'T BE LOWER THAN ONE
    4474/ 15.154 : 332 120 003                  JC      IFCP            ; IF LOWER, EXIT LIKE NEVER HERE
    4475/ 15.157 :                      
    4476/ 15.157 : 376 072                      CPI     '9'+1           ; <= 9
    4477/ 15.161 : 322 120 003                  JNC     IFCP            ; IF GREATER THAN 9
    4478/ 15.164 :                      
    4479/ 15.164 : 346 017                      ANI     00001111B       ; FORM HALF ASCII FOR TABLE OFFSET
    4480/ 15.166 : 075                  SMSB    DCR     A               ; 1 = FIRST ENTRY
    4481/ 15.167 : 007                          RLC                     ; *2 FOR TABLE WIDTH
    4482/ 15.170 : 205                          ADD     L               ; ADD TO STARTING ADDRESS OF TABLE
    4483/ 15.171 : 157                          MOV     L,A
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 76 - 2024-05-01 01:09:39 PM


    4484/ 15.172 : 176                          MOV     A,M             ; GET FUNCTION ADDRESS LSB
    4485/ 15.173 : 043                          INX     H
    4486/ 15.174 : 146                          MOV     H,M             ; MSB
    4487/ 15.175 : 157                          MOV     L,A
    4488/ 15.176 : 001 310 100                  LXI     B,MODEB         ; (B,C) = MODEB
    4489/ 15.201 : 021 307 100                  LXI     D,MODEA         ; (D,E) = MODEA
    4490/ 15.204 : 351                          PCHL                    ; GO TO FUNCTION ROUTINE
    4491/ 15.205 :                      
    4492/ 15.205 :                      ;;      SMST - SET MODE SEQUENCE TABLE
    4493/ 15.205 :                      ;
    4494/ 15.205 :                      ;       *SMST* CONTAINS THE ADDRESS OF THE ROUTINE WHICH WILL SET
    4495/ 15.205 :                      ;       THE MODE REQUESTED
    4496/ 15.205 :                      
    4497/ 15.205 :                      
    4498/ 15.205 : =15.205O             SMST    EQU     $
    4499/ 15.205 : 237 010                      DW      E25L            ; ENABLE 25TH LINE
    4500/ 15.207 : 155 013                      DW      NKC             ; NO KEYBOARD CLICK
    4501/ 15.211 : 076 011                      DW      EHSM            ; ENTER HOLD SCREEN MODE
    4502/ 15.213 : 251 015                      DW      SBC             ; SET 'BLOCK' CURSOR
    4503/ 15.215 : 176 010                      DW      DC              ; DISABLE CURSOR
    4504/ 15.217 : 136 011                      DW      EKSM            ; ENTER KEYPAD SHIFTED MODE
    4505/ 15.221 : 113 011                      DW      EKAM            ; ENTER KEYPAD ALTERNATE MODE
    4506/ 15.223 : 303 010                      DW      EALF            ; ENABLE AUTO LINE FEED ON CARRIAGE RETURN
    4507/ 15.225 : 276 010                      DW      EACR            ; ENABLE AUTO CARRIAGE RETURN ON LINE FEED
    4508/ 15.227 :                      ;       ERRNZ   SHMST/256-$/256 ; TABLE MUST RESIDE IN ONE PAGE
    4509/ 15.227 :                      
    4510/ 15.227 :                      ;;      RMST - RESET MODE SEQUENCE TABLE
    4511/ 15.227 :                      ;
    4512/ 15.227 :                      ;       *RMST* CONTAINS THE ADDRESSES OF THE ROUTINES WHICH RESET THE
    4513/ 15.227 :                      ;       MODE SPECIFIED
    4514/ 15.227 :                      
    4515/ 15.227 :                      
    4516/ 15.227 : =15.227O             RMST    EQU     $
    4517/ 15.227 : 153 010                      DW      D25L            ; DISABLE 25TH LINE
    4518/ 15.231 : 120 011                      DW      EKC             ; ENABLE KEYBOARD CLICK
    4519/ 15.233 : 301 016                      DW      XHSM            ; EXIT HOLD SCREEN MODE
    4520/ 15.235 : 016 016                      DW      SUC             ; SET 'UNDERSCORE' CURSOR
    4521/ 15.237 : 371 010                      DW      EC              ; ENABLE CURSOR
    4522/ 15.241 : 316 016                      DW      XKSM            ; EXIT KEYPAD SHIFTED MODE
    4523/ 15.243 : 311 016                      DW      XKAM            ; EXIT KEYPAD ALTERNATE MODE
    4524/ 15.245 : 270 016                      DW      XALF            ; EXIT AUTO LINE FEED ON CARRIAGE RETURN
    4525/ 15.247 : 263 016                      DW      XACR            ; EXIT AUTO CARRIAGE RETURN ON LINE FEED
    4526/ 15.251 :                      ;       ERRNZ   RMST/256-$/256  ; MUST NOT CROSS PAGE BOUNDARY
    4527/ 15.251 :                      
    4528/ 15.251 :                      ;;      SBC - SET BLOCK CURSOR
    4529/ 15.251 :                      ;
    4530/ 15.251 :                      ;       *SBC* PROGRAMS THE CRTC TO GENERATE A SLOW BLINKING BLOCK CURSOR
    4531/ 15.251 :                      ;
    4532/ 15.251 :                      ;
    4533/ 15.251 :                      ;       ENTRY   (B,C) = MODEB
    4534/ 15.251 :                      ;               (D,E) = MODEA
    4535/ 15.251 :                      ;
    4536/ 15.251 :                      ;       EXIT    NONE
    4537/ 15.251 :                      ;
    4538/ 15.251 :                      ;       USES    A,F
    4539/ 15.251 :                      
    4540/ 15.251 :                      
    4541/ 15.251 : 012                  SBC     LDAX    B               ; GET MODE FLAGS
    4542/ 15.252 : 366 001                      ORI     MB.CBLK         ; FLAG BLOCK CURSOR
    4543/ 15.254 : 002                          STAX    B
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 77 - 2024-05-01 01:09:39 PM


    4544/ 15.255 : 032                          LDAX    D
    4545/ 15.256 : 346 020                      ANI     MA.CD           ; SEE IF CURSOR DISABLED
    4546/ 15.260 : 300                          RNZ                     ; IF DISABLED, EXIT
    4547/ 15.261 :                      
    4548/ 15.261 : 046 140              SBC.    MVI     H,0+VB.CBE+VB.CBPS ; START ON LINE ZERO, BLINK, SLOW
    4549/ 15.263 : 056 011                      MVI     L,9             ; STOP ON LINE NINE
    4550/ 15.265 : 042 277 100                  SHLD    VI.CSE
    4551/ 15.270 : 311                          RET
    4552/ 15.271 :                      
    4553/ 15.271 :                      ;;      SCH - SET CURSOR HOME
    4554/ 15.271 :                      ;
    4555/ 15.271 :                      ;       *SCH* PLACES THE CURSOR AT LINE ZERO, COLUMN ZERO
    4556/ 15.271 :                      ;
    4557/ 15.271 :                      ;
    4558/ 15.271 :                      ;       ENTRY   NONE
    4559/ 15.271 :                      ;
    4560/ 15.271 :                      ;       EXIT    (H,L) = CURSOR ADDRESS
    4561/ 15.271 :                      ;
    4562/ 15.271 :                      ;       USES    A,H,L,F
    4563/ 15.271 :                      
    4564/ 15.271 :                      
    4565/ 15.271 : 041 000 000          SCH     LXI     H,0             ; (H,L) = ZERO
    4566/ 15.274 : 042 272 100                  SHLD    CURHP           ; (CURHP & CURVP) = ZERO
    4567/ 15.277 :                      ;       ERRNZ   CURVP-CURHP-1
    4568/ 15.277 : 052 266 100                  LHLD    SHOME           ; RESET CURSOR AND LINE ADDRESSES
    4569/ 15.302 : 042 274 100                  SHLD    CURAD
    4570/ 15.305 : 042 270 100                  SHLD    CLSA
    4571/ 15.310 :                      
    4572/ 15.310 :                      
    4573/ 15.310 : 311                          RET                     ; EXIT WITH OR WITHOUT
    4574/ 15.311 :                      
    4575/ 15.311 :                      ;;      AUSCP - ANSI UNSAVE CURSOR POSITION
    4576/ 15.311 :                      ;
    4577/ 15.311 :                      ;       *AUSCP* RETURNS THE CURSOR TO THE POSITION PREVIOUSLY SAVED BY *ASCP*
    4578/ 15.311 :                      ;
    4579/ 15.311 :                      ;
    4580/ 15.311 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    4581/ 15.311 :                      ;
    4582/ 15.311 :                      ;       EXIT    NONE
    4583/ 15.311 :                      ;
    4584/ 15.311 :                      ;       USES    A,B,C,D,E,H,L,F
    4585/ 15.311 :                      
    4586/ 15.311 :                      
    4587/ 15.311 : 170                  AUSCP   MOV     A,B             ; SEE IF PN WAS INPUT
    4588/ 15.312 : 267                          ORA     A
    4589/ 15.313 : 300                          RNZ                     ; IF PN INPUT, ILLEGAL, EXIT
    4590/ 15.314 :                      
    4591/ 15.314 :                      ;       JMP     USCP            ; ELSE, UNSAVE CURSOR POSITION
    4592/ 15.314 :                      ;       ERRNZ   $-USCP
    4593/ 15.314 :                      
    4594/ 15.314 :                      ;;      USCP - UNSAVE CURSOR POSITION
    4595/ 15.314 :                      ;
    4596/ 15.314 :                      ;       *USCP* RETURNS TO CURHP AND CURVP THE VALUES SAVED WITH THE
    4597/ 15.314 :                      ;       USE OF *SCP*
    4598/ 15.314 :                      ;
    4599/ 15.314 :                      ;
    4600/ 15.314 :                      ;       ENTRY   NONE
    4601/ 15.314 :                      ;
    4602/ 15.314 :                      ;       EXIT    NONE
    4603/ 15.314 :                      ;
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 78 - 2024-05-01 01:09:39 PM


    4604/ 15.314 :                      ;       USES    H,L
    4605/ 15.314 :                      
    4606/ 15.314 :                      
    4607/ 15.314 : 052 305 100          USCP    LHLD    CSA             ; GET SAVED ADDRESS
    4608/ 15.317 : 042 272 100                  SHLD    CURHP           ; UPDATE CURRENT POINTERS
    4609/ 15.322 :                      ;       ERRNZ   CURVP-CURHP-1   ; POINTERS ARE CONTIGUOUS
    4610/ 15.322 :                      
    4611/ 15.322 :                      ;       JMP     SNCP            ; SET NEW CURSOR POSITION
    4612/ 15.322 :                      ;       ERRNZ   $-SNCP
    4613/ 15.322 :                      
    4614/ 15.322 :                      ;;      SNCP - SET NEW CURSOR POSITION
    4615/ 15.322 :                      ;
    4616/ 15.322 :                      ;       *SNCP* USES THE CURRENT VALUES OF THE VERTICAL AND HORIZONTAL
    4617/ 15.322 :                      ;       POSITION CELLS TO SET THE CURSOR POSITION
    4618/ 15.322 :                      ;
    4619/ 15.322 :                      ;
    4620/ 15.322 :                      ;       ENTRY   *CURVP* - VERTICAL POSITION TO BE SET
    4621/ 15.322 :                      ;               *CURHP* - HORIZONTAL POSITION TO BE SET
    4622/ 15.322 :                      ;
    4623/ 15.322 :                      ;       EXIT    'C = CLEARED
    4624/ 15.322 :                      ;
    4625/ 15.322 :                      ;       USES    A,D,E,H,L,F
    4626/ 15.322 :                      
    4627/ 15.322 :                      
    4628/ 15.322 : 072 273 100          SNCP    LDA     CURVP           ; GET VERTICAL POSITION
    4629/ 15.325 : 315 137 013                  CALL    MPY80           ; *80
    4630/ 15.330 : 353                          XCHG                    ; (D,E) = NUMBER OF CHARACTERS TO NEW LINE
    4631/ 15.331 : 052 266 100                  LHLD    SHOME           ; GET HOME ADDRESS
    4632/ 15.334 : 031                          DAD     D               ; ADD OFFSET FOR THIS LINE'S STARTING ADDRESS
    4633/ 15.335 : 174                          MOV     A,H             ; STAY IN VIDEO RAM
    4634/ 15.336 : 366 370                      ORI     VRAMS/256
    4635/ 15.340 : 147                          MOV     H,A
    4636/ 15.341 : 042 270 100                  SHLD    CLSA            ; SET CURRENT LINE STARTING ADDRESS
    4637/ 15.344 :                      
    4638/ 15.344 : 072 272 100                  LDA     CURHP           ; GET HORIZONTAL POSITION
    4639/ 15.347 : 137                          MOV     E,A             ; ADD TO LINE STARTING ADDRESS
    4640/ 15.350 : 026 000                      MVI     D,0
    4641/ 15.352 : 031                          DAD     D
    4642/ 15.353 : 174                          MOV     A,H             ; STAY IN VIDEO RAM
    4643/ 15.354 : 366 370                      ORI     VRAMS/256
    4644/ 15.356 : 147                          MOV     H,A
    4645/ 15.357 : 042 274 100                  SHLD    CURAD           ; SET CURSOR ADDRESS
    4646/ 15.362 : 311                          RET
    4647/ 15.363 :                      
    4648/ 15.363 :                      ;;      STAB - SEARCH TABLE
    4649/ 15.363 :                      ;
    4650/ 15.363 :                      ;       *STAB* SEARCHES TABLES OF SPECIFIED LENGTH AND WIDTH FOR
    4651/ 15.363 :                      ;       A MATCH WITH THE FIRST CHARACTER IN AN ENTRY
    4652/ 15.363 :                      ;
    4653/ 15.363 :                      ;
    4654/ 15.363 :                      ;       ENTRY   (A) = CHARACTER TO MATCH
    4655/ 15.363 :                      ;               (D) = TABLE LENGTH
    4656/ 15.363 :                      ;               (E) = TABLE WIDTH
    4657/ 15.363 :                      ;               (H,L) = TABLE ADDRESS
    4658/ 15.363 :                      ;
    4659/ 15.363 :                      ;       EXIT    (A) = FIRST CHARACTER IN TABLE AFTER MATCH OR
    4660/ 15.363 :                      ;                     ORIGINAL CHARACTER IF NO MATCH
    4661/ 15.363 :                      ;               (H,L) = FIRST ADDRESS AFTER CHARACTER MATCHES
    4662/ 15.363 :                      ;               'C' = SET IF NOT MATCH
    4663/ 15.363 :                      ;
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 79 - 2024-05-01 01:09:39 PM


    4664/ 15.363 :                      ;       USES    A,B,D,D,E,H,L,F
    4665/ 15.363 :                      
    4666/ 15.363 :                      
    4667/ 15.363 : 117                  STAB    MOV     C,A             ; SAVE CHARACTER TO MATCH
    4668/ 15.364 : 256                  STAB1   XRA     M               ; CHARACTER MATCH TABLE ENTRY?
    4669/ 15.365 :                              CPU     Z80
    4670/ 15.365 : 050 013                      JR      Z,STAB3         ; IF CHARACTER MATCHED
    4671/ 15.367 :                              CPU     8080
    4672/ 15.367 :                      
    4673/ 15.367 : 103                          MOV     B,E             ; ELSE, GET WIDTH AND ADVANCE TO NEXT ENTRY
    4674/ 15.370 : 171                          MOV     A,C             ; GET CHARACTER TO MATCH
    4675/ 15.371 : 043                  STAB2   INX     H               ; ADVANCE (E) BYTES
    4676/ 15.372 :                              CPU     Z80
    4677/ 15.372 : 020 375                      DJNZ    STAB2
    4678/ 15.374 :                              CPU     8080
    4679/ 15.374 :                      
    4680/ 15.374 : 025                          DCR     D               ; DECREMENT LENGTH COUNTER
    4681/ 15.375 :                              CPU     Z80
    4682/ 15.375 : 040 365                      JR      NZ,STAB1        ; IF NOT LAST ENTRY
    4683/ 15.377 :                              CPU     8080
    4684/ 15.377 :                      
    4685/ 15.377 : 171                          MOV     A,C             ; ELSE, RESTORE ORIGINAL CHARACTER AND EXIT
    4686/ 16.000 : 067                          STC                     ; SET 'C'
    4687/ 16.001 : 311                          RET
    4688/ 16.002 :                      
    4689/ 16.002 : 043                  STAB3   INX     H               ; MATCH FOUND, GET NEXT BYTE
    4690/ 16.003 : 176                          MOV     A,M
    4691/ 16.004 : 311                          RET
    4692/ 16.005 :                      
    4693/ 16.005 :                      ;;      SPWE - SET PREVIOUS WAS AN ESCAPE FLAG
    4694/ 16.005 :                      ;
    4695/ 16.005 :                      ;
    4696/ 16.005 :                      ;       ENTRY   NONE
    4697/ 16.005 :                      ;
    4698/ 16.005 :                      ;       EXIT    NONE
    4699/ 16.005 :                      ;
    4700/ 16.005 :                      ;       USES    A,F
    4701/ 16.005 :                      
    4702/ 16.005 :                      
    4703/ 16.005 : 072 311 100          SPWE    LDA     MODEI           ; GET INTERNAL MODE FLAGS
    4704/ 16.010 : 366 001                      ORI     MI.PWE          ; SET PWE
    4705/ 16.012 : 062 311 100                  STA     MODEI           ; UPDATE FLAGS
    4706/ 16.015 : 311                          RET
    4707/ 16.016 :                      
    4708/ 16.016 :                      ;;      SUC - SET UNDERSCORE CURSOR
    4709/ 16.016 :                      ;
    4710/ 16.016 :                      ;       *SUC* PROGRAMS THE CRTC FOR A SINGLE SCAN LINE CURSOR ON SCAN
    4711/ 16.016 :                      ;       LINE EIGHT OF THE CHARACTER ROW
    4712/ 16.016 :                      ;
    4713/ 16.016 :                      ;
    4714/ 16.016 :                      ;       ENTRY   (B,C) = MODEB
    4715/ 16.016 :                      ;               (D,E) = MODEA
    4716/ 16.016 :                      ;
    4717/ 16.016 :                      ;       EXIT    NONE
    4718/ 16.016 :                      ;
    4719/ 16.016 :                      ;       USES    A,B,C
    4720/ 16.016 :                      
    4721/ 16.016 :                      
    4722/ 16.016 : 012                  SUC     LDAX    B               ; GET MODE FLAGS
    4723/ 16.017 : 346 376                      ANI     255-MB.CBLK     ; RESET CURSOR = BLOCK FLAG
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 80 - 2024-05-01 01:09:39 PM


    4724/ 16.021 : 002                          STAX    B
    4725/ 16.022 : 032                          LDAX    D
    4726/ 16.023 : 346 020                      ANI     MA.CD           ; SEE IF CURSOR IS DISABLED
    4727/ 16.025 : 300                          RNZ                     ; IF DISABLED, EXIT
    4728/ 16.026 :                      
    4729/ 16.026 : 046 110              SUC.    MVI     H,8+VB.CBE      ; START ON LINE 8, BLINK FAST
    4730/ 16.030 : 056 010                      MVI     L,8             ; ALSO END ON LINE 8
    4731/ 16.032 : 042 277 100                  SHLD    VI.CSE
    4732/ 16.035 : 311                          RET
    4733/ 16.036 :                      
    4734/ 16.036 :                      ;;      TAB - TAB CURSOR TO NEXT EIGHTH COLUMN
    4735/ 16.036 :                      ;
    4736/ 16.036 :                      ;       *TAB* PLACES THE CURSOR AT THE NEXT MULTIPLE OF 8 COLUMNS
    4737/ 16.036 :                      ;       FROM THE BEGINNING OF THE LINE UNLESS THE CURSOR IS WITHIN SEVEN
    4738/ 16.036 :                      ;       COLUMNS OF THE END, IN WHICH CASE THE CURSOR IS MOVED ONLY ONE COLUMN.
    4739/ 16.036 :                      ;       THE CURSOR IS NOT WRAPPED TO THE NEXT LINE.
    4740/ 16.036 :                      ;
    4741/ 16.036 :                      ;
    4742/ 16.036 :                      ;       ENTRY   NONE
    4743/ 16.036 :                      ;
    4744/ 16.036 :                      ;       EXIT    NONE
    4745/ 16.036 :                      ;
    4746/ 16.036 :                      ;       USES    A,D,E,H,L,F
    4747/ 16.036 :                      
    4748/ 16.036 :                      
    4749/ 16.036 : 072 272 100          TAB     LDA     CURHP           ; GET CURRENT HORIZONTAL POSITION
    4750/ 16.041 : 306 010                      ADI     8               ; ADD 8 COLUMNS
    4751/ 16.043 : 346 370                      ANI     377Q-7          ; TOSS ANY LEFT OVERS LESS THAN EIGHT
    4752/ 16.045 : 376 120                      CPI     80              ; PAST END OF LINE?
    4753/ 16.047 :                              CPU     Z80
    4754/ 16.047 : 040 016                      JR      NZ,TAB2         ; IF STILL ON SAME LINE
    4755/ 16.051 :                              CPU     8080
    4756/ 16.051 :                      
    4757/ 16.051 : 072 272 100                  LDA     CURHP           ; GET CURRENT POSITION ON LINE
    4758/ 16.054 : 376 117                      CPI     79              ; AT LAST COLUMN YET?
    4759/ 16.056 :                      
    4760/ 16.056 :                              CPU     Z80
    4761/ 16.056 : 050 003                      JR      Z,TAB1.5        ; IF AT LAST COLUMN, STAY
    4762/ 16.060 :                              CPU     8080
    4763/ 16.060 :                      
    4764/ 16.060 : 074                  TAB1    INR     A               ; ELSE, MOVE ONE COLUMN CLOSER
    4765/ 16.061 :                              CPU     Z80
    4766/ 16.061 : 030 004                      JR      TAB2            ; UPDATE CURSOR TO NEW POSITION
    4767/ 16.063 :                              CPU     8080
    4768/ 16.063 :                      
    4769/ 16.063 : 076 117              TAB1.5  MVI     A,79            ; ELSE, STOP AT LAST COLUMN OF LAST LINE
    4770/ 16.065 :                              CPU     Z80
    4771/ 16.065 : 030 000                      JR      TAB2            ; UPDATE CURSOR ADDRESS
    4772/ 16.067 :                              CPU     8080
    4773/ 16.067 :                      
    4774/ 16.067 : 062 272 100          TAB2    STA     CURHP           ; UPDATE COLUMN COUNTER
    4775/ 16.072 : 137                          MOV     E,A             ; ADD TO LINE ADDRESS
    4776/ 16.073 : 026 000                      MVI     D,0
    4777/ 16.075 : 052 270 100                  LHLD    CLSA            ; GET CURRENT LINE ADDRESS
    4778/ 16.100 : 031                          DAD     D
    4779/ 16.101 : 174                          MOV     A,H             ; STAY IN VIDEO RAM
    4780/ 16.102 : 366 370                      ORI     VRAMS/256
    4781/ 16.104 : 147                          MOV     H,A
    4782/ 16.105 : 042 274 100                  SHLD    CURAD           ; UPDATE CURSOR ADDRESS
    4783/ 16.110 :                      
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 81 - 2024-05-01 01:09:39 PM


    4784/ 16.110 : 311                          RET                     ; EXIT
    4785/ 16.111 :                      
    4786/ 16.111 :                      ;;      UCP - UPDATE CURSOR POSITION
    4787/ 16.111 :                      ;
    4788/ 16.111 :                      ;       *UCP* SENDS THE LOWER ELEVEN BITS OF THE CURSOR ADDRESS TO THE CRTC
    4789/ 16.111 :                      ;
    4790/ 16.111 :                      ;
    4791/ 16.111 :                      ;       ENTRY   NONE
    4792/ 16.111 :                      ;
    4793/ 16.111 :                      ;       EXIT    NONE
    4794/ 16.111 :                      ;
    4795/ 16.111 :                      ;       USES    A,H,L,F
    4796/ 16.111 :                      
    4797/ 16.111 :                      
    4798/ 16.111 : 072 273 100          UCP     LDA     CURVP           ; GET LINE COUNT
    4799/ 16.114 : 315 137 013                  CALL    MPY80           ; MULTIPLY BY 80 CHARACTERS PER LINE
    4800/ 16.117 : 072 272 100                  LDA     CURHP           ; GET COLUMN COUNT
    4801/ 16.122 : 137                          MOV     E,A             ; ADD TO LINE COUNT
    4802/ 16.123 : 026 000                      MVI     D,0
    4803/ 16.125 : 031                          DAD     D
    4804/ 16.126 : 353                          XCHG                    ; (D,E) = CHARACTER OFFSET FROM HOME POSITION
    4805/ 16.127 : 052 266 100                  LHLD    SHOME           ; GET HOME POSITION
    4806/ 16.132 : 174                          MOV     A,H             ; MASK FOR A 2K ADDRESS
    4807/ 16.133 : 346 007                      ANI     HOMAX/256
    4808/ 16.135 : 147                          MOV     H,A
    4809/ 16.136 : 031                          DAD     D               ; ADD OFFSET
    4810/ 16.137 : 174                          MOV     A,H             ; GET CURAD MSB
    4811/ 16.140 : 346 077                      ANI     CURMAX/256      ; TOSS UPPER 5 BITS
    4812/ 16.142 : 147                          MOV     H,A
    4813/ 16.143 : 042 303 100                  SHLD    VI.CA
    4814/ 16.146 :                      
    4815/ 16.146 :                      ;       HIT NMI TO MAKE SURE ITS RUNNING
    4816/ 16.146 :                      ;
    4817/ 16.146 : 076 000              UCP.    MVI     A,0             ; SET REGISTER ZERO AS DUMMY
    4818/ 16.150 : 323 144                      OUT     VP.AR+VB.NMI    ; OUT NMI REQUEST WITH PORT NUMBER
    4819/ 16.152 : 311                          RET
    4820/ 16.153 :                      
    4821/ 16.153 :                      ;;      WEOL - WRAP AROUND AT END OF LINE
    4822/ 16.153 :                      ;
    4823/ 16.153 :                      ;       *WEOL* SETS THE FLAG WHICH CAUSES THE TERMINAL TO PERFORM
    4824/ 16.153 :                      ;       A CARRIAGE RETURN AND LINE FEED WHEN THE 81ST CHARACTER FOR A
    4825/ 16.153 :                      ;       LINE IS RECEIVED
    4826/ 16.153 :                      ;
    4827/ 16.153 :                      ;
    4828/ 16.153 :                      ;       ENTRY   (B,C) = MODEB
    4829/ 16.153 :                      ;
    4830/ 16.153 :                      ;       EXIT    NONE
    4831/ 16.153 :                      ;
    4832/ 16.153 :                      ;       USES    A,F
    4833/ 16.153 :                      
    4834/ 16.153 :                      
    4835/ 16.153 : 012                  WEOL    LDAX    B               ; GET MODE FLAGS
    4836/ 16.154 : 366 004                      ORI     MB.WRAP         ; SET WRAP AROUND FLAG
    4837/ 16.156 : 002                          STAX    B
    4838/ 16.157 : 311                          RET
    4839/ 16.160 :                      
    4840/ 16.160 :                      ;;      WSV - WRITE SPACES TO VIDEO
    4841/ 16.160 :                      ;
    4842/ 16.160 :                      ;       *WSV* WRITES N ASCII SPACE CODES INTO THE VIDEO RAM.  THE LAST SPACE
    4843/ 16.160 :                      ;       WRITTEN MUST BE AT THE END OF A VIDEO LINE (X*80+VRAMS)
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 82 - 2024-05-01 01:09:39 PM


    4844/ 16.160 :                      ;
    4845/ 16.160 :                      ;
    4846/ 16.160 :                      ;       ENTRY   (D,E) = NUMBER OF SPACES TO BE WRITTEN
    4847/ 16.160 :                      ;
    4848/ 16.160 :                      ;       EXIT    NONE
    4849/ 16.160 :                      ;
    4850/ 16.160 :                      ;       USES    A,B,C,D,E,H,L,F
    4851/ 16.160 :                      
    4852/ 16.160 :                      
    4853/ 16.160 : =16.160O             WSV     EQU     $
    4854/ 16.160 : 175                  WSV0.5  MOV     A,L             ; GET LSB OF ADDRESS
    4855/ 16.161 : 346 017                      ANI     00001111B       ; MASK FOR ANY CARRY PAST MOD 16
    4856/ 16.163 :                              CPU     Z80
    4857/ 16.163 : 050 007                      JR      Z,WSV2          ; IF NO EXTRAS
    4858/ 16.165 :                              CPU     8080
    4859/ 16.165 :                      
    4860/ 16.165 : 016 040                      MVI     C,' '           ; SPACE = FILL CHARACTER
    4861/ 16.167 : 161                          MOV     M,C             ; PLACE SPACE IN MEMORY
    4862/ 16.170 : 043                          INX     H               ; POINT TO NEXT
    4863/ 16.171 : 033                          DCX     D               ; DECREMENT COUNT
    4864/ 16.172 :                              CPU     Z80
    4865/ 16.172 : 030 364                      JR      WSV0.5
    4866/ 16.174 :                              CPU     8080
    4867/ 16.174 :                      
    4868/ 16.174 : 006 004              WSV2    MVI     B,4             ; ROTATE COUNT TO A MOD 16 COUNTER
    4869/ 16.176 : 172                  WSV3    MOV     A,D             ; ROTATE MSB
    4870/ 16.177 : 037                          RAR
    4871/ 16.200 : 127                          MOV     D,A
    4872/ 16.201 : 173                          MOV     A,E             ; ROTATE LSB
    4873/ 16.202 : 037                          RAR
    4874/ 16.203 : 137                          MOV     E,A
    4875/ 16.204 :                              CPU     Z80
    4876/ 16.204 : 020 370                      DJNZ    WSV3            ; LOOP 4 TIMES
    4877/ 16.206 :                              CPU     8080
    4878/ 16.206 :                      
    4879/ 16.206 : 173                          MOV     A,E             ; CHECK FOR ZERO COUNT
    4880/ 16.207 : 267                          ORA     A
    4881/ 16.210 : 310                          RZ                      ; IF NO SPACES LEFT TO BE WRITTEN
    4882/ 16.211 :                      
    4883/ 16.211 : 103                          MOV     B,E             ; PLACE MOD 16 COUNT IN B
    4884/ 16.212 : =16.212O             WSVA    EQU     $               ; ALTERNATE ENTRY POINT FROM *PLF*
    4885/ 16.212 :                      
    4886/ 16.212 : 016 040              WSVA.   MVI     C,' '           ; (C) = ASCII SPACE
    4887/ 16.214 : 174                  WSV4    MOV     A,H             ; STAY IN VIDEO RAM
    4888/ 16.215 : 366 370                      ORI     VRAMS/256
    4889/ 16.217 : 147                          MOV     H,A
    4890/ 16.220 : 161                          MOV     M,C             ; PLACE 16 SPACES IN MEMORY
    4891/ 16.221 : 043                          INX     H
    4892/ 16.222 : 161                          MOV     M,C
    4893/ 16.223 : 043                          INX     H
    4894/ 16.224 : 161                          MOV     M,C
    4895/ 16.225 : 043                          INX     H
    4896/ 16.226 : 161                          MOV     M,C
    4897/ 16.227 : 043                          INX     H
    4898/ 16.230 : 161                          MOV     M,C
    4899/ 16.231 : 043                          INX     H
    4900/ 16.232 : 161                          MOV     M,C
    4901/ 16.233 : 043                          INX     H
    4902/ 16.234 : 161                          MOV     M,C
    4903/ 16.235 : 043                          INX     H
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 83 - 2024-05-01 01:09:39 PM


    4904/ 16.236 : 161                          MOV     M,C
    4905/ 16.237 : 043                          INX     H
    4906/ 16.240 : 161                          MOV     M,C
    4907/ 16.241 : 043                          INX     H
    4908/ 16.242 : 161                          MOV     M,C
    4909/ 16.243 : 043                          INX     H
    4910/ 16.244 : 161                          MOV     M,C
    4911/ 16.245 : 043                          INX     H
    4912/ 16.246 : 161                          MOV     M,C
    4913/ 16.247 : 043                          INX     H
    4914/ 16.250 : 161                          MOV     M,C
    4915/ 16.251 : 043                          INX     H
    4916/ 16.252 : 161                          MOV     M,C
    4917/ 16.253 : 043                          INX     H
    4918/ 16.254 : 161                          MOV     M,C
    4919/ 16.255 : 043                          INX     H
    4920/ 16.256 : 161                          MOV     M,C
    4921/ 16.257 : 043                          INX     H
    4922/ 16.260 :                              CPU     Z80
    4923/ 16.260 : 020 332                      DJNZ    WSV4            ; LOOP UNTIL MOD 16 COUNTER = ZERO
    4924/ 16.262 :                              CPU     8080
    4925/ 16.262 :                      
    4926/ 16.262 : 311                          RET
    4927/ 16.263 :                      
    4928/ 16.263 :                      ;;      XACR - EXIT AUTO CARRIAGE RETURN
    4929/ 16.263 :                      ;
    4930/ 16.263 :                      ;       *XACR* CLEARS THE AUTO CARRIAGE RETURN FLAG
    4931/ 16.263 :                      ;
    4932/ 16.263 :                      ;
    4933/ 16.263 :                      ;       ENTRY   (B,C) = MODEB
    4934/ 16.263 :                      ;
    4935/ 16.263 :                      ;       EXIT    NONE
    4936/ 16.263 :                      ;
    4937/ 16.263 :                      ;       USES    A,F
    4938/ 16.263 :                      
    4939/ 16.263 :                      
    4940/ 16.263 : 012                  XACR    LDAX    B               ; GET MODE FLAGS
    4941/ 16.264 : 346 357                      ANI     255-MB.ACR      ; CLEAR AUTO CARRIAGE RETURN
    4942/ 16.266 : 002                          STAX    B
    4943/ 16.267 : 311                          RET
    4944/ 16.270 :                      
    4945/ 16.270 :                      ;;      XALF - EXIT AUTO LINE FEED MODE
    4946/ 16.270 :                      ;
    4947/ 16.270 :                      ;       *XALF* CLEARS THE AUTO LINE FEED MODE FLAG
    4948/ 16.270 :                      ;
    4949/ 16.270 :                      ;
    4950/ 16.270 :                      ;       ENTRY   (B,C) = MODEB
    4951/ 16.270 :                      ;
    4952/ 16.270 :                      ;       EXIT    NONE
    4953/ 16.270 :                      ;
    4954/ 16.270 :                      ;       USES    A,F
    4955/ 16.270 :                      
    4956/ 16.270 :                      
    4957/ 16.270 : 012                  XALF    LDAX    B               ; GET MODE FLAGS
    4958/ 16.271 : 346 367                      ANI     255-MB.ALF
    4959/ 16.273 : 002                          STAX    B
    4960/ 16.274 : 311                          RET
    4961/ 16.275 :                      
    4962/ 16.275 :                      ;;      XGM - EXIT GRAPHICS MODE
    4963/ 16.275 :                      ;
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 84 - 2024-05-01 01:09:39 PM


    4964/ 16.275 :                      ;       *XGM* CLEARS THE GRAPHICS MODE FLAG
    4965/ 16.275 :                      ;
    4966/ 16.275 :                      ;       ENTRY   (D,E) = MODEA
    4967/ 16.275 :                      ;
    4968/ 16.275 :                      ;       EXIT    NONE
    4969/ 16.275 :                      ;
    4970/ 16.275 :                      ;       USES    A,F
    4971/ 16.275 :                      
    4972/ 16.275 :                      
    4973/ 16.275 : 353                  XGM     XCHG                    ; (H,L) = MODEA
    4974/ 16.276 :                              CPU     Z80
    4975/ 16.276 : 313 216                      RES     IB.GRPH,(HL)    ; RESET GRAPHICS MODE FLAG
    4976/ 16.300 :                              CPU     8080
    4977/ 16.300 : 311                          RET
    4978/ 16.301 :                      
    4979/ 16.301 :                      ;;      XHSM - EXIT HOLD SCREEN MODE
    4980/ 16.301 :                      ;
    4981/ 16.301 :                      ;       *XHSM* CLEARS THE HOLD SCREEN MODE FLAG
    4982/ 16.301 :                      ;
    4983/ 16.301 :                      ;
    4984/ 16.301 :                      ;       ENTRY   (D,E) = MODEA
    4985/ 16.301 :                      ;
    4986/ 16.301 :                      ;       EXIT    NONE
    4987/ 16.301 :                      ;
    4988/ 16.301 :                      ;       USES    A,F
    4989/ 16.301 :                      
    4990/ 16.301 :                      
    4991/ 16.301 : 353                  XHSM    XCHG                    ; (H,L) = MODEA
    4992/ 16.302 :                              CPU     Z80
    4993/ 16.302 : 313 206                      RES     IB.HSM,(HL)
    4994/ 16.304 :                              CPU     8080
    4995/ 16.304 : 311                          RET
    4996/ 16.305 :                      
    4997/ 16.305 :                      ;;      XICM - EXIT INSERT CHARACTER MODE
    4998/ 16.305 :                      ;
    4999/ 16.305 :                      ;       *XICM* CLEARS THE INSERT CHARACTER MODE FLAG
    5000/ 16.305 :                      ;
    5001/ 16.305 :                      ;
    5002/ 16.305 :                      ;       ENTRY   (D,E) = MODEA
    5003/ 16.305 :                      ;
    5004/ 16.305 :                      ;       EXIT    NONE
    5005/ 16.305 :                      ;
    5006/ 16.305 :                      ;       USES    A,F
    5007/ 16.305 :                      
    5008/ 16.305 :                      
    5009/ 16.305 : 353                  XICM    XCHG                    ; (H,L) = MODEA
    5010/ 16.306 :                              CPU     Z80
    5011/ 16.306 : 313 266                      RES     IB.ICM,(HL)     ; RESET INSERT CHARACTER MODE FLAG
    5012/ 16.310 :                              CPU     8080
    5013/ 16.310 : 311                          RET
    5014/ 16.311 :                      
    5015/ 16.311 :                      ;;      XKAM - EXIT KEYPAD ALTERNATE MODE
    5016/ 16.311 :                      ;
    5017/ 16.311 :                      ;       *XKAM* CLEARS THE KEYPAD ALTERNATE MODE FLAG
    5018/ 16.311 :                      ;
    5019/ 16.311 :                      ;
    5020/ 16.311 :                      ;       ENTRY   (B,C) = MODEB
    5021/ 16.311 :                      ;
    5022/ 16.311 :                      ;       EXIT    NONE
    5023/ 16.311 :                      ;
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 85 - 2024-05-01 01:09:39 PM


    5024/ 16.311 :                      ;       USES    A,F
    5025/ 16.311 :                      
    5026/ 16.311 : 012                  XKAM    LDAX    B               ; SET MODEB FLAGS
    5027/ 16.312 : 346 177                      ANI     377Q-MB.KPDA
    5028/ 16.314 : 002                          STAX    B
    5029/ 16.315 : 311                          RET
    5030/ 16.316 :                      
    5031/ 16.316 :                      ;;      XKSM - EXIT KEYPAD SHIFTED MODE
    5032/ 16.316 :                      ;
    5033/ 16.316 :                      ;       *XKSM* CLEARS THE KEYPAD SHIFTED MODE FLAG
    5034/ 16.316 :                      ;
    5035/ 16.316 :                      ;
    5036/ 16.316 :                      ;       ENTRY   (B,C) = MODEB
    5037/ 16.316 :                      ;
    5038/ 16.316 :                      ;       EXIT    NONE
    5039/ 16.316 :                      ;
    5040/ 16.316 :                      ;       USES    A,F
    5041/ 16.316 :                      
    5042/ 16.316 :                      
    5043/ 16.316 : 012                  XKSM    LDAX    B               ; GET MODEB FLAGS
    5044/ 16.317 : 346 277                      ANI     377Q-MB.KPDS
    5045/ 16.321 : 002                          STAX    B
    5046/ 16.322 : 311                          RET
    5047/ 16.323 :                      
    5048/ 16.323 :                      ;;      AXMT25 - ANSI TRANSMIT 25TH LINE
    5049/ 16.323 :                      ;
    5050/ 16.323 :                      ;       *AXMT25* IS THE ENTRY POINT FOR *XMT25* WHEN THE TERMINAL IS
    5051/ 16.323 :                      ;       IN ANSI MODE
    5052/ 16.323 :                      ;
    5053/ 16.323 :                      ;
    5054/ 16.323 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    5055/ 16.323 :                      ;
    5056/ 16.323 :                      ;       EXIT    TO *XMT25*
    5057/ 16.323 :                      ;
    5058/ 16.323 :                      ;       USES    A,B,C,D,E,H,L,F
    5059/ 16.323 :                      
    5060/ 16.323 :                      
    5061/ 16.323 : 170                  AXMT25  MOV     A,B             ; SEE IF PN WAS INPUT
    5062/ 16.324 : 267                          ORA     A
    5063/ 16.325 : 300                          RNZ                     ; IF INPUT, ILLEGAL, EXIT
    5064/ 16.326 :                      
    5065/ 16.326 :                      ;       JMP     XMT25
    5066/ 16.326 :                      ;       ERRNZ   $-XMT25
    5067/ 16.326 :                      
    5068/ 16.326 :                      ;;      XMT25 - TRANSMIT 25TH LINE
    5069/ 16.326 :                      ;
    5070/ 16.326 :                      ;       *SMT25* TRANSMITS THE LINE IN THE SAME MANNER AS *XMTP*, BUT ONLY IF
    5071/ 16.326 :                      ;       THE 25TH LINE IS ENABLED.
    5072/ 16.326 :                      ;
    5073/ 16.326 :                      ;
    5074/ 16.326 :                      ;       ENTRY   NONE
    5075/ 16.326 :                      ;
    5076/ 16.326 :                      ;       EXIT    NONE
    5077/ 16.326 :                      ;
    5078/ 16.326 :                      ;       USES    A,B,C,D,E,H,L,F
    5079/ 16.326 :                      
    5080/ 16.326 : 072 311 100          XMT25   LDA     MODEI           ; GET MODE FLAGS
    5081/ 16.331 : 346 200                      ANI     MI.25L          ; IS 25TH LINE ON?
    5082/ 16.333 :                              CPU     Z80
    5083/ 16.333 : 050 021                      JR      Z,XMT25.1       ; IF NOT ON, JUST SEND CR
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 86 - 2024-05-01 01:09:39 PM


    5084/ 16.335 :                              CPU     8080
    5085/ 16.335 :                      
    5086/ 16.335 : 052 266 100                  LHLD    SHOME           ; GET CURRENT HOME POSITION
    5087/ 16.340 : 021 200 007                  LXI     D,1920          ; ADD 24 LINES*80 COLUMNS
    5088/ 16.343 : 031                          DAD     D
    5089/ 16.344 : 174                          MOV     A,H             ; STAY IN VIDEO RAM
    5090/ 16.345 : 366 370                      ORI     VRAMS/256
    5091/ 16.347 : 147                          MOV     H,A
    5092/ 16.350 : 353                          XCHG                    ; FIRST ADDRESS ON LINE TO (D,E)
    5093/ 16.351 : 006 000                      MVI     B,0             ; CURRENT TRANSMIT MODE = NONE
    5094/ 16.353 : 315 001 017                  CALL    XMTL            ; TRANSMIT LINE
    5095/ 16.356 : 076 015              XMT25.1 MVI     A,CR            ; TERMINATE LINE WITH A CARRIAGE RETURN
    5096/ 16.360 : 315 366 016                  CALL    XMTC
    5097/ 16.363 : 323 340                      OUT     MP.BELL         ; SIGNAL DONE TO USER
    5098/ 16.365 : 311                          RET
    5099/ 16.366 :                      
    5100/ 16.366 :                      ;;      XMTC - TRANSMIT CHARACTER
    5101/ 16.366 :                      ;
    5102/ 16.366 :                      ;       *XMTC* PLACES THE GIVEN CHARACTER INTO THE OUTPUT FIFO AND
    5103/ 16.366 :                      ;       ASSURES THAT THE TERMINAL IS IN THE ON-LINE STATE UNTIL THE CHARACTER
    5104/ 16.366 :                      ;       IS SENT
    5105/ 16.366 :                      ;
    5106/ 16.366 :                      ;
    5107/ 16.366 :                      ;               ************* CAUTION: THIS ROUTINE MAY        **************
    5108/ 16.366 :                      ;               ************* ONLY BE USED BY  *XMT??* ROUTINES *************
    5109/ 16.366 :                      ;
    5110/ 16.366 :                      ;
    5111/ 16.366 :                      ;       ENTRY   (A) = CHARACTER TO SEND
    5112/ 16.366 :                      ;
    5113/ 16.366 :                      ;       EXIT    NONE
    5114/ 16.366 :                      ;
    5115/ 16.366 :                      ;       USES    A,D,E,H,L,F
    5116/ 16.366 :                      
    5117/ 16.366 :                      
    5118/ 16.366 : 365                  XMTC    PUSH    PSW             ; SAVE CHARACTER TO SEND
    5119/ 16.367 :                      
    5120/ 16.367 : 333 105              XMTC1   IN      AP.LSR          ; GET LINE STATUS REGISTER OF UART
    5121/ 16.371 : 346 040                      ANI     AB.THRE         ; HOLDING REGISTER EMPTY
    5122/ 16.373 :                              CPU     Z80
    5123/ 16.373 : 050 372                      JR      Z,XMTC1         ; IF NOT EMPTY
    5124/ 16.375 :                              CPU     8080
    5125/ 16.375 :                      
    5126/ 16.375 : 361                          POP     PSW             ; ELSE OUTPUT CHARACTER
    5127/ 16.376 : 323 100                      OUT     AP.THR
    5128/ 17.000 : 311                          RET
    5129/ 17.001 :                      
    5130/ 17.001 :                      ;;      XMTL - TRANSMIT LINE
    5131/ 17.001 :                      ;
    5132/ 17.001 :                      ;       *XMTL* TRANSMITS ONE LINE TO THE HOST INCLUDING THE APPROPRIATE
    5133/ 17.001 :                      ;       ESCAPE SEQUENCES FOR ENTERING AND EXITING THE GRAPHICS AND
    5134/ 17.001 :                      ;       REVERSE VIDEO MODES
    5135/ 17.001 :                      ;
    5136/ 17.001 :                      ;
    5137/ 17.001 :                      ;       ENTRY   (B) = CURRENT TRANSMIT MODE (RV AND/OR GRAPHICS)
    5138/ 17.001 :                      ;               (D,E) = ADDRESS OF BEGINNING OF LINE
    5139/ 17.001 :                      ;
    5140/ 17.001 :                      ;       EXIT    (B) = CURRENT TRANSMIT MODE (UPDATED)
    5141/ 17.001 :                      ;               (D,E) = LAST ADDRESS OF LINE +1
    5142/ 17.001 :                      ;
    5143/ 17.001 :                      ;       USES    A,B,C,D,E,H,L,F
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 87 - 2024-05-01 01:09:39 PM


    5144/ 17.001 :                      
    5145/ 17.001 :                      
    5146/ 17.001 : 046 120              XMTL    MVI     H,80            ; SET NUMBER OF CHARACTERS TO SEND
    5147/ 17.003 : 345                  XMTL1.1 PUSH    H
    5148/ 17.004 : 032                          LDAX    D               ; GET CHARACTER
    5149/ 17.005 : 117                          MOV     C,A             ; SAVE FOR LATER USE
    5150/ 17.006 : 023                          INX     D               ; INCREMENT MEMORY POINTER
    5151/ 17.007 : 172                          MOV     A,D             ; SAY IN VIDEO RAM
    5152/ 17.010 : 366 370                      ORI     VRAMS/256
    5153/ 17.012 : 127                          MOV     D,A
    5154/ 17.013 : 325                          PUSH    D               ; SAVE ADDRESS
    5155/ 17.014 : 171                          MOV     A,C
    5156/ 17.015 : 346 177                      ANI     01111111B       ; TOSS ANY REVERSE VIDEO BIT FOR NOW
    5157/ 17.017 : 376 040                      CPI     ' '             ; SEE IF LESS THAN A SPACE (GRAPHICS)
    5158/ 17.021 :                              CPU     Z80
    5159/ 17.021 : 070 010                      JR      C,XMTL1         ; IF A GRAPHIC CHARACTER
    5160/ 17.023 :                              CPU     8080
    5161/ 17.023 :                      
    5162/ 17.023 : 376 177                      CPI     177Q            ; 177Q IS ALSO A GRAPHIC DISPLAY CHARACTER
    5163/ 17.025 :                              CPU     Z80
    5164/ 17.025 : 040 055                      JR      NZ,XMTL4        ; IF NOT GRAPHIC
    5165/ 17.027 :                              CPU     8080
    5166/ 17.027 :                      
    5167/ 17.027 :                      ;       CHARACTER IS GRAPHIC
    5168/ 17.027 :                      ;
    5169/ 17.027 : 076 136                      MVI     A,'^'           ; SET PRINTABLE EQUIVALENT OF 177Q
    5170/ 17.031 :                              CPU     Z80
    5171/ 17.031 : 030 012                      JR      XMTL2
    5172/ 17.033 :                              CPU     8080
    5173/ 17.033 :                      
    5174/ 17.033 : 376 037              XMTL1   CPI     37Q             ; SEE IF GRAPHIC '-'
    5175/ 17.035 :                              CPU     Z80
    5176/ 17.035 : 040 004                      JR      NZ,XMTL1.3      ; IF NOT 37Q
    5177/ 17.037 :                              CPU     8080
    5178/ 17.037 :                      
    5179/ 17.037 : 076 137                      MVI     A,'_'           ; ELSE, SET PRINTABLE
    5180/ 17.041 :                              CPU     Z80
    5181/ 17.041 : 030 002                      JR      XMTL2           ; CHECK GRAPHIC MODE
    5182/ 17.043 :                              CPU     8080
    5183/ 17.043 :                      
    5184/ 17.043 : 366 140              XMTL1.3 ORI     01100000B       ; MAKE GRAPHIC PRINTABLE
    5185/ 17.045 : 365                  XMTL2   PUSH    PSW             ; SAVE CHARACTER TO OUTPUT
    5186/ 17.046 :                      
    5187/ 17.046 :                      ;       SEE IF LAST CHARACTER OUTPUT WAS ALSO GRAPHIC
    5188/ 17.046 :                      ;
    5189/ 17.046 :                              CPU     Z80
    5190/ 17.046 : 313 110                      BIT     1,B
    5191/ 17.050 : 040 067                      JR      NZ,XMTL6        ; IF LAST CHARACTER WAS ALSO GRAPHIC
    5192/ 17.052 :                      
    5193/ 17.052 : 313 310                      SET     1,B             ; ELSE, SET MODE TO INCLUDE  GRAPHICS
    5194/ 17.054 :                              CPU     8080
    5195/ 17.054 : 072 310 100                  LDA     MODEB           ; SEE IF IN ANSI MODE
    5196/ 17.057 : 346 040                      ANI     MB.ANSI
    5197/ 17.061 :                              CPU     Z80
    5198/ 17.061 : 050 012                      JR      Z,XMTL3         ; IF IN HEATH MODE
    5199/ 17.063 :                              CPU     8080
    5200/ 17.063 :                      
    5201/ 17.063 : 315 302 017                  CALL    XMTS            ; TRANSMIT ANSI 'ENTER GRAPHICS' SEQUENCE
    5202/ 17.066 : 033 133 061 060 355          DB      ESC,'[','10','m'+200Q
    5203/ 17.073 :                      
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 88 - 2024-05-01 01:09:39 PM


    5204/ 17.073 :                              CPU     Z80
    5205/ 17.073 : 030 044                      JR      XMTL6           ; GO CHECK FOR REVERSE VIDEO
    5206/ 17.075 :                              CPU     8080
    5207/ 17.075 :                      
    5208/ 17.075 : 315 302 017          XMTL3   CALL    XMTS            ; TRANSMIT HEATH 'ENTER GRAPHICS' SEQUENCE
    5209/ 17.100 : 033 306                      DB      ESC,'F'+200Q
    5210/ 17.102 :                              CPU     Z80
    5211/ 17.102 : 030 035                      JR      XMTL6           ; CHECK FOR REVERSE VIDEO
    5212/ 17.104 :                              CPU     8080
    5213/ 17.104 :                      
    5214/ 17.104 :                      ;       CHARACTER IS NOT GRAPHIC
    5215/ 17.104 :                      ;
    5216/ 17.104 : 365                  XMTL4   PUSH    PSW             ; SAVE CHARACTER TO OUTPUT
    5217/ 17.105 :                              CPU     Z80
    5218/ 17.105 : 313 110                      BIT     1,B             ; SEE IF LAST WAS GRAPHIC
    5219/ 17.107 : 050 030                      JR      Z,XMTL6         ; IF LAST WAS NOT GRAPHIC EITHER
    5220/ 17.111 :                      
    5221/ 17.111 : 313 210                      RES     1,B             ; ELSE, SET NO GRAPHIC
    5222/ 17.113 :                              CPU     8080
    5223/ 17.113 :                      
    5224/ 17.113 : 072 310 100                  LDA     MODEB           ; SEE IF IN ANSI MODE
    5225/ 17.116 : 346 040                      ANI     MB.ANSI
    5226/ 17.120 :                              CPU     Z80
    5227/ 17.120 : 050 012                      JR      Z,XMTL5         ; IF IN HEATH MODE
    5228/ 17.122 :                              CPU     8080
    5229/ 17.122 :                      
    5230/ 17.122 : 315 302 017                  CALL    XMTS            ; ELSE, TRANSMIT ANSI 'EXIT GRAPHICS' SEQUENCE
    5231/ 17.125 : 033 133 061 061 355          DB      ESC,'[','11','m'+200Q
    5232/ 17.132 :                              CPU     Z80
    5233/ 17.132 : 030 005                      JR      XMTL6           ; CHECK FOR REVERSE VIDEO
    5234/ 17.134 :                              CPU     8080
    5235/ 17.134 :                      
    5236/ 17.134 : 315 302 017          XMTL5   CALL    XMTS            ; TRANSMIT HEATH 'EXIT GRAPHICS' SEQUENCE
    5237/ 17.137 : 033 307                      DB      ESC,'G'+200Q
    5238/ 17.141 :                      
    5239/ 17.141 :                      ;       SEE IF CHARACTER IS IN REVERSE VIDEO
    5240/ 17.141 :                      ;
    5241/ 17.141 : =17.141O             XMTL6   EQU     $
    5242/ 17.141 :                      
    5243/ 17.141 :                              CPU     Z80
    5244/ 17.141 : 313 171                      BIT     7,C             ; SEE IF MSB IS SET FOR RV
    5245/ 17.143 : 050 035                      JR      Z,XMTL7.5       ; IF NOT REV
    5246/ 17.145 :                      
    5247/ 17.145 :                      ;       CHARACTER IS REVERSE VIDEO
    5248/ 17.145 :                      ;
    5249/ 17.145 : 313 120                      BIT     2,B             ; SEE I LAST WAS RV
    5250/ 17.147 : 040 063                      JR      NZ,XMTL9        ; IF LAST WAS ALSO RV
    5251/ 17.151 :                      
    5252/ 17.151 : 313 320                      SET     2,B             ; ELSE, SET RV MODE AS CURRENT
    5253/ 17.153 :                              CPU     8080
    5254/ 17.153 : 072 310 100                  LDA     MODEB           ; SEE IF IN HEATH MODE
    5255/ 17.156 : 346 040                      ANI     MB.ANSI
    5256/ 17.160 :                              CPU     Z80
    5257/ 17.160 : 050 011                      JR      Z,XMTL7         ; IF IN HEATH MODE
    5258/ 17.162 :                              CPU     8080
    5259/ 17.162 :                      
    5260/ 17.162 : 315 302 017                  CALL    XMTS            ; ELSE, TRANSMIT ANSI 'ENTER REVERSE VIDEO'
    5261/ 17.165 : 033 133 067 355              DB      ESC,'[','7','m'+200Q
    5262/ 17.171 :                              CPU     Z80
    5263/ 17.171 : 030 041                      JR      XMTL9           ; GO TRANSMIT CHARACTER
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 89 - 2024-05-01 01:09:39 PM


    5264/ 17.173 :                              CPU     8080
    5265/ 17.173 :                      
    5266/ 17.173 : 315 302 017          XMTL7   CALL    XMTS            ; TRANSMIT HEATH 'ENTER REVERSE VIDEO'
    5267/ 17.176 : 033 360                      DB      ESC,'p'+200Q
    5268/ 17.200 :                              CPU     Z80
    5269/ 17.200 : 030 032                      JR      XMTL9           ; OUTPUT CHARACTER
    5270/ 17.202 :                              CPU     8080
    5271/ 17.202 :                      
    5272/ 17.202 :                      ;       CHARACTER IS NOT REVERSE VIDEO
    5273/ 17.202 :                      ;
    5274/ 17.202 : =17.202O             XMTL7.5 EQU     $
    5275/ 17.202 :                              CPU     Z80
    5276/ 17.202 : 313 120                      BIT     2,B             ; SEE IF LAST CHARACTER WAS RC
    5277/ 17.204 : 050 026                      JR      Z,XMTL9         ; IF LAST WASN'T EITHER
    5278/ 17.206 :                      
    5279/ 17.206 : 313 220                      RES     2,B             ; ELSE, SET CURRENT MODE AS NOT REVERSE
    5280/ 17.210 :                              CPU     8080
    5281/ 17.210 :                      
    5282/ 17.210 : 072 310 100                  LDA     MODEB           ; SEE IF IN ANSI MODE
    5283/ 17.213 : 346 040                      ANI     MB.ANSI
    5284/ 17.215 :                              CPU     Z80
    5285/ 17.215 : 050 010                      JR      Z,XMTL8         ; IF IN HEATH MODE
    5286/ 17.217 :                              CPU     8080
    5287/ 17.217 :                      
    5288/ 17.217 : 315 302 017                  CALL    XMTS            ; ELSE SEND ANSI 'EXIT RV'
    5289/ 17.222 : 033 133 355                  DB      ESC,'[','m'+200Q
    5290/ 17.225 :                              CPU     Z80
    5291/ 17.225 : 030 005                      JR      XMTL9           ; SEND CHARACTER
    5292/ 17.227 :                              CPU     8080
    5293/ 17.227 :                      
    5294/ 17.227 : 315 302 017          XMTL8   CALL    XMTS            ; SEND HEATH 'EXIT RV' SEQUENCE
    5295/ 17.232 : 033 361                      DB      ESC,'q'+200Q
    5296/ 17.234 :                      
    5297/ 17.234 : 361                  XMTL9   POP     PSW             ; GET CHARACTER TO SEND
    5298/ 17.235 : 315 366 016                  CALL    XMTC            ; SEND IT
    5299/ 17.240 : 321                          POP     D               ; GET LINE ADDRESS
    5300/ 17.241 : 341                          POP     H               ; GET COLUMN COUNTER
    5301/ 17.242 : 045                          DCR     H               ; SEE IF ANY LEFT TO SEND
    5302/ 17.243 : 302 003 017                  JNZ     XMTL1.1         ; IF NOT DONE YET
    5303/ 17.246 :                      
    5304/ 17.246 : 311                          RET
    5305/ 17.247 :                      
    5306/ 17.247 :                      ;;      AXMTP - ANSI TRANSMIT PAGE
    5307/ 17.247 :                      ;
    5308/ 17.247 :                      ;       *AXMTP* IS THE ENTRY POINT FOR *XMTP* WHEN THE TERMINAL IS IN
    5309/ 17.247 :                      ;       THE ANSI MODE
    5310/ 17.247 :                      ;
    5311/ 17.247 :                      ;
    5312/ 17.247 :                      ;       ENTRY   (B) = ZERO IF NO PN WAS INPUT
    5313/ 17.247 :                      ;
    5314/ 17.247 :                      ;       EXIT    TO *XMTP*
    5315/ 17.247 :                      ;
    5316/ 17.247 :                      ;       USES    A,B,C,D,E,H,L,F
    5317/ 17.247 :                      
    5318/ 17.247 :                      
    5319/ 17.247 : 170                  AXMTP   MOV     A,B             ; SEE IF PN WAS INPUT
    5320/ 17.250 : 267                          ORA     A
    5321/ 17.251 : 300                          RNZ                     ; IF INPUT, ILLEGAL, EXIT
    5322/ 17.252 :                      
    5323/ 17.252 :                      ;       JMP     XMTP            ; ELSE, TRANSMIT PAGE
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 90 - 2024-05-01 01:09:39 PM


    5324/ 17.252 :                      
    5325/ 17.252 :                      ;;      XMTP - TRANSMIT PAGE
    5326/ 17.252 :                      ;
    5327/ 17.252 :                      ;       *XMTP* TRANSMITS THE ENTIRE CONTENTS OF THE PAGE (EXCLUDING THE 25TH LINE)
    5328/ 17.252 :                      ;       IF THE TERMINAL IS OFF LINE, THE CONTENTS OF THE PAGE IS STILL
    5329/ 17.252 :                      ;       TRANSMITTED TO THE HOST AND THE TERMINAL IS RETURNED TO THE CURRENT
    5330/ 17.252 :                      ;       STATE OF THE OFF LINE SWITCH AFTER THE PAGE HAS BEEN TRANSMITTED.
    5331/ 17.252 :                      ;       IF GRAPHICS CHARACTERS OR REVERSE VIDEO CHARACTERS ARE ENCOUNTERED.
    5332/ 17.252 :                      ;       THE PROPER ESCAPE CODES FOR ENTERING AND EXITING THESE MODES ARE SENT
    5333/ 17.252 :                      ;       TO THE HOST IN THE SAME MANNER AS THE HOST WOULD USE TO PLACE THESE
    5334/ 17.252 :                      ;       CHARACTERS ON THE SCREEN
    5335/ 17.252 :                      ;
    5336/ 17.252 :                      ;
    5337/ 17.252 :                      ;       ENTRY   NONE
    5338/ 17.252 :                      ;
    5339/ 17.252 :                      ;       EXIT    NONE
    5340/ 17.252 :                      ;
    5341/ 17.252 :                      ;       USES    A,B,C,D,E,H,L,F
    5342/ 17.252 :                      
    5343/ 17.252 :                      
    5344/ 17.252 : 052 266 100          XMTP    LHLD    SHOME           ; GET FIRST ADDRESS ON SCREEN
    5345/ 17.255 : 353                          XCHG                    ; TO (D,E)
    5346/ 17.256 : 006 000                      MVI     B,0             ; CLEAR CURRENT TRANSMIT MODE
    5347/ 17.260 : 046 030                      MVI     H,24            ; SEND 24 LINES
    5348/ 17.262 : 345                  XMTP1   PUSH    H               ; SAVE COUNT
    5349/ 17.263 : 315 001 017                  CALL    XMTL            ; TRANSMIT ONE LINE
    5350/ 17.266 : 341                          POP     H               ; GET LINE COUNTER
    5351/ 17.267 : 045                          DCR     H               ; COUNT - 1
    5352/ 17.270 :                              CPU     Z80
    5353/ 17.270 : 040 370                      JR      NZ,XMTP1        ; IF NOT DONE
    5354/ 17.272 :                              CPU     8080
    5355/ 17.272 :                      
    5356/ 17.272 : 076 015                      MVI     A,CR            ; SEND A CARRIAGE RETURN TO TERMINATE PAGE
    5357/ 17.274 : 315 366 016                  CALL    XMTC            ; TRANSMIT CHARACTER
    5358/ 17.277 : 323 340                      OUT     MP.BELL         ; SIGNAL DONE TO USER
    5359/ 17.301 : 311                          RET
    5360/ 17.302 :                      
    5361/ 17.302 :                      ;;      XMTS - TRANSMIT STRING
    5362/ 17.302 :                      ;
    5363/ 17.302 :                      ;       *XMTS* PLACES A STRING OF CHARACTERS IN THE OUTPUT FIFO AND
    5364/ 17.302 :                      ;       ASSURES THAT THEY ARE SENT REGARDLESS OF WHETHER THE TERMINAL
    5365/ 17.302 :                      ;       IS ON LINE OR NOT
    5366/ 17.302 :                      ;
    5367/ 17.302 :                      ;
    5368/ 17.302 :                      ;       ENTRY   STRING TO BE SENT MUST IMMEDIATELY FOLLOW THE CALL
    5369/ 17.302 :                      ;                       TO THIS ROUTINE.  FINAL CHARACTER MUST HAVE
    5370/ 17.302 :                      ;                       BIT SEVEN SET
    5371/ 17.302 :                      ;
    5372/ 17.302 :                      ;       EXIT    NONE
    5373/ 17.302 :                      ;
    5374/ 17.302 :                      ;       USES    A,D,E,H,L,F
    5375/ 17.302 :                      
    5376/ 17.302 :                      
    5377/ 17.302 : 321                  XMTS    POP     D               ; GET ADDRESS OF CHARACTERS TO BE SENT
    5378/ 17.303 : 032                  XMTS1   LDAX    D               ; GET CHARACTER TO SEND
    5379/ 17.304 : 023                          INX     D               ; POINT TO NEXT
    5380/ 17.305 : 267                          ORA     A               ; SET CPU FLAGS
    5381/ 17.306 : 372 316 017                  JM      XMTS2           ; IF LAST CHARACTER TO SEND
    5382/ 17.311 :                      
    5383/ 17.311 : 315 366 016                  CALL    XMTC            ; SEND ONE CHARACTER
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 91 - 2024-05-01 01:09:39 PM


    5384/ 17.314 :                              CPU     Z80
    5385/ 17.314 : 030 365                      JR      XMTS1           ; GET NEXT
    5386/ 17.316 :                              CPU     8080
    5387/ 17.316 :                      
    5388/ 17.316 : 346 177              XMTS2   ANI     01111111B       ; TOSS TERMINATOR BIT
    5389/ 17.320 : 315 366 016                  CALL    XMTC            ; OUTPUT LAST CHARACTER
    5390/ 17.323 : 325                          PUSH    D               ; GET RETURN ADDRESS
    5391/ 17.324 : 311                          RET
    5392/ 17.325 :                      
    5393/ 17.325 :                      
    5394/ 17.325 :                      ;;      XRVM - EXIT REVERSE VIDEO MODE
    5395/ 17.325 :                      ;
    5396/ 17.325 :                      ;       *XRVM* CLEARS THE REVERSE VIDEO MODE FLAG
    5397/ 17.325 :                      ;
    5398/ 17.325 :                      ;
    5399/ 17.325 :                      ;       ENTRY   (D,E) = MODEA
    5400/ 17.325 :                      ;
    5401/ 17.325 :                      ;       EXIT    NONE
    5402/ 17.325 :                      ;
    5403/ 17.325 :                      ;       USES    A,F
    5404/ 17.325 :                      
    5405/ 17.325 :                      
    5406/ 17.325 : =17.325O             XRVM    EQU     $
    5407/ 17.325 :                      
    5408/ 17.325 : 353                          XCHG                    ; (H,L) = MODEA
    5409/ 17.326 :                              CPU     Z80
    5410/ 17.326 : 313 276                      RES     IB.RV,(HL)      ; RESET FLAG
    5411/ 17.330 : 311                          RET
    5412/ 17.331 :                      
    5413/ 17.331 :                      ;;      VPARD60 - VIDEO PARAMETER DATA
    5414/ 17.331 :                      ;
    5415/ 17.331 :                      ;       THE CONTENTS OF VPARD60 ARE COPIED TO THE CTRC BY *ICRT* IF
    5416/ 17.331 :                      ;       THE POWER UP CONFIGURATION SWITCH IS SET TO THE 60HZ POSITION
    5417/ 17.331 :                      
    5418/ 17.331 : =17.331O             VPARD60 EQU     $
    5419/ 17.331 : 140                          DB      96              ; HORIZONTAL TOTAL
    5420/ 17.332 : 120                          DB      80              ; HORIZONTAL DISPLAYED
    5421/ 17.333 : 124                          DB      84              ; HORIZONTAL SYNC POSITION
    5422/ 17.334 : 010                          DB      8               ; HORIZONTAL SYNC WIDTH
    5423/ 17.335 : 031                          DB      25              ; VERTICAL TOTAL
    5424/ 17.336 : 004                          DB      4               ; VERTICAL TOTAL ADJUST
    5425/ 17.337 : 030                          DB      24              ; VERTICAL DISPLAYED
    5426/ 17.340 : 031                          DB      25              ; VERTICAL SYNC POSITION
    5427/ 17.341 : 000                          DB      0               ; INTERLACE SCAN
    5428/ 17.342 : 011                          DB      9               ; MAXIMUM SCAN LINE
    5429/ 17.343 : 110                          DB      01001000B       ; FAST BLINK CURSOR STARTING AT LINE 8
    5430/ 17.344 : 010                          DB      8               ; CURSOR END AT LINE 8
    5431/ 17.345 : 000                          DB      0               ; MEMORY STARTING ADDRESS (MSB)
    5432/ 17.346 : 000                          DB      0               ; MEMORY STARTING ADDRESS (LSB)
    5433/ 17.347 : 000                          DB      0               ; CURSOR STARTING ADDRESS (MSB)
    5434/ 17.350 : 000                          DB      0               ; CURSOR STARTING ADDRESS (lSB)
    5435/ 17.351 :                      
    5436/ 17.351 :                      ;;      VPAR50 - VIDEO PARAMETER DATA
    5437/ 17.351 :                      ;
    5438/ 17.351 :                      ;       THE CONTENTS OF VPARD65 ARE COPIED TO THE CTRC BY *ICRT* IF
    5439/ 17.351 :                      ;       THE POWER UP CONFIGURATION SWITCH IS SET TO THE 50HZ POSITION
    5440/ 17.351 :                      
    5441/ 17.351 : =17.351O             VPARD50 EQU     $
    5442/ 17.351 : 140                          DB      96              ; HORIZONTAL TOTAL
    5443/ 17.352 : 120                          DB      80              ; HORIZONTAL DISPLAYED
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 92 - 2024-05-01 01:09:39 PM


    5444/ 17.353 : 124                          DB      84              ; HORIZONTAL SYNC POSITION
    5445/ 17.354 : 010                          DB      8               ; HORIZONTAL SYNC WIDTH
    5446/ 17.355 : 036                          DB      30              ; VERTICAL TOTAL
    5447/ 17.356 : 007                          DB      7               ; VERTICAL TOTAL ADJUST
    5448/ 17.357 : 030                          DB      24              ; VERTICAL DISPLAYED
    5449/ 17.360 : 033                          DB      27              ; VERTICAL SYNC POSITION
    5450/ 17.361 : 000                          DB      0               ; INTERLACE SCAN
    5451/ 17.362 : 011                          DB      9               ; MAXIMUM SCAN LINE
    5452/ 17.363 : 110                          DB      01001000B       ; FAST BLINK CURSOR STARTING AT LINE 8
    5453/ 17.364 : 010                          DB      8               ; CURSOR END AT LINE 8
    5454/ 17.365 : 000                          DB      0               ; MEMORY STARTING ADDRESS (MSB)
    5455/ 17.366 : 000                          DB      0               ; MEMORY STARTING ADDRESS (LSB)
    5456/ 17.367 : 000                          DB      0               ; CURSOR STARTING ADDRESS (MSB)
    5457/ 17.370 : 000                          DB      0               ; CURSOR STARTING ADDRESS (lSB)
    5458/ 17.371 :                      
    5459/ 17.371 : 314                          DB      48H+43H+41H     ; MORAL SUPPORT
    5460/ 17.372 : 110 061 071                  DB      'H19'           ; FINAL CODE IDENTIFIER
    5461/ 17.375 : 122 116 102                  DB      52H,4EH,42H     ; CODE SUPPORT CODE
    5462/ 20.000 :                      
    5463/ 20.000 :                      
    5464/ 20.000 :                      
    5465/ 20.000 :                      ;;;     RAM ALLOCATIONS
    5466/ 20.000 :                      
    5467/100.000 :                              ORG     40000Q
    5468/100.000 : =100.000O            RAM     EQU     $               ; 256 BYTE SCRATCHPAD RAM AREA
    5469/100.000 :                      INFI    DS      128             ; INPUT FIFO
    5470/100.200 :                      ;       ERRNZ   INF&1111111B    ; 7 LSB MUST BE ZERO
    5471/100.200 :                      ;       ERRNZ   $-INF/256       ; FIFO MUST RESIDE IN ONE PAGE
    5472/100.200 : =200O                IFMAX   EQU     200Q            ; $-INF
    5473/100.200 :                      OUTF    DS      32              ; OUTPUT FIFO
    5474/100.240 : (MACRO)                      ERRNZ   OUTF&11111B     ; 5 LSB MUST BE ZERO
    5474/100.240 : =>FALSE                      IF (OUTF&11111B) != 0
    5474/100.240 :                                ERROR Expression is not zero
    5474/100.240 : [21.098]                     ENDIF
    5475/100.240 :                      ;       ERRNZ   $-OUTF/256      ; FIFO MUST RESIDE IN ONE PAGE
    5476/100.240 : =40O                 OFMAX   EQU     $-OUTF
    5477/100.240 :                      
    5478/100.240 :                      IFP     DS      1               ; INPUT FIFO POINTER
    5479/100.241 :                      IFC     DS      1               ; INPUT FIFO COUNTER
    5480/100.242 : =177O                IFCMSK  EQU     IFMAX-1
    5481/100.242 :                      OFP     DS      1               ; OUTPUT FIFO POINTER
    5482/100.243 :                      OFC     DS      1               ; OUTPUT FIFO COUNTER
    5483/100.244 : =37O                 OFCMSK  EQU     OFMAX-1
    5484/100.244 :                      
    5485/100.244 : =100.244O            KBDFMIN EQU     $               ; BEGINNING OF FIFO
    5486/100.244 :                      KBDF    DS      16              ; KEYBOARD FIFO (8 ENTRIES)
    5487/100.264 : =100.264O            KBDFMAX EQU     $               ; END OF FIFO
    5488/100.264 : =20O                 KBDFL   EQU     KBDFMAX-KBDFMIN ; KEYBOARD FIFO LENGTH
    5489/100.264 :                      KBDFP   DS      2               ; KEYBOARD FIFO POINTER
    5490/100.266 :                      
    5491/100.266 :                      ;       VIDEO AND CURSOR POSITIONS
    5492/100.266 :                      ;
    5493/100.266 :                      SHOME   DS      2               ; SOFTWARE HOME POSITION
    5494/100.270 :                      CLSA    DS      2               ; CURRENT LINE STARTING ADDRESS
    5495/100.272 :                      CURHP   DS      1               ; CURSOR HORIZONTAL POSITION
    5496/100.273 :                      CURVP   DS      1               ; CURSOR VERTICAL POSITION
    5497/100.274 :                      
    5498/100.274 :                      CURAD   DS      2               ; CURSOR ADDRESS (ACTUAL MEMORY ADDRESS)
    5499/100.276 : =77.377O             CURMAX  EQU     37777Q          ; MAXIMUM VALUE OF CURAD FOR CRTC (11 BITS)
    5500/100.276 :                      
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 93 - 2024-05-01 01:09:39 PM


    5501/100.276 :                      ;       VIDEO PARAMETERS TO BE SENT TO THE CRTC BY *NMI*
    5502/100.276 :                      ;
    5503/100.276 :                      
    5504/100.276 :                      VI.VD   DS      1               ; VERTICAL DISPLAYED VALUE
    5505/100.277 :                      VI.CSE  DS      2               ; CURSOR START/OFF AND END VALUES
    5506/100.301 :                      VI.SA   DS      2               ; VIDEO START ADDRESS (LIMIT 2K)
    5507/100.303 :                      VI.CA   DS      2               ; CURSOR ADDRESS
    5508/100.305 :                      
    5509/100.305 :                      CSA     DS      2               ; CURSOR SAVED ADDRESS
    5510/100.307 :                      
    5511/100.307 :                      ;       MODE AND STATUS DEFINITIONS
    5512/100.307 :                      ;
    5513/100.307 :                      MODEA   DS      1               ; MODE REGISTER A
    5514/100.310 : =200O                MA.RV   EQU     10000000B       ; REVERSE VIDEO MODE
    5515/100.310 : =100O                MA.ICM  EQU     01000000B       ; INSERT CHARACTER MODE
    5516/100.310 : =40O                 MA.BRK  EQU     00100000B       ; BREAK KEY FLAG
    5517/100.310 : =20O                 MA.CD   EQU     00010000B       ; CURSOR DISABLED
    5518/100.310 : =10O                 MA.RVP  EQU     00001000B       ; REVERSE VIDEO PRESENT
    5519/100.310 : =4O                  MA.     EQU     00000100B
    5520/100.310 : =2O                  MA.GRPH EQU     00000010B       ; IN GRAPHICS MODE
    5521/100.310 : =1O                  MA.HSM  EQU     00000001B       ; HOLD SCREEN MODE
    5522/100.310 :                      
    5523/100.310 :                      MODEB   DS      1               ; MODE REGISTER B
    5524/100.311 : =1O                  MB.CBLK EQU     00000001B       ; CURSOR = BLOCK
    5525/100.311 : =2O                  MB.NOTK EQU     00000010B       ; NO TICK ON KEYBOARD
    5526/100.311 : =4O                  MB.WRAP EQU     00000100B       ; WRAP AROUND AT END OF LINE
    5527/100.311 : =10O                 MB.ALF  EQU     00001000B       ; AUTO LINE FEED ON CARRIAGE RETURN
    5528/100.311 : =20O                 MB.ACR  EQU     00010000B       ; AUTO CARRIAGE RETURN ON LINE FEED
    5529/100.311 : =40O                 MB.ANSI EQU     00100000B       ; ANSI ESCAPE MODE
    5530/100.311 : =100O                MB.KPDS EQU     01000000B       ; KEYPAD SHIFTED
    5531/100.311 : =200O                MB.KPDA EQU     10000000B       ; KEYPAD ALTERNATE
    5532/100.311 :                      
    5533/100.311 :                      MODEI   DS      1               ; MODE REGISTER 1 (INTERNAL ONLY)
    5534/100.312 : =1O                  MI.PWE  EQU     00000001B       ; PREVIOUS WAS AN ESCAPE CHARACTER
    5535/100.312 : =2O                  MI.XMTM EQU     00000010B       ; TRANSMIT MODE (FORCE TERMINAL ON LINE)
    5536/100.312 : =4O                  MI.KID  EQU     00000100B       ; KEYBOARD INPUT DISABLED
    5537/100.312 : =10O                 MI.ONLN EQU     00001000B       ; TERMINAL ON LINE
    5538/100.312 : =20O                 MI.XOFF EQU     00010000B       ; XOFF SENT
    5539/100.312 : =40O                 MI.     EQU     00100000B
    5540/100.312 : =100O                MI.PFP  EQU     01000000B       ; PROTECTED FIELDS PRESENT
    5541/100.312 : =200O                MI.25L  EQU     10000000B       ; 25TH LINE ENABLED
    5542/100.312 :                      
    5543/100.312 :                      MODES   DS      1               ; MODE REGISTER S (SERIAL I/O)
    5544/100.313 : =17O                 MS.BR   EQU     00001111B       ; BAUD RATE TABLE VECTOR
    5545/100.313 : =20O                 MS.PEN  EQU     00010000B       ; PARITY ENABLE
    5546/100.313 : =40O                 MS.EPS  EQU     00100000B       ; EVEN PARITY SELECT
    5547/100.313 : =100O                MS.SPS  EQU     01000000B       ; STICK PARITY SELECT
    5548/100.313 : =200O                MS.FDX  EQU     10000000B       ; FULL DUPLEX
    5549/100.313 :                      
    5550/100.313 :                      HSMLC   DS      1               ; HOLD SCREEN MODE LINE COUNTER
    5551/100.314 :                      
    5552/100.314 :                      PSDW    DS      16              ; PARAMETER STRING DECODING WORK AREA
    5553/100.334 : =334O                PSDWE   EQU     $&255           ; LSB OF END ADDRESS +1 OF WORK AREA
    5554/100.334 :                      
    5555/370.000 :                              ORG     174000Q
    5556/370.000 : =370.000O            VRAMS   EQU     $               ; VIDEO RAM STARTING ADDRESS
    5557/370.000 : =7.377O              HOMAX   EQU     177777Q-VRAMS   ; MAXIMUM VIDEO ADDRESS MASK
    5558/370.000 :                      
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 94 - 2024-05-01 01:09:39 PM


  Symbol Table (* = unused):
  --------------------------

 A1M :                        4.376 C |  A1RM :                       5.047 C |
 A1RM1 :                      5.056 C |  A1SM :                       5.015 C |
 A1SM1 :                      5.024 C |  A2M :                        5.073 C |
 A2RM :                       5.134 C |  A2RM1 :                      5.137 C |
 A2SM :                       5.112 C |  A2SM1 :                      5.115 C |
 AB.2SB :                         4 - | *AB.5BW :                         0 - |
*AB.6BW :                         1 - |  AB.7BW :                         2 - |
 AB.8BW :                         3 - | *AB.BI :                         20 - |
*AB.CTS :                        20 - | *AB.DCTS :                        1 - |
*AB.DDSR :                        2 - |  AB.DLAB :                      200 - |
*AB.DR :                          1 - |  AB.DRAI :                        4 - |
*AB.DRLS :                       10 - | *AB.DSR :                        40 - |
 AB.DTR :                         1 - | *AB.EMS :                        10 - |
*AB.EPS :                        20 - |  AB.ERDA :                        1 - |
*AB.ERLS :                        4 - |  AB.ETRE :                        2 - |
*AB.FE :                         10 - | *AB.IID :                         6 - |
*AB.IIP :                         1 - | *AB.LOOP :                       20 - |
*AB.OR :                          2 - | *AB.OUT1 :                        4 - |
*AB.OUT2 :                       10 - | *AB.PE :                          4 - |
*AB.PEN :                        10 - | *AB.RLSD :                      200 - |
 AB.RTS :                         2 - |  AB.SBRK :                      100 - |
*AB.SP :                         40 - |  AB.THRE :                       40 - |
 AB.TREI :                        2 - | *AB.TSRE :                      100 - |
 ACDN :                       5.156 C |  ACDN1 :                      5.170 C |
 ACE1 :                      12.247 C |  ACE2 :                      12.265 C |
 ACLFT :                      5.201 C |  ACLFT1 :                     5.214 C |
 ACPR :                       5.223 C |  ACPR1 :                      5.257 C |
 ACPR2 :                      5.311 C |  ACRT :                       5.324 C |
 ACRT1 :                      5.337 C |  ACUP :                       5.346 C |
 ACUP1 :                      5.360 C |  AESCT :                      4.340 - |
 AESCTL :                         4 - |  AESCTW :                         3 - |
 AKI :                           70 C | *AKI1 :                          72 C |
 AKI1.3 :                       254 C |  AKI1.5 :                       264 C |
 AKI1.7 :                       277 C |  AKI1.75 :                      330 C |
 AKI1.8 :                       352 C |  AKI2 :                         362 C |
 AKI3 :                       1.003 C |  AKI4 :                       1.013 C |
 AKI4.3 :                     1.053 C |  AKI4.4 :                     1.057 C |
 AKI4.8 :                     1.070 C |  AKI5 :                       1.111 C |
 AKI6 :                       1.113 C |  AP.DLL :                       100 - |
 AP.DLM :                       101 - |  AP.IER :                       101 - |
 AP.IIR :                       102 - |  AP.LCR :                       103 - |
 AP.LSR :                       105 - |  AP.MCR :                       104 - |
*AP.MSR :                       106 - |  AP.RBR :                       100 - |
 AP.THR :                       100 - |  APCA :                       5.371 C |
 APCA1 :                      6.004 C |  APCA2 :                      6.023 C |
 APCA3 :                      6.026 C |  APCA4 :                      6.034 C |
 APCA5 :                      6.042 C |  APDC :                       6.050 C |
 APDC1 :                      6.062 C |  APDL :                       6.073 C |
 APDL1 :                      6.105 C |  APIL :                       6.116 C |
 APIL1 :                      6.130 C |  ARAMP :                     12.375 C |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 ARM :                        6.141 C |  ARM1 :                       6.150 C |
 ASBR :                       6.206 C |  ASBR1 :                      6.217 C |
 ASCP :                      15.127 C |  ASGM :                       6.222 C |
 ASGM1 :                      6.227 C |  ASGM1.5 :                    6.237 C |
 ASGM2 :                      6.262 C |  ASGMT :                      6.265 - |
 ASGMTL :                         4 - |  ASGMTW :                         3 - |
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 95 - 2024-05-01 01:09:39 PM


 ASM :                        6.301 C |  ASM1 :                       6.310 C |
 AUSCP :                     15.311 C |  AXMT25 :                    16.323 C |
 AXMTP :                     17.247 C |  BELL :                           7 - |
*BR110 :                     12.301 C | *BR1200 :                    12.311 C |
*BR150 :                     12.303 C | *BR1800 :                    12.313 C |
*BR19.2K :                   12.331 C | *BR2000 :                    12.315 C |
*BR2400 :                    12.317 C | *BR300 :                     12.305 C |
*BR3600 :                    12.321 C | *BR4800 :                    12.323 C |
*BR600 :                     12.307 C | *BR7200 :                    12.325 C |
*BR9600 :                    12.327 C |  BRTAB :                     12.301 - |
 BS :                            10 - |  CAN :                           30 - |
*CASESENSITIVE :                  0 - |  CDN :                        6.346 C |
 CLFT :                       7.126 - |  CLR :                       10.020 C |
 CLSA :                     100.270 C | *CONSTPI :        3.141592653589793 - |
 CPM16 :                     10.040 C |  CPR :                        7.153 C |
 CR :                            15 - |  CRT :                        7.201 C |
 CSA :                      100.305 C |  CTLTAB :                     4.354 - |
 CTLTABL :                        6 - |  CTLTABW :                        3 - |
 CUP :                        7.227 C |  CURAD :                    100.274 C |
 CURHP :                    100.272 C |  CURMAX :                    77.377 - |
 CURVP :                    100.273 C |  D25L :                      10.153 C |
*DALF :                      10.171 C | *DATE :                "2024-05-01" - |
 DC :                        10.176 C |  DEOL :                      10.216 C |
 DING :                      10.223 - |  DKI :                       10.226 C |
 E25L :                      10.237 C |  EACR :                      10.276 C |
 EALF :                      10.303 C |  EAM :                       10.310 C |
 EBD :                       10.315 - |  EBD1 :                      10.352 - |
 EBL :                       10.352 C |  EBL1 :                      10.364 C |
 EC :                        10.371 C |  EDD :                       11.014 C |
 EDD1 :                      11.016 C |  EDD2 :                      11.027 C |
 EEL :                       11.051 C |  EGM :                       11.061 C |
 EHM :                       11.065 C |  EHSM :                      11.076 C |
 EICM :                      11.107 C |  EICSEQ :                       '@' - |
 EID :                        7.377 C |  EIL :                       11.031 C |
 EKAM :                      11.113 C |  EKC :                       11.120 C |
 EKI :                       11.125 C |  EKSM :                      11.136 C |
 ELB :                       11.143 C |  ELBT :                      11.172 - |
 ELBTL :                         27 - |  ELBTW :                          3 - |
 EOL :                       11.277 C |  ERM :                       11.317 C |
 ERVM :                      11.361 - |  ESC :                           33 - |
 ESCF :                         200 - |  ESCTAB :                     4.134 - |
 ESCTABL :                       54 - |  ESCTABW :                        3 - |
*FALSE :                          0 - |  FCIF :                      11.367 C |
 FCOD :                      12.032 C |  FNCP :                      12.070 C |
 FNCP1 :                     12.073 C |  FVKF :                      12.107 C |
 FVKF1 :                     12.153 C | *HAS64 :                          1 - |
 HOMAX :                      7.377 - |  HSMLC :                    100.313 C |
 HT :                            11 - | *I.BITA :                       313 - |
*I.BITB :                       100 - | *I.BITHA :                      313 - |
*I.BITHB :                      106 - | *I.EXAF :                        10 - |
*I.EXX :                        331 - | *I.IM1A :                       355 - |
*I.IM1B :                       126 - | *I.JMP :                        303 - |
*I.LDDA :                       355 - | *I.LDDB :                       250 - |
*I.LDDRA :                      355 - | *I.LDDRB :                      270 - |
*I.LDEDA :                      355 - | *I.LDEDB :                      133 - |
*I.LDIA :                       355 - | *I.LDIB :                       240 - |
*I.LDIRA :                      355 - | *I.LDIRB :                      260 - |
*I.NEGA :                       355 - | *I.NEGB :                       104 - |
*I.OUT :                        323 - | *I.RESA :                       313 - |
*I.RESB :                       200 - | *I.RESHA :                      313 - |
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 96 - 2024-05-01 01:09:39 PM


*I.RESHB :                      206 - | *I.RET :                        311 - |
*I.RETNA :                      355 - | *I.RETNB :                      105 - |
*I.SETA :                       313 - | *I.SETB :                       300 - |
*I.SETHA :                      313 - | *I.SETHB :                      306 - |
*I.SHDA :                       355 - | *I.SHDB :                       122 - |
 IACE :                      12.204 C |  IACE0.5 :                   12.221 C |
*IB.BRK :                        20 - |  IB.CPLK :                        1 - |
 IB.ESCF :                        7 - |  IB.ETRE :                        1 - |
 IB.GRPH :                        1 - |  IB.HSM :                         0 - |
 IB.ICM :                         6 - | *IB.IFF :                        70 - |
 IB.KCB :                         7 - | *IB.KPDA :                       70 - |
 IB.KPDS :                        6 - |  IB.KSB :                         0 - |
 IB.ONLN :                        3 - |  IB.PWE :                         0 - |
 IB.RV :                          7 - | *IB.XMTG :                       10 - |
*IB.XMTR :                       20 - |  IB.XOFF :                        4 - |
 ICRT :                      12.333 - |  ICRT0.5 :                   12.347 C |
 ICRT1 :                     12.353 C |  IDT :                       12.366 C |
 IFC :                      100.241 C |  IFCMSK :                       177 - |
 IFCP :                       3.120 C |  IFCP0.5 :                    3.155 C |
 IFCP0.7 :                    3.213 C |  IFCP0.9 :                    3.222 C |
 IFCP1 :                      3.230 C |  IFCP1.1 :                    3.273 C |
 IFCP1.3 :                    3.303 C |  IFCP1.5 :                    3.322 C |
 IFCP1.7 :                    3.341 C |  IFCP1.8 :                    3.351 C |
 IFCP1.9 :                    3.364 C |  IFCP2 :                      3.374 C |
 IFCP3 :                      4.007 C |  IFCP4 :                      4.022 C |
 IFCP5 :                      4.045 C |  IFCP6 :                      4.047 C |
 IFCP7 :                      4.124 C | *IFF :                          200 - |
 IFMAX :                        200 - |  IFP :                      100.240 C |
 INFI :                     100.000 C |  INIT :                      13.001 - |
*INIT1 :                     13.114 C | *IR.A :                           7 - |
*IR.B :                           0 - | *IR.C :                           1 - |
*IR.D :                           2 - | *IR.E :                           3 - |
*IR.H :                           4 - | *IR.L :                           5 - |
*IRAM :                      13.001 C |  KAE1 :                       2.350 C |
 KAE1L :                         11 - |  KAE1W :                          2 - |
 KAE2 :                       2.372 - |  KAE2L :                         14 - |
 KAE2W :                          5 - |  KAE3 :                       3.066 C |
 KAE3L :                         15 - |  KAE3W :                          2 - |
 KB.BRK :                         4 - | *KB.CHAR :                      177 - |
*KB.CPLK :                        2 - |  KB.CTL :                       200 - |
 KB.EX1 :                        13 - | *KB.EX2 :                        14 - |
 KB.ONLN :                       10 - | *KB.RPT :                       100 - |
*KB.SHFT :                        1 - |  KB.STB :                       200 - |
 KBDF :                     100.244 C |  KBDFL :                         20 - |
 KBDFMAX :                  100.264 - |  KBDFMIN :                  100.244 - |
 KBDFP :                    100.264 C |  KCE :                        1.117 C |
*KCE1 :                       1.133 C |  KCE1.2 :                     1.204 C |
 KCE1.4 :                     1.214 C |  KCE1.5 :                     1.220 C |
 KCE10 :                      2.015 C |  KCE10.1 :                    2.130 C |
 KCE10.2 :                    2.140 C |  KCE10.3 :                    2.154 C |
 KCE10.4 :                    2.164 C |  KCE10.5 :                    2.203 C |
 KCE11 :                      2.214 C |  KCE11.5 :                    2.235 C |
 KCE12 :                      2.246 C |  KCE12.5 :                    2.263 C |
 KCE13 :                      2.266 C |  KCE13.5 :                    2.306 C |
 KCE14 :                      2.324 C |  KCE2 :                       1.226 C |
 KCE2.3 :                     1.271 C |  KCE2.7 :                     1.276 C |
 KCE3 :                       1.277 C |  KCE4 :                       1.311 C |
 KCE4.3 :                     1.335 C |  KCE4.7 :                     1.340 C |
 KCE5 :                       1.341 C |  KCE6 :                       1.344 C |
 KCE7 :                       2.002 C |  KCE8 :                       2.006 C |
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 97 - 2024-05-01 01:09:39 PM


 KCE9 :                       2.007 C |  KE10.03 :                    2.062 C |
 KE10.07 :                    2.071 C |  KP.1 :                         200 - |
 KP.2 :                         240 - |  LF :                            12 - |
*LISTON :                         1 - | *MA. :                            4 - |
 MA.BRK :                        40 - |  MA.CD :                         20 - |
 MA.GRPH :                        2 - |  MA.HSM :                         1 - |
 MA.ICM :                       100 - |  MA.RV :                        200 - |
 MA.RVP :                        10 - | *MACEXP :                         7 - |
 MAIN :                           4 C |  MAIN.N :                        16 C |
*MAIN1 :                         37 C |  MAIN2 :                         66 C |
 MAINA :                         45 C |  MB.ACR :                        20 - |
 MB.ALF :                        10 - |  MB.ANSI :                       40 - |
 MB.CBLK :                        1 - |  MB.KPDA :                      200 - |
 MB.KPDS :                      100 - |  MB.NOTK :                        2 - |
 MB.WRAP :                        4 - | *MI. :                           40 - |
 MI.25L :                       200 - |  MI.KID :                         4 - |
 MI.ONLN :                       10 - | *MI.PFP :                       100 - |
 MI.PWE :                         1 - | *MI.XMTM :                        2 - |
 MI.XOFF :                       20 - |  MODEA :                    100.307 C |
 MODEB :                    100.310 C |  MODEI :                    100.311 C |
 MODES :                    100.312 C | *MOMCPU :                       200 - |
*MOMCPUNAME :                 "Z80" - |  MP.BELL :                      340 - |
 MP.PUP1 :                        0 - |  MP.PUP2 :                       40 - |
 MP.TICK :                      300 - |  MPY80 :                     13.137 C |
 MS.BR :                         17 - | *MS.EPS :                        40 - |
 MS.FDX :                       200 - | *MS.PEN :                        20 - |
*MS.SPS :                       100 - | *NESTMAX :                    1.000 - |
 NKC :                       13.155 C | *NMI :                          146 C |
*NULL :                           0 - |  OFC :                      100.243 C |
 OFCMSK :                        37 - |  OFMAX :                         40 - |
 OFP :                      100.242 C |  OUTF :                     100.200 C |
 P1.BR :                         17 - |  P1.EPS :                        40 - |
*P1.FDX :                       200 - |  P1.PEN :                        20 - |
 P1.SPS :                       100 - |  P2.50HZ :                      200 - |
*P2.ALF :                        10 - | *P2.CBLK :                        1 - |
*P2.KPDS :                      100 - | *P2.NOSC :                       20 - |
*P2.NOTK :                        2 - | *P2.VT52 :                       40 - |
*P2.WRAP :                        4 - |  PBS :                        7.126 - |
*PBS1 :                       7.143 C |  PCA :                       13.162 C |
*PCA1 :                      13.170 C |  PCA1.5 :                    13.213 C |
 PCA2 :                      13.220 C | *PCA3 :                      13.227 C |
 PCA4 :                      13.237 C |  PCA5 :                      13.241 C |
 PCA6 :                      13.246 C |  PCIF :                      13.251 C |
 PCOF :                      13.311 C |  PCOF1 :                     13.326 C |
 PCOF2 :                     13.374 C |  PCOFT :                     13.375 C |
 PCR :                       14.013 C |  PCRLF :                     14.003 C |
 PDC :                       14.027 - |  PDC1 :                      14.053 C |
 PDC2 :                      14.071 C |  PDL :                       14.075 - |
 PDL1 :                      14.134 C |  PDL2 :                      14.157 C |
 PIC :                       14.165 - |  PIC1 :                      14.212 C |
 PIL :                       14.234 - |  PIL1 :                      14.271 C |
 PIL2 :                      14.326 C |  PLF :                        6.354 C |
*PLF0.2 :                     6.362 C |  PLF0.5 :                     7.034 C |
 PLF1 :                       7.070 C |  PLF2 :                       7.074 C |
 PLFCR :                      7.112 C |  PRLF :                       7.234 C |
*PRLF0.2 :                    7.242 C |  PRLF0.5 :                    7.316 C |
 PRLF1 :                      7.355 C |  PRLF2 :                      7.361 C |
 PSD :                       14.346 C |  PSD1 :                      14.363 C |
 PSD2 :                      15.012 C |  PSD3 :                      15.024 C |
 PSD3.5 :                    15.030 C |  PSD4 :                      15.035 C |
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 98 - 2024-05-01 01:09:39 PM


 PSD5 :                      15.043 C |  PSDW :                     100.314 C |
 PSDWE :                        334 - |  PSIF :                      15.051 C |
 PSIF1 :                     15.052 C |  PSIF2 :                     15.067 C |
 PSOF :                      15.100 C |  PSOF1 :                     15.101 C |
 PSOF2 :                     15.114 C |  RAM :                      100.000 - |
 RAMP :                      13.000 C | *RELAXED :                        0 - |
 RMS :                       15.122 C |  RMST :                      15.227 - |
 RUBOUT :                       177 - |  SBC :                       15.251 C |
 SBC. :                      15.261 C |  SBR :                       12.157 C |
 SBR. :                      12.172 C | *SBR1 :                      12.162 C |
 SCH :                       15.271 C |  SCP :                       15.132 C |
 SCRL :                          37 - |  SHOME :                    100.266 C |
 SMS :                       15.141 C |  SMSA :                      15.144 C |
 SMSB :                      15.166 C |  SMST :                      15.205 - |
 SNCP :                      15.322 C |  SPWE :                      16.005 C |
 STAB :                      15.363 C |  STAB1 :                     15.364 C |
 STAB2 :                     15.371 C |  STAB3 :                     16.002 C |
*START :                          0 C |  SUC :                       16.016 C |
 SUC. :                      16.026 C |  TAB :                       16.036 C |
*TAB1 :                      16.060 C |  TAB1.5 :                    16.063 C |
 TAB2 :                      16.067 C | *TIME :               "01:09:38 PM" - |
*TRUE :                           1 - |  UCP :                       16.111 C |
 UCP. :                      16.146 C |  USCP :                      15.314 C |
 VA.CAL :                        17 - |  VA.CAM :                        16 - |
 VA.CE :                         13 - |  VA.CS :                         12 - |
*VA.HD :                          1 - | *VA.HSP :                         2 - |
*VA.HSW :                         3 - | *VA.IM :                         10 - |
*VA.LPL :                        21 - | *VA.LPM :                        20 - |
*VA.MLSA :                       11 - |  VA.SAL :                        15 - |
 VA.SAM :                        14 - |  VA.VD :                          6 - |
*VA.VSP :                         7 - | *VA.VT :                          4 - |
*VA.VTA :                         5 - |  VB.CBE :                       100 - |
 VB.CBPS :                       40 - |  VB.CND :                        40 - |
 VB.NMI :                         4 - | *VB.RBD :                        10 - |
*VERSION :                   24.057 - |  VI.CA :                    100.303 C |
 VI.CSE :                   100.277 C |  VI.SA :                    100.301 C |
 VI.VD :                    100.276 C |  VP.AR :                        140 - |
*VP.REGI :                      143 - |  VP.REGO :                      141 - |
 VPARD50 :                   17.351 - |  VPARD60 :                   17.331 - |
 VRAMS :                    370.000 - | *WARNRELATIVE :                   0 - |
 WEOL :                      16.153 C |  WSV :                       16.160 - |
 WSV0.5 :                    16.160 C |  WSV2 :                      16.174 C |
 WSV3 :                      16.176 C |  WSV4 :                      16.214 C |
 WSVA :                      16.212 - |  WSVA. :                     16.212 C |
 XACR :                      16.263 C |  XALF :                      16.270 C |
 XGM :                       16.275 C |  XHSM :                      16.301 C |
 XICM :                      16.305 C |  XICSEQ :                       'O' - |
 XKAM :                      16.311 C |  XKSM :                      16.316 C |
 XMT25 :                     16.326 C |  XMT25.1 :                   16.356 C |
 XMTC :                      16.366 C |  XMTC1 :                     16.367 C |
 XMTL :                      17.001 C |  XMTL1 :                     17.033 C |
 XMTL1.1 :                   17.003 C |  XMTL1.3 :                   17.043 C |
 XMTL2 :                     17.045 C |  XMTL3 :                     17.075 C |
 XMTL4 :                     17.104 C |  XMTL5 :                     17.134 C |
 XMTL6 :                     17.141 - |  XMTL7 :                     17.173 C |
 XMTL7.5 :                   17.202 - |  XMTL8 :                     17.227 C |
 XMTL9 :                     17.234 C |  XMTP :                      17.252 C |
 XMTP1 :                     17.262 C |  XMTS :                      17.302 C |
 XMTS1 :                     17.303 C |  XMTS2 :                     17.316 C |
 XOFF :                          23 - |  XON :                           21 - |
 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 99 - 2024-05-01 01:09:39 PM


 XRVM :                      17.325 - | *Z80SYNTAX :                      0 - |

  2.083 symbols
    151 unused symbols

 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 100 - 2024-05-01 01:09:39 PM


  Defined Macros:
  ---------------

ERRNZ                                 |

      1 macro

 AS V1.42 Beta [Bld 269] - Source File h19.asm - Page 101 - 2024-05-01 01:09:39 PM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.07 seconds assembly time

 21.190 lines source file
 21.202 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
